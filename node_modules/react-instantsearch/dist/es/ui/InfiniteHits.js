var _excluded = ["hitComponent", "hits", "bannerComponent", "banner", "sendEvent", "isFirstPage", "isLastPage", "onShowPrevious", "onShowMore", "classNames", "translations"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { cx } from 'instantsearch-ui-components';
import React from 'react';
function DefaultHitComponent(_ref) {
  var hit = _ref.hit;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      wordBreak: 'break-all'
    }
  }, JSON.stringify(hit).slice(0, 100), "\u2026");
}
function DefaultBanner(_ref2) {
  var classNames = _ref2.classNames,
    banner = _ref2.banner;
  if (!banner.image.urls[0].url) {
    return null;
  }
  return /*#__PURE__*/React.createElement("aside", {
    className: cx('ais-InfiniteHits-banner', classNames.bannerRoot)
  }, banner.link ? /*#__PURE__*/React.createElement("a", {
    className: cx('ais-InfiniteHits-banner-link', classNames.bannerLink),
    href: banner.link.url,
    target: banner.link.target
  }, /*#__PURE__*/React.createElement("img", {
    className: cx('ais-InfiniteHits-banner-image', classNames.bannerImage),
    src: banner.image.urls[0].url,
    alt: banner.image.title
  })) : /*#__PURE__*/React.createElement("img", {
    className: cx('ais-InfiniteHits-banner-image', classNames.bannerImage),
    src: banner.image.urls[0].url,
    alt: banner.image.title
  }));
}
export function InfiniteHits(_ref3) {
  var _ref3$hitComponent = _ref3.hitComponent,
    HitComponent = _ref3$hitComponent === void 0 ? DefaultHitComponent : _ref3$hitComponent,
    hits = _ref3.hits,
    BannerComponent = _ref3.bannerComponent,
    banner = _ref3.banner,
    sendEvent = _ref3.sendEvent,
    isFirstPage = _ref3.isFirstPage,
    isLastPage = _ref3.isLastPage,
    onShowPrevious = _ref3.onShowPrevious,
    onShowMore = _ref3.onShowMore,
    _ref3$classNames = _ref3.classNames,
    classNames = _ref3$classNames === void 0 ? {} : _ref3$classNames,
    translations = _ref3.translations,
    props = _objectWithoutProperties(_ref3, _excluded);
  return /*#__PURE__*/React.createElement("div", _extends({}, props, {
    className: cx('ais-InfiniteHits', classNames.root, hits.length === 0 && cx('ais-InfiniteHits--empty', classNames.emptyRoot), props.className)
  }), onShowPrevious && /*#__PURE__*/React.createElement("button", {
    className: cx('ais-InfiniteHits-loadPrevious', classNames.loadPrevious, isFirstPage && cx('ais-InfiniteHits-loadPrevious--disabled', classNames.disabledLoadPrevious)),
    onClick: onShowPrevious,
    disabled: isFirstPage
  }, translations.showPreviousButtonText), banner && (BannerComponent ? /*#__PURE__*/React.createElement(BannerComponent, {
    className: cx('ais-InfiniteHits-banner', classNames.bannerRoot),
    banner: banner
  }) : /*#__PURE__*/React.createElement(DefaultBanner, {
    classNames: classNames,
    banner: banner
  })), /*#__PURE__*/React.createElement("ol", {
    className: cx('ais-InfiniteHits-list', classNames.list)
  }, hits.map(function (hit) {
    return /*#__PURE__*/React.createElement("li", {
      key: hit.objectID,
      className: cx('ais-InfiniteHits-item', classNames.item),
      onClick: function onClick() {
        sendEvent('click:internal', hit, 'Hit Clicked');
      },
      onAuxClick: function onAuxClick() {
        sendEvent('click:internal', hit, 'Hit Clicked');
      }
    }, /*#__PURE__*/React.createElement(HitComponent, {
      hit: hit,
      sendEvent: sendEvent
    }));
  })), /*#__PURE__*/React.createElement("button", {
    className: cx('ais-InfiniteHits-loadMore', classNames.loadMore, isLastPage && cx('ais-InfiniteHits-loadMore--disabled', classNames.disabledLoadMore)),
    onClick: onShowMore,
    disabled: isLastPage
  }, translations.showMoreButtonText));
}