{"ast":null,"code":"function m() {\n  function r(t) {\n    return new Promise(s => {\n      let e = new XMLHttpRequest();\n      e.open(t.method, t.url, !0), Object.keys(t.headers).forEach(n => e.setRequestHeader(n, t.headers[n]));\n      let i = (n, a) => setTimeout(() => {\n          e.abort(), s({\n            status: 0,\n            content: a,\n            isTimedOut: !0\n          });\n        }, n),\n        u = i(t.connectTimeout, \"Connection timeout\"),\n        o;\n      e.onreadystatechange = () => {\n        e.readyState > e.OPENED && o === void 0 && (clearTimeout(u), o = i(t.responseTimeout, \"Socket timeout\"));\n      }, e.onerror = () => {\n        e.status === 0 && (clearTimeout(u), clearTimeout(o), s({\n          content: e.responseText || \"Network request failed\",\n          status: e.status,\n          isTimedOut: !1\n        }));\n      }, e.onload = () => {\n        clearTimeout(u), clearTimeout(o), s({\n          content: e.responseText,\n          status: e.status,\n          isTimedOut: !1\n        });\n      }, e.send(t.data);\n    });\n  }\n  return {\n    send: r\n  };\n}\nexport { m as createXhrRequester };","map":{"version":3,"names":["m","r","t","Promise","s","e","XMLHttpRequest","open","method","url","Object","keys","headers","forEach","n","setRequestHeader","i","createTimeout","a","setTimeout","abort","status","content","isTimedOut","u","connectTimeout","o","onreadystatechange","readyState","OPENED","clearTimeout","responseTimeout","onerror","responseText","onload","send","data","createXhrRequester"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@algolia/requester-browser-xhr/src/createXhrRequester.ts"],"sourcesContent":["import type { EndRequest, Requester, Response } from '@algolia/client-common';\n\ntype Timeout = ReturnType<typeof setTimeout>;\n\nexport function createXhrRequester(): Requester {\n  function send(request: EndRequest): Promise<Response> {\n    return new Promise((resolve) => {\n      const baseRequester = new XMLHttpRequest();\n      baseRequester.open(request.method, request.url, true);\n\n      Object.keys(request.headers).forEach((key) => baseRequester.setRequestHeader(key, request.headers[key]));\n\n      const createTimeout = (timeout: number, content: string): Timeout => {\n        return setTimeout(() => {\n          baseRequester.abort();\n\n          resolve({\n            status: 0,\n            content,\n            isTimedOut: true,\n          });\n        }, timeout);\n      };\n\n      const connectTimeout = createTimeout(request.connectTimeout, 'Connection timeout');\n\n      let responseTimeout: Timeout | undefined;\n\n      baseRequester.onreadystatechange = (): void => {\n        if (baseRequester.readyState > baseRequester.OPENED && responseTimeout === undefined) {\n          clearTimeout(connectTimeout);\n\n          responseTimeout = createTimeout(request.responseTimeout, 'Socket timeout');\n        }\n      };\n\n      baseRequester.onerror = (): void => {\n        // istanbul ignore next\n        if (baseRequester.status === 0) {\n          clearTimeout(connectTimeout);\n          clearTimeout(responseTimeout!);\n\n          resolve({\n            content: baseRequester.responseText || 'Network request failed',\n            status: baseRequester.status,\n            isTimedOut: false,\n          });\n        }\n      };\n\n      baseRequester.onload = (): void => {\n        clearTimeout(connectTimeout);\n        clearTimeout(responseTimeout!);\n\n        resolve({\n          content: baseRequester.responseText,\n          status: baseRequester.status,\n          isTimedOut: false,\n        });\n      };\n\n      baseRequester.send(request.data);\n    });\n  }\n\n  return { send };\n}\n"],"mappings":"AAIO,SAASA,EAAA,EAAgC;EAC9C,SAASC,EAAKC,CAAA,EAAwC;IACpD,OAAO,IAAIC,OAAA,CAASC,CAAA,IAAY;MAC9B,IAAMC,CAAA,GAAgB,IAAIC,cAAA;MAC1BD,CAAA,CAAcE,IAAA,CAAKL,CAAA,CAAQM,MAAA,EAAQN,CAAA,CAAQO,GAAA,EAAK,EAAI,GAEpDC,MAAA,CAAOC,IAAA,CAAKT,CAAA,CAAQU,OAAO,EAAEC,OAAA,CAASC,CAAA,IAAQT,CAAA,CAAcU,gBAAA,CAAiBD,CAAA,EAAKZ,CAAA,CAAQU,OAAA,CAAQE,CAAG,CAAC,CAAC;MAEvG,IAAME,CAAA,GAAgBC,CAACH,CAAA,EAAiBI,CAAA,KAC/BC,UAAA,CAAW,MAAM;UACtBd,CAAA,CAAce,KAAA,CAAM,GAEpBhB,CAAA,CAAQ;YACNiB,MAAA,EAAQ;YACRC,OAAA,EAAAJ,CAAA;YACAK,UAAA,EAAY;UACd,CAAC,CACH;QAAA,GAAGT,CAAO;QAGNU,CAAA,GAAiBR,CAAA,CAAcd,CAAA,CAAQuB,cAAA,EAAgB,oBAAoB;QAE7EC,CAAA;MAEJrB,CAAA,CAAcsB,kBAAA,GAAqB,MAAY;QACzCtB,CAAA,CAAcuB,UAAA,GAAavB,CAAA,CAAcwB,MAAA,IAAUH,CAAA,KAAoB,WACzEI,YAAA,CAAaN,CAAc,GAE3BE,CAAA,GAAkBV,CAAA,CAAcd,CAAA,CAAQ6B,eAAA,EAAiB,gBAAgB,EAE7E;MAAA,GAEA1B,CAAA,CAAc2B,OAAA,GAAU,MAAY;QAE9B3B,CAAA,CAAcgB,MAAA,KAAW,MAC3BS,YAAA,CAAaN,CAAc,GAC3BM,YAAA,CAAaJ,CAAgB,GAE7BtB,CAAA,CAAQ;UACNkB,OAAA,EAASjB,CAAA,CAAc4B,YAAA,IAAgB;UACvCZ,MAAA,EAAQhB,CAAA,CAAcgB,MAAA;UACtBE,UAAA,EAAY;QACd,CAAC,EAEL;MAAA,GAEAlB,CAAA,CAAc6B,MAAA,GAAS,MAAY;QACjCJ,YAAA,CAAaN,CAAc,GAC3BM,YAAA,CAAaJ,CAAgB,GAE7BtB,CAAA,CAAQ;UACNkB,OAAA,EAASjB,CAAA,CAAc4B,YAAA;UACvBZ,MAAA,EAAQhB,CAAA,CAAcgB,MAAA;UACtBE,UAAA,EAAY;QACd,CAAC,CACH;MAAA,GAEAlB,CAAA,CAAc8B,IAAA,CAAKjC,CAAA,CAAQkC,IAAI,CACjC;IAAA,CAAC,CACH;EAAA;EAEA,OAAO;IAAED,IAAA,EAAAlC;EAAK,CAChB;AAAA;AAAA,SAAAD,CAAA,IAAAqC,kBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}