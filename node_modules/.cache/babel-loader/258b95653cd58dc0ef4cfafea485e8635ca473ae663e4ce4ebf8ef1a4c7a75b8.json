{"ast":null,"code":"import { useFormValidationState as $6FfNf$useFormValidationState } from \"@react-stately/form\";\nimport { useOverlayTriggerState as $6FfNf$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useSingleSelectListState as $6FfNf$useSingleSelectListState } from \"@react-stately/list\";\nimport { useState as $6FfNf$useState } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props) {\n  let triggerState = (0, $6FfNf$useOverlayTriggerState)(props);\n  let [focusStrategy, setFocusStrategy] = (0, $6FfNf$useState)(null);\n  let listState = (0, $6FfNf$useSingleSelectListState)({\n    ...props,\n    onSelectionChange: key => {\n      if (props.onSelectionChange != null) props.onSelectionChange(key);\n      triggerState.close();\n      validationState.commitValidation();\n    }\n  });\n  let validationState = (0, $6FfNf$useFormValidationState)({\n    ...props,\n    value: listState.selectedKey\n  });\n  let [isFocused, setFocused] = (0, $6FfNf$useState)(false);\n  return {\n    ...validationState,\n    ...listState,\n    ...triggerState,\n    focusStrategy: focusStrategy,\n    open(focusStrategy = null) {\n      // Don't open if the collection is empty.\n      if (listState.collection.size !== 0) {\n        setFocusStrategy(focusStrategy);\n        triggerState.open();\n      }\n    },\n    toggle(focusStrategy = null) {\n      if (listState.collection.size !== 0) {\n        setFocusStrategy(focusStrategy);\n        triggerState.toggle();\n      }\n    },\n    isFocused: isFocused,\n    setFocused: setFocused\n  };\n}\nexport { $2bc3a590c5373a4e$export$5159ec8b34d4ec12 as useSelectState };","map":{"version":3,"names":["$2bc3a590c5373a4e$export$5159ec8b34d4ec12","props","triggerState","$6FfNf$useOverlayTriggerState","focusStrategy","setFocusStrategy","$6FfNf$useState","listState","$6FfNf$useSingleSelectListState","onSelectionChange","key","close","validationState","commitValidation","$6FfNf$useFormValidationState","value","selectedKey","isFocused","setFocused","open","collection","size","toggle"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-stately/select/dist/packages/@react-stately/select/src/useSelectState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionStateBase, FocusStrategy} from '@react-types/shared';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {SelectProps} from '@react-types/select';\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {useState} from 'react';\n\nexport interface SelectStateOptions<T> extends Omit<SelectProps<T>, 'children'>, CollectionStateBase<T> {}\n\nexport interface SelectState<T> extends SingleSelectListState<T>, OverlayTriggerState, FormValidationState {\n  /** Whether the select is currently focused. */\n  readonly isFocused: boolean,\n\n  /** Sets whether the select is focused. */\n  setFocused(isFocused: boolean): void,\n\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy | null,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\n/**\n * Provides state management for a select component. Handles building a collection\n * of items from props, handles the open state for the popup menu, and manages\n * multiple selection state.\n */\nexport function useSelectState<T extends object>(props: SelectStateOptions<T>): SelectState<T>  {\n  let triggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n  let listState = useSingleSelectListState({\n    ...props,\n    onSelectionChange: (key) => {\n      if (props.onSelectionChange != null) {\n        props.onSelectionChange(key);\n      }\n\n      triggerState.close();\n      validationState.commitValidation();\n    }\n  });\n\n  let validationState = useFormValidationState({\n    ...props,\n    value: listState.selectedKey\n  });\n\n  let [isFocused, setFocused] = useState(false);\n\n  return {\n    ...validationState,\n    ...listState,\n    ...triggerState,\n    focusStrategy,\n    open(focusStrategy: FocusStrategy = null) {\n      // Don't open if the collection is empty.\n      if (listState.collection.size !== 0) {\n        setFocusStrategy(focusStrategy);\n        triggerState.open();\n      }\n    },\n    toggle(focusStrategy: FocusStrategy = null) {\n      if (listState.collection.size !== 0) {\n        setFocusStrategy(focusStrategy);\n        triggerState.toggle();\n      }\n    },\n    isFocused,\n    setFocused\n  };\n}\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AA2CO,SAASA,0CAAiCC,KAA4B;EAC3E,IAAIC,YAAA,GAAe,IAAAC,6BAAqB,EAAEF,KAAA;EAC1C,IAAI,CAACG,aAAA,EAAeC,gBAAA,CAAiB,GAAG,IAAAC,eAAO,EAAiB;EAChE,IAAIC,SAAA,GAAY,IAAAC,+BAAuB,EAAE;IACvC,GAAGP,KAAK;IACRQ,iBAAA,EAAoBC,GAAA;MAClB,IAAIT,KAAA,CAAMQ,iBAAiB,IAAI,MAC7BR,KAAA,CAAMQ,iBAAiB,CAACC,GAAA;MAG1BR,YAAA,CAAaS,KAAK;MAClBC,eAAA,CAAgBC,gBAAgB;IAClC;EACF;EAEA,IAAID,eAAA,GAAkB,IAAAE,6BAAqB,EAAE;IAC3C,GAAGb,KAAK;IACRc,KAAA,EAAOR,SAAA,CAAUS;EACnB;EAEA,IAAI,CAACC,SAAA,EAAWC,UAAA,CAAW,GAAG,IAAAZ,eAAO,EAAE;EAEvC,OAAO;IACL,GAAGM,eAAe;IAClB,GAAGL,SAAS;IACZ,GAAGL,YAAY;mBACfE,aAAA;IACAe,KAAKf,aAAA,GAA+B,IAAI;MACtC;MACA,IAAIG,SAAA,CAAUa,UAAU,CAACC,IAAI,KAAK,GAAG;QACnChB,gBAAA,CAAiBD,aAAA;QACjBF,YAAA,CAAaiB,IAAI;MACnB;IACF;IACAG,OAAOlB,aAAA,GAA+B,IAAI;MACxC,IAAIG,SAAA,CAAUa,UAAU,CAACC,IAAI,KAAK,GAAG;QACnChB,gBAAA,CAAiBD,aAAA;QACjBF,YAAA,CAAaoB,MAAM;MACrB;IACF;eACAL,SAAA;gBACAC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}