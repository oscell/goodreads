{"ast":null,"code":"import $6hDYZ$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./vars.281f2eea.css\";\nimport $6hDYZ$dropdown_vars_cssmodulejs from \"./dropdown_vars_css.mjs\";\nimport $6hDYZ$spectrumiconsuiAlertMedium from \"@spectrum-icons/ui/AlertMedium\";\nimport $6hDYZ$spectrumiconsuiChevronDownMedium from \"@spectrum-icons/ui/ChevronDownMedium\";\nimport { useSlotProps as $6hDYZ$useSlotProps, useDOMRef as $6hDYZ$useDOMRef, useUnwrapDOMRef as $6hDYZ$useUnwrapDOMRef, useIsMobileDevice as $6hDYZ$useIsMobileDevice, dimensionValue as $6hDYZ$dimensionValue, classNames as $6hDYZ$classNames, SlotProvider as $6hDYZ$SlotProvider } from \"@react-spectrum/utils\";\nimport { Field as $6hDYZ$Field } from \"@react-spectrum/label\";\nimport { FieldButton as $6hDYZ$FieldButton } from \"@react-spectrum/button\";\nimport { useSelect as $6hDYZ$useSelect, HiddenSelect as $6hDYZ$HiddenSelect } from \"@react-aria/select\";\nimport { useListBoxLayout as $6hDYZ$useListBoxLayout, ListBoxBase as $6hDYZ$ListBoxBase } from \"@react-spectrum/listbox\";\nimport { useId as $6hDYZ$useId, useResizeObserver as $6hDYZ$useResizeObserver, useLayoutEffect as $6hDYZ$useLayoutEffect, mergeProps as $6hDYZ$mergeProps } from \"@react-aria/utils\";\nimport { Tray as $6hDYZ$Tray, Popover as $6hDYZ$Popover } from \"@react-spectrum/overlays\";\nimport { useHover as $6hDYZ$useHover, PressResponder as $6hDYZ$PressResponder } from \"@react-aria/interactions\";\nimport { ProgressCircle as $6hDYZ$ProgressCircle } from \"@react-spectrum/progress\";\nimport $6hDYZ$react, { useRef as $6hDYZ$useRef, useState as $6hDYZ$useState, useCallback as $6hDYZ$useCallback } from \"react\";\nimport { Text as $6hDYZ$Text } from \"@react-spectrum/text\";\nimport { useFormProps as $6hDYZ$useFormProps } from \"@react-spectrum/form\";\nimport { useLocalizedStringFormatter as $6hDYZ$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useProviderProps as $6hDYZ$useProviderProps, useProvider as $6hDYZ$useProvider } from \"@react-spectrum/provider\";\nimport { useSelectState as $6hDYZ$useSelectState } from \"@react-stately/select\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $51664a9007a3c6f9$var$Picker(props, ref) {\n  props = (0, $6hDYZ$useSlotProps)(props, 'picker');\n  props = (0, $6hDYZ$useProviderProps)(props);\n  props = (0, $6hDYZ$useFormProps)(props);\n  let stringFormatter = (0, $6hDYZ$useLocalizedStringFormatter)((0, $parcel$interopDefault($6hDYZ$intlStringsmodulejs)), '@react-spectrum/picker');\n  let {\n    autoComplete: autoComplete,\n    isDisabled: isDisabled,\n    direction = 'bottom',\n    align = 'start',\n    shouldFlip = true,\n    placeholder = stringFormatter.format('placeholder'),\n    isQuiet: isQuiet,\n    label: label,\n    labelPosition = 'top',\n    menuWidth: menuWidth,\n    name: name,\n    autoFocus: autoFocus\n  } = props;\n  let state = (0, $6hDYZ$useSelectState)(props);\n  let domRef = (0, $6hDYZ$useDOMRef)(ref);\n  let popoverRef = (0, $6hDYZ$useRef)(undefined);\n  let triggerRef = (0, $6hDYZ$useRef)(undefined);\n  let unwrappedTriggerRef = (0, $6hDYZ$useUnwrapDOMRef)(triggerRef);\n  let listboxRef = (0, $6hDYZ$useRef)(undefined);\n  let isLoadingInitial = props.isLoading && state.collection.size === 0;\n  let isLoadingMore = props.isLoading && state.collection.size > 0;\n  let progressCircleId = (0, $6hDYZ$useId)();\n  // We create the listbox layout in Picker and pass it to ListBoxBase below\n  // so that the layout information can be cached even while the listbox is not mounted.\n  // We also use the layout as the keyboard delegate for type to select.\n  let layout = (0, $6hDYZ$useListBoxLayout)();\n  let {\n    labelProps: labelProps,\n    triggerProps: triggerProps,\n    valueProps: valueProps,\n    menuProps: menuProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = (0, $6hDYZ$useSelect)({\n    ...props,\n    'aria-describedby': isLoadingInitial ? progressCircleId : undefined\n  }, state, unwrappedTriggerRef);\n  let isMobile = (0, $6hDYZ$useIsMobileDevice)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $6hDYZ$useHover)({\n    isDisabled: isDisabled\n  });\n  // On small screen devices, the listbox is rendered in a tray, otherwise a popover.\n  let listbox = /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$ListBoxBase), {\n    ...menuProps,\n    ref: listboxRef,\n    disallowEmptySelection: true,\n    autoFocus: state.focusStrategy || true,\n    shouldSelectOnPressUp: true,\n    focusOnPointerEnter: true,\n    layout: layout,\n    state: state,\n    width: isMobile ? '100%' : undefined,\n    // Set max height: inherit so Tray scrolling works\n    UNSAFE_style: {\n      maxHeight: 'inherit'\n    },\n    isLoading: props.isLoading,\n    showLoadingSpinner: isLoadingMore,\n    onLoadMore: props.onLoadMore\n  });\n  // Measure the width of the button to inform the width of the menu (below).\n  let [buttonWidth, setButtonWidth] = (0, $6hDYZ$useState)(null);\n  let {\n    scale: scale\n  } = (0, $6hDYZ$useProvider)();\n  let onResize = (0, $6hDYZ$useCallback)(() => {\n    if (!isMobile && unwrappedTriggerRef.current) {\n      let width = unwrappedTriggerRef.current.offsetWidth;\n      setButtonWidth(width);\n    }\n  }, [unwrappedTriggerRef, setButtonWidth, isMobile]);\n  (0, $6hDYZ$useResizeObserver)({\n    ref: unwrappedTriggerRef,\n    onResize: onResize\n  });\n  (0, $6hDYZ$useLayoutEffect)(onResize, [scale, state.selectedKey, onResize]);\n  let overlay;\n  if (isMobile) overlay = /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$Tray), {\n    state: state\n  }, listbox);else {\n    // If quiet, use the default width, otherwise match the width of the button. This can be overridden by the menuWidth prop.\n    // Always have a minimum width of the button width. When quiet, there is an extra offset to add.\n    // Not using style props for this because they don't support `calc`.\n    let width = isQuiet ? null : buttonWidth;\n    let style = {\n      width: menuWidth ? (0, $6hDYZ$dimensionValue)(menuWidth) : width,\n      minWidth: isQuiet ? `calc(${buttonWidth}px + calc(2 * var(--spectrum-dropdown-quiet-offset)))` : buttonWidth\n    };\n    overlay = /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$Popover), {\n      UNSAFE_style: style,\n      UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown-popover', {\n        'spectrum-Dropdown-popover--quiet': isQuiet\n      }),\n      ref: popoverRef,\n      placement: `${direction} ${align}`,\n      shouldFlip: shouldFlip,\n      hideArrow: true,\n      state: state,\n      triggerRef: unwrappedTriggerRef,\n      scrollRef: listboxRef\n    }, listbox);\n  }\n  let contents = state.selectedItem ? state.selectedItem.rendered : placeholder;\n  if (typeof contents === 'string') contents = /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$Text), null, contents);\n  let picker = /*#__PURE__*/(0, $6hDYZ$react).createElement(\"div\", {\n    className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown', {\n      'is-invalid': isInvalid && !isDisabled,\n      'is-disabled': isDisabled,\n      'spectrum-Dropdown--quiet': isQuiet\n    })\n  }, /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$HiddenSelect), {\n    autoComplete: autoComplete,\n    isDisabled: isDisabled,\n    state: state,\n    triggerRef: unwrappedTriggerRef,\n    label: label,\n    name: name\n  }), /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$PressResponder), (0, $6hDYZ$mergeProps)(hoverProps, triggerProps), /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$FieldButton), {\n    ref: triggerRef,\n    isActive: state.isOpen,\n    isQuiet: isQuiet,\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    autoFocus: autoFocus,\n    UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown-trigger', {\n      'is-hovered': isHovered\n    })\n  }, /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$SlotProvider), {\n    slots: {\n      icon: {\n        UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Icon'),\n        size: 'S'\n      },\n      avatar: {\n        UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown-avatar'),\n        size: 'avatar-size-100'\n      },\n      text: {\n        ...valueProps,\n        UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown-label', {\n          'is-placeholder': !state.selectedItem\n        })\n      },\n      description: {\n        isHidden: true\n      }\n    }\n  }, contents), isLoadingInitial && /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$ProgressCircle), {\n    id: progressCircleId,\n    isIndeterminate: true,\n    size: \"S\",\n    \"aria-label\": stringFormatter.format('loading'),\n    UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown-progressCircle')\n  }), isInvalid && !isLoadingInitial && !isDisabled && /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$spectrumiconsuiAlertMedium), {\n    UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown-invalidIcon')\n  }), /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$spectrumiconsuiChevronDownMedium), {\n    UNSAFE_className: (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Dropdown-chevron')\n  }))), state.collection.size === 0 ? null : overlay);\n  let wrapperClassName = (0, $6hDYZ$classNames)((0, $parcel$interopDefault($6hDYZ$dropdown_vars_cssmodulejs)), 'spectrum-Field', {\n    'spectrum-Dropdown-fieldWrapper--quiet': isQuiet,\n    'spectrum-Dropdown-fieldWrapper--positionSide': labelPosition === 'side'\n  });\n  return /*#__PURE__*/(0, $6hDYZ$react).createElement((0, $6hDYZ$Field), {\n    ...props,\n    ref: domRef,\n    wrapperClassName: wrapperClassName,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails,\n    showErrorIcon: false,\n    includeNecessityIndicatorInAccessibilityName: true,\n    elementType: \"span\"\n  }, picker);\n}\n/**\n * Pickers allow users to choose a single option from a collapsible list of options when space is limited.\n */ // forwardRef doesn't support generic parameters, so cast the result to the correct type\n// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref\nconst $51664a9007a3c6f9$export$ba25329847403e11 = /*#__PURE__*/(0, $6hDYZ$react).forwardRef($51664a9007a3c6f9$var$Picker);\nexport { $51664a9007a3c6f9$export$ba25329847403e11 as Picker };","map":{"version":3,"names":["$51664a9007a3c6f9$var$Picker","props","ref","$6hDYZ$useSlotProps","$6hDYZ$useProviderProps","$6hDYZ$useFormProps","stringFormatter","$6hDYZ$useLocalizedStringFormatter","$parcel$interopDefault","$6hDYZ$intlStringsmodulejs","autoComplete","isDisabled","direction","align","shouldFlip","placeholder","format","isQuiet","label","labelPosition","menuWidth","name","autoFocus","state","$6hDYZ$useSelectState","domRef","$6hDYZ$useDOMRef","popoverRef","$6hDYZ$useRef","undefined","triggerRef","unwrappedTriggerRef","$6hDYZ$useUnwrapDOMRef","listboxRef","isLoadingInitial","isLoading","collection","size","isLoadingMore","progressCircleId","$6hDYZ$useId","layout","$6hDYZ$useListBoxLayout","labelProps","triggerProps","valueProps","menuProps","descriptionProps","errorMessageProps","isInvalid","validationErrors","validationDetails","$6hDYZ$useSelect","isMobile","$6hDYZ$useIsMobileDevice","hoverProps","isHovered","$6hDYZ$useHover","listbox","$6hDYZ$react","createElement","$6hDYZ$ListBoxBase","disallowEmptySelection","focusStrategy","shouldSelectOnPressUp","focusOnPointerEnter","width","UNSAFE_style","maxHeight","showLoadingSpinner","onLoadMore","buttonWidth","setButtonWidth","$6hDYZ$useState","scale","$6hDYZ$useProvider","onResize","$6hDYZ$useCallback","current","offsetWidth","$6hDYZ$useResizeObserver","$6hDYZ$useLayoutEffect","selectedKey","overlay","$6hDYZ$Tray","style","$6hDYZ$dimensionValue","minWidth","$6hDYZ$Popover","UNSAFE_className","$6hDYZ$classNames","$6hDYZ$dropdown_vars_cssmodulejs","placement","hideArrow","scrollRef","contents","selectedItem","rendered","$6hDYZ$Text","picker","className","$6hDYZ$HiddenSelect","$6hDYZ$PressResponder","$6hDYZ$mergeProps","$6hDYZ$FieldButton","isActive","isOpen","$6hDYZ$SlotProvider","slots","icon","avatar","text","description","isHidden","$6hDYZ$ProgressCircle","id","isIndeterminate","$6hDYZ$spectrumiconsuiAlertMedium","$6hDYZ$spectrumiconsuiChevronDownMedium","wrapperClassName","$6hDYZ$Field","showErrorIcon","includeNecessityIndicatorInAccessibilityName","elementType","$51664a9007a3c6f9$export$ba25329847403e11","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/picker/dist/packages/@react-spectrum/picker/src/Picker.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport ChevronDownMedium from '@spectrum-icons/ui/ChevronDownMedium';\nimport {\n  classNames,\n  dimensionValue,\n  SlotProvider,\n  useDOMRef,\n  useIsMobileDevice,\n  useSlotProps,\n  useUnwrapDOMRef\n} from '@react-spectrum/utils';\nimport {DOMRef, DOMRefValue, FocusableRefValue, LabelPosition} from '@react-types/shared';\nimport {Field} from '@react-spectrum/label';\nimport {FieldButton} from '@react-spectrum/button';\nimport {HiddenSelect, useSelect} from '@react-aria/select';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {ListBoxBase, useListBoxLayout} from '@react-spectrum/listbox';\nimport {mergeProps, useId, useLayoutEffect, useResizeObserver} from '@react-aria/utils';\nimport {Popover, Tray} from '@react-spectrum/overlays';\nimport {PressResponder, useHover} from '@react-aria/interactions';\nimport {ProgressCircle} from '@react-spectrum/progress';\nimport React, {ReactElement, useCallback, useRef, useState} from 'react';\nimport {SpectrumPickerProps} from '@react-types/select';\nimport styles from '@adobe/spectrum-css-temp/components/dropdown/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\nimport {useSelectState} from '@react-stately/select';\n\nfunction Picker<T extends object>(props: SpectrumPickerProps<T>, ref: DOMRef<HTMLDivElement>) {\n  props = useSlotProps(props, 'picker');\n  props = useProviderProps(props);\n  props = useFormProps(props);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/picker');\n  let {\n    autoComplete,\n    isDisabled,\n    direction = 'bottom',\n    align = 'start',\n    shouldFlip = true,\n    placeholder = stringFormatter.format('placeholder'),\n    isQuiet,\n    label,\n    labelPosition = 'top' as LabelPosition,\n    menuWidth,\n    name,\n    autoFocus\n  } = props;\n\n  let state = useSelectState(props);\n  let domRef = useDOMRef(ref);\n\n  let popoverRef = useRef<DOMRefValue<HTMLDivElement>>(undefined);\n  let triggerRef = useRef<FocusableRefValue<HTMLElement>>(undefined);\n  let unwrappedTriggerRef = useUnwrapDOMRef(triggerRef);\n  let listboxRef = useRef(undefined);\n\n  let isLoadingInitial = props.isLoading && state.collection.size === 0;\n  let isLoadingMore = props.isLoading && state.collection.size > 0;\n  let progressCircleId = useId();\n\n  // We create the listbox layout in Picker and pass it to ListBoxBase below\n  // so that the layout information can be cached even while the listbox is not mounted.\n  // We also use the layout as the keyboard delegate for type to select.\n  let layout = useListBoxLayout();\n  let {labelProps, triggerProps, valueProps, menuProps, descriptionProps, errorMessageProps, isInvalid, validationErrors, validationDetails} = useSelect({\n    ...props,\n    'aria-describedby': (isLoadingInitial ? progressCircleId : undefined)\n  }, state, unwrappedTriggerRef);\n\n  let isMobile = useIsMobileDevice();\n  let {hoverProps, isHovered} = useHover({isDisabled});\n\n  // On small screen devices, the listbox is rendered in a tray, otherwise a popover.\n  let listbox = (\n    <ListBoxBase\n      {...menuProps}\n      ref={listboxRef}\n      disallowEmptySelection\n      autoFocus={state.focusStrategy || true}\n      shouldSelectOnPressUp\n      focusOnPointerEnter\n      layout={layout}\n      state={state}\n      width={isMobile ? '100%' : undefined}\n      // Set max height: inherit so Tray scrolling works\n      UNSAFE_style={{maxHeight: 'inherit'}}\n      isLoading={props.isLoading}\n      showLoadingSpinner={isLoadingMore}\n      onLoadMore={props.onLoadMore} />\n  );\n\n  // Measure the width of the button to inform the width of the menu (below).\n  let [buttonWidth, setButtonWidth] = useState(null);\n  let {scale} = useProvider();\n\n  let onResize = useCallback(() => {\n    if (!isMobile && unwrappedTriggerRef.current) {\n      let width = unwrappedTriggerRef.current.offsetWidth;\n      setButtonWidth(width);\n    }\n  }, [unwrappedTriggerRef, setButtonWidth, isMobile]);\n\n  useResizeObserver({\n    ref: unwrappedTriggerRef,\n    onResize: onResize\n  });\n\n  useLayoutEffect(onResize, [scale, state.selectedKey, onResize]);\n\n  let overlay;\n  if (isMobile) {\n    overlay = (\n      <Tray state={state}>\n        {listbox}\n      </Tray>\n    );\n  } else {\n    // If quiet, use the default width, otherwise match the width of the button. This can be overridden by the menuWidth prop.\n    // Always have a minimum width of the button width. When quiet, there is an extra offset to add.\n    // Not using style props for this because they don't support `calc`.\n    let width = isQuiet ? null : buttonWidth;\n    let style = {\n      width: menuWidth ? dimensionValue(menuWidth) : width,\n      minWidth: isQuiet ? `calc(${buttonWidth}px + calc(2 * var(--spectrum-dropdown-quiet-offset)))` : buttonWidth\n    };\n\n    overlay = (\n      <Popover\n        UNSAFE_style={style}\n        UNSAFE_className={classNames(styles, 'spectrum-Dropdown-popover', {'spectrum-Dropdown-popover--quiet': isQuiet})}\n        ref={popoverRef}\n        placement={`${direction} ${align}`}\n        shouldFlip={shouldFlip}\n        hideArrow\n        state={state}\n        triggerRef={unwrappedTriggerRef}\n        scrollRef={listboxRef}>\n        {listbox}\n      </Popover>\n    );\n  }\n\n  let contents = state.selectedItem ? state.selectedItem.rendered : placeholder;\n  if (typeof contents === 'string') {\n    contents = <Text>{contents}</Text>;\n  }\n\n  let picker = (\n    <div\n      className={\n        classNames(\n          styles,\n          'spectrum-Dropdown',\n          {\n            'is-invalid': isInvalid && !isDisabled,\n            'is-disabled': isDisabled,\n            'spectrum-Dropdown--quiet': isQuiet\n          }\n        )\n      }>\n      <HiddenSelect\n        autoComplete={autoComplete}\n        isDisabled={isDisabled}\n        state={state}\n        triggerRef={unwrappedTriggerRef}\n        label={label}\n        name={name} />\n      <PressResponder {...mergeProps(hoverProps, triggerProps)}>\n        <FieldButton\n          ref={triggerRef}\n          isActive={state.isOpen}\n          isQuiet={isQuiet}\n          isDisabled={isDisabled}\n          isInvalid={isInvalid}\n          autoFocus={autoFocus}\n          UNSAFE_className={classNames(styles, 'spectrum-Dropdown-trigger', {'is-hovered': isHovered})}>\n          <SlotProvider\n            slots={{\n              icon: {UNSAFE_className: classNames(styles, 'spectrum-Icon'), size: 'S'},\n              avatar: {UNSAFE_className: classNames(styles, 'spectrum-Dropdown-avatar'), size: 'avatar-size-100'},\n              text: {\n                ...valueProps,\n                UNSAFE_className: classNames(\n                  styles,\n                  'spectrum-Dropdown-label',\n                  {'is-placeholder': !state.selectedItem}\n                )\n              },\n              description: {\n                isHidden: true\n              }\n            }}>\n            {contents}\n          </SlotProvider>\n          {isLoadingInitial &&\n            <ProgressCircle\n              id={progressCircleId}\n              isIndeterminate\n              size=\"S\"\n              aria-label={stringFormatter.format('loading')}\n              UNSAFE_className={classNames(styles, 'spectrum-Dropdown-progressCircle')} />\n          }\n          {isInvalid && !isLoadingInitial && !isDisabled &&\n            <AlertMedium UNSAFE_className={classNames(styles, 'spectrum-Dropdown-invalidIcon')} />\n          }\n          <ChevronDownMedium UNSAFE_className={classNames(styles, 'spectrum-Dropdown-chevron')} />\n        </FieldButton>\n      </PressResponder>\n      {state.collection.size === 0 ? null : overlay}\n    </div>\n  );\n\n  let wrapperClassName = classNames(\n    styles,\n    'spectrum-Field',\n    {\n      'spectrum-Dropdown-fieldWrapper--quiet': isQuiet,\n      'spectrum-Dropdown-fieldWrapper--positionSide': labelPosition === 'side'\n    }\n  );\n\n  return (\n    <Field\n      {...props}\n      ref={domRef}\n      wrapperClassName={wrapperClassName}\n      labelProps={labelProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      isInvalid={isInvalid}\n      validationErrors={validationErrors}\n      validationDetails={validationDetails}\n      showErrorIcon={false}\n      includeNecessityIndicatorInAccessibilityName\n      elementType=\"span\">\n      {picker}\n    </Field>\n  );\n}\n\n/**\n * Pickers allow users to choose a single option from a collapsible list of options when space is limited.\n */\n// forwardRef doesn't support generic parameters, so cast the result to the correct type\n// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref\nconst _Picker = React.forwardRef(Picker) as <T>(props: SpectrumPickerProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_Picker as Picker};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}