{"ast":null,"code":"import $fTVpI$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./vars.d514c1fb.css\";\nimport $fTVpI$fieldlabel_vars_cssmodulejs from \"./fieldlabel_vars_css.mjs\";\nimport $fTVpI$spectrumiconsuiAsterisk from \"@spectrum-icons/ui/Asterisk\";\nimport { useDOMRef as $fTVpI$useDOMRef, useStyleProps as $fTVpI$useStyleProps, classNames as $fTVpI$classNames } from \"@react-spectrum/utils\";\nimport { filterDOMProps as $fTVpI$filterDOMProps } from \"@react-aria/utils\";\nimport $fTVpI$react from \"react\";\nimport { useLocalizedStringFormatter as $fTVpI$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useProviderProps as $fTVpI$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $00af9ba397a66f43$var$Label(props, ref) {\n  props = (0, $fTVpI$useProviderProps)(props);\n  let {\n    children: children,\n    labelPosition = 'top',\n    labelAlign = labelPosition === 'side' ? 'start' : null,\n    isRequired: isRequired,\n    necessityIndicator = isRequired != null ? 'icon' : null,\n    includeNecessityIndicatorInAccessibilityName = false,\n    htmlFor: htmlFor,\n    for: labelFor,\n    elementType: ElementType = 'label',\n    onClick: onClick,\n    ...otherProps\n  } = props;\n  let domRef = (0, $fTVpI$useDOMRef)(ref);\n  let {\n    styleProps: styleProps\n  } = (0, $fTVpI$useStyleProps)(otherProps);\n  let stringFormatter = (0, $fTVpI$useLocalizedStringFormatter)((0, $parcel$interopDefault($fTVpI$intlStringsmodulejs)), '@react-spectrum/label');\n  let necessityLabel = isRequired ? stringFormatter.format('(required)') : stringFormatter.format('(optional)');\n  let icon = /*#__PURE__*/(0, $fTVpI$react).createElement((0, $fTVpI$spectrumiconsuiAsterisk), {\n    UNSAFE_className: (0, $fTVpI$classNames)((0, $parcel$interopDefault($fTVpI$fieldlabel_vars_cssmodulejs)), 'spectrum-FieldLabel-requiredIcon'),\n    \"aria-label\": includeNecessityIndicatorInAccessibilityName ? stringFormatter.format('(required)') : undefined\n  });\n  let labelClassNames = (0, $fTVpI$classNames)((0, $parcel$interopDefault($fTVpI$fieldlabel_vars_cssmodulejs)), 'spectrum-FieldLabel', {\n    'spectrum-FieldLabel--positionSide': labelPosition === 'side',\n    'spectrum-FieldLabel--alignEnd': labelAlign === 'end'\n  }, styleProps.className);\n  return /*#__PURE__*/(0, $fTVpI$react).createElement(ElementType, {\n    ...(0, $fTVpI$filterDOMProps)(otherProps),\n    ...styleProps,\n    onClick: onClick,\n    ref: domRef,\n    className: labelClassNames,\n    htmlFor: ElementType === 'label' ? labelFor || htmlFor : undefined\n  }, children, (necessityIndicator === 'label' || necessityIndicator === 'icon' && isRequired) && ' \\u200b', necessityIndicator === 'label' && /*#__PURE__*/(0, $fTVpI$react).createElement(\"span\", {\n    \"aria-hidden\": !includeNecessityIndicatorInAccessibilityName ? isRequired : undefined\n  }, necessityLabel), necessityIndicator === 'icon' && isRequired && icon);\n}\nlet $00af9ba397a66f43$export$b04be29aa201d4f5 = /*#__PURE__*/(0, $fTVpI$react).forwardRef($00af9ba397a66f43$var$Label);\nexport { $00af9ba397a66f43$export$b04be29aa201d4f5 as Label };","map":{"version":3,"names":["$00af9ba397a66f43$var$Label","props","ref","$fTVpI$useProviderProps","children","labelPosition","labelAlign","isRequired","necessityIndicator","includeNecessityIndicatorInAccessibilityName","htmlFor","for","labelFor","elementType","ElementType","onClick","otherProps","domRef","$fTVpI$useDOMRef","styleProps","$fTVpI$useStyleProps","stringFormatter","$fTVpI$useLocalizedStringFormatter","$parcel$interopDefault","$fTVpI$intlStringsmodulejs","necessityLabel","format","icon","$fTVpI$react","createElement","$fTVpI$spectrumiconsuiAsterisk","UNSAFE_className","$fTVpI$classNames","$fTVpI$fieldlabel_vars_cssmodulejs","undefined","labelClassNames","className","$fTVpI$filterDOMProps","$00af9ba397a66f43$export$b04be29aa201d4f5","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/label/dist/packages/@react-spectrum/label/src/Label.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport Asterisk from '@spectrum-icons/ui/Asterisk';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React from 'react';\nimport {SpectrumLabelProps} from '@react-types/label';\nimport styles from '@adobe/spectrum-css-temp/components/fieldlabel/vars.css';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction Label(props: SpectrumLabelProps, ref: DOMRef<HTMLLabelElement>) {\n  props = useProviderProps(props);\n  let {\n    children,\n    labelPosition = 'top',\n    labelAlign = labelPosition === 'side' ? 'start' : null,\n    isRequired,\n    necessityIndicator = isRequired != null ? 'icon' : null,\n    includeNecessityIndicatorInAccessibilityName = false,\n    htmlFor,\n    for: labelFor,\n    elementType: ElementType = 'label',\n    onClick,\n    ...otherProps\n  } = props;\n\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/label');\n  let necessityLabel = isRequired ? stringFormatter.format('(required)') : stringFormatter.format('(optional)');\n  let icon = (\n    <Asterisk\n      UNSAFE_className={classNames(styles, 'spectrum-FieldLabel-requiredIcon')}\n      aria-label={includeNecessityIndicatorInAccessibilityName ? stringFormatter.format('(required)') : undefined} />\n  );\n\n  let labelClassNames = classNames(\n    styles,\n    'spectrum-FieldLabel',\n    {\n      'spectrum-FieldLabel--positionSide': labelPosition === 'side',\n      'spectrum-FieldLabel--alignEnd': labelAlign === 'end'\n    },\n    styleProps.className\n  );\n\n  return (\n    <ElementType\n      {...filterDOMProps(otherProps)}\n      {...styleProps}\n      onClick={onClick}\n      ref={domRef}\n      className={labelClassNames}\n      htmlFor={ElementType === 'label' ? labelFor || htmlFor : undefined}>\n      {children}\n      {(necessityIndicator === 'label' || (necessityIndicator === 'icon' && isRequired)) && ' \\u200b'}\n      {/* necessityLabel is hidden to screen readers if the field is required because\n        * aria-required is set on the field in that case. That will already be announced,\n        * so no need to duplicate it here. If optional, we do want it to be announced here. */}\n      {necessityIndicator === 'label' && <span aria-hidden={!includeNecessityIndicatorInAccessibilityName ? isRequired : undefined}>{necessityLabel}</span>}\n      {necessityIndicator === 'icon' && isRequired && icon}\n    </ElementType>\n  );\n}\n\nlet _Label = React.forwardRef(Label);\nexport {_Label as Label};\n"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;AAwBA,SAASA,4BAAMC,KAAyB,EAAEC,GAA6B;EACrED,KAAA,GAAQ,IAAAE,uBAAe,EAAEF,KAAA;EACzB,IAAI;IAAAG,QAAA,EACFA,QAAQ;IACRC,aAAA,GAAgB;IAChBC,UAAA,GAAaD,aAAA,KAAkB,SAAS,UAAU;IAAAE,UAAA,EAClDA,UAAU;IACVC,kBAAA,GAAqBD,UAAA,IAAc,OAAO,SAAS;IACnDE,4CAAA,GAA+C;IAAAC,OAAA,EAC/CA,OAAO;IACPC,GAAA,EAAKC,QAAQ;IACbC,WAAA,EAAaC,WAAA,GAAc,OAAO;IAAAC,OAAA,EAClCA,OAAO;IACP,GAAGC;EAAA,CACJ,GAAGf,KAAA;EAEJ,IAAIgB,MAAA,GAAS,IAAAC,gBAAQ,EAAEhB,GAAA;EACvB,IAAI;IAAAiB,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEJ,UAAA;EAEjC,IAAIK,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAChE,IAAIC,cAAA,GAAiBlB,UAAA,GAAac,eAAA,CAAgBK,MAAM,CAAC,gBAAgBL,eAAA,CAAgBK,MAAM,CAAC;EAChG,IAAIC,IAAA,gBACF,IAAAC,YAAA,EAAAC,aAAA,EAAC,GAAAC,8BAAO;IACNC,gBAAA,EAAkB,IAAAC,iBAAS,GAAE,GAAAT,sBAAA,CAAAU,kCAAA,CAAK,GAAG;IACrC,cAAYxB,4CAAA,GAA+CY,eAAA,CAAgBK,MAAM,CAAC,gBAAgBQ;;EAGtG,IAAIC,eAAA,GAAkB,IAAAH,iBAAS,GAC7B,GAAAT,sBAAA,CAAAU,kCAAA,CAAK,GACL,uBACA;IACE,qCAAqC5B,aAAA,KAAkB;IACvD,iCAAiCC,UAAA,KAAe;EAClD,GACAa,UAAA,CAAWiB,SAAS;EAGtB,oBACE,IAAAR,YAAA,EAAAC,aAAA,CAACf,WAAA;IACE,GAAG,IAAAuB,qBAAa,EAAErB,UAAA,CAAW;IAC7B,GAAGG,UAAU;IACdJ,OAAA,EAASA,OAAA;IACTb,GAAA,EAAKe,MAAA;IACLmB,SAAA,EAAWD,eAAA;IACXzB,OAAA,EAASI,WAAA,KAAgB,UAAUF,QAAA,IAAYF,OAAA,GAAUwB;KACxD9B,QAAA,EACA,CAACI,kBAAA,KAAuB,WAAYA,kBAAA,KAAuB,UAAUD,UAAU,KAAM,WAIrFC,kBAAA,KAAuB,wBAAW,IAAAoB,YAAA,EAAAC,aAAA,CAAC;IAAK,eAAa,CAACpB,4CAAA,GAA+CF,UAAA,GAAa2B;KAAYT,cAAA,GAC9HjB,kBAAA,KAAuB,UAAUD,UAAA,IAAcoB,IAAA;AAGtD;AAEA,IAAIW,yCAAA,gBAAS,IAAAV,YAAI,EAAEW,UAAU,CAACvC,2BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}