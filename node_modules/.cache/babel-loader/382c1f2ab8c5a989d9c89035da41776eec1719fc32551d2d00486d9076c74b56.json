{"ast":null,"code":"import { useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3, useSlot as $64fa3d84918910a7$export$9d4c57ee4c6ffdd8 } from \"./utils.mjs\";\nimport { LabelContext as $01b77f81d0f07f68$export$75b6ee27786ba447 } from \"./Label.mjs\";\nimport { useMeter as $9ESvm$useMeter } from \"react-aria\";\nimport { clamp as $9ESvm$clamp } from \"@react-stately/utils\";\nimport $9ESvm$react, { createContext as $9ESvm$createContext, forwardRef as $9ESvm$forwardRef } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $c0c9ced265f3594c$export$8b645da15a96b44f = /*#__PURE__*/(0, $9ESvm$createContext)(null);\nfunction $c0c9ced265f3594c$var$Meter(props, ref) {\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $c0c9ced265f3594c$export$8b645da15a96b44f);\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100\n  } = props;\n  value = (0, $9ESvm$clamp)(value, minValue, maxValue);\n  let [labelRef, label] = (0, $64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();\n  let {\n    meterProps: meterProps,\n    labelProps: labelProps\n  } = (0, $9ESvm$useMeter)({\n    ...props,\n    label: label\n  });\n  // Calculate the width of the progress bar as a percentage\n  let percentage = (value - minValue) / (maxValue - minValue) * 100;\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    defaultClassName: 'react-aria-Meter',\n    values: {\n      percentage: percentage,\n      valueText: meterProps['aria-valuetext']\n    }\n  });\n  return /*#__PURE__*/(0, $9ESvm$react).createElement(\"div\", {\n    ...meterProps,\n    ...renderProps,\n    ref: ref,\n    slot: props.slot || undefined\n  }, /*#__PURE__*/(0, $9ESvm$react).createElement((0, $01b77f81d0f07f68$export$75b6ee27786ba447).Provider, {\n    value: {\n      ...labelProps,\n      ref: labelRef,\n      elementType: 'span'\n    }\n  }, renderProps.children));\n}\n/**\n * A meter represents a quantity within a known range, or a fractional value.\n */\nconst $c0c9ced265f3594c$export$62e3ae2a4090b879 = /*#__PURE__*/(0, $9ESvm$forwardRef)($c0c9ced265f3594c$var$Meter);\nexport { $c0c9ced265f3594c$export$8b645da15a96b44f as MeterContext, $c0c9ced265f3594c$export$62e3ae2a4090b879 as Meter };","map":{"version":3,"names":["$c0c9ced265f3594c$export$8b645da15a96b44f","$9ESvm$createContext","$c0c9ced265f3594c$var$Meter","props","ref","$64fa3d84918910a7$export$29f1550f4b0d4415","value","minValue","maxValue","$9ESvm$clamp","labelRef","label","$64fa3d84918910a7$export$9d4c57ee4c6ffdd8","meterProps","labelProps","$9ESvm$useMeter","percentage","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","defaultClassName","values","valueText","$9ESvm$react","createElement","slot","undefined","$01b77f81d0f07f68$export$75b6ee27786ba447","Provider","elementType","children","$c0c9ced265f3594c$export$62e3ae2a4090b879","$9ESvm$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/Meter.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMeterProps, useMeter} from 'react-aria';\nimport {clamp} from '@react-stately/utils';\nimport {ContextValue, RenderProps, SlotProps, useContextProps, useRenderProps, useSlot} from './utils';\nimport {forwardRefType} from '@react-types/shared';\nimport {LabelContext} from './Label';\nimport React, {createContext, ForwardedRef, forwardRef} from 'react';\n\nexport interface MeterProps extends Omit<AriaMeterProps, 'label'>, RenderProps<MeterRenderProps>, SlotProps {}\n\nexport interface MeterRenderProps {\n  /**\n   * The value as a percentage between the minimum and maximum.\n   */\n  percentage: number,\n  /**\n   * A formatted version of the value.\n   * @selector [aria-valuetext]\n   */\n  valueText: string | undefined\n}\n\nexport const MeterContext = createContext<ContextValue<MeterProps, HTMLDivElement>>(null);\n\nfunction Meter(props: MeterProps, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, MeterContext);\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100\n  } = props;\n  value = clamp(value, minValue, maxValue);\n\n  let [labelRef, label] = useSlot();\n  let {\n    meterProps,\n    labelProps\n  } = useMeter({...props, label});\n\n  // Calculate the width of the progress bar as a percentage\n  let percentage = (value - minValue) / (maxValue - minValue) * 100;\n\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-Meter',\n    values: {\n      percentage,\n      valueText: meterProps['aria-valuetext']\n    }\n  });\n\n  return (\n    <div {...meterProps} {...renderProps} ref={ref} slot={props.slot || undefined}>\n      <LabelContext.Provider value={{...labelProps, ref: labelRef, elementType: 'span'}}>\n        {renderProps.children}\n      </LabelContext.Provider>\n    </div>\n  );\n}\n\n/**\n * A meter represents a quantity within a known range, or a fractional value.\n */\nconst _Meter = /*#__PURE__*/ (forwardRef as forwardRefType)(Meter);\nexport {_Meter as Meter};\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAiCO,MAAMA,yCAAA,gBAAe,IAAAC,oBAAY,EAA4C;AAEpF,SAASC,4BAAMC,KAAiB,EAAEC,GAAiC;EACjE,CAACD,KAAA,EAAOC,GAAA,CAAI,GAAG,IAAAC,yCAAc,EAAEF,KAAA,EAAOC,GAAA,EAAKJ,yCAAA;EAC3C,IAAI;IACFM,KAAA,GAAQ;IACRC,QAAA,GAAW;IACXC,QAAA,GAAW;EAAA,CACZ,GAAGL,KAAA;EACJG,KAAA,GAAQ,IAAAG,YAAI,EAAEH,KAAA,EAAOC,QAAA,EAAUC,QAAA;EAE/B,IAAI,CAACE,QAAA,EAAUC,KAAA,CAAM,GAAG,IAAAC,yCAAM;EAC9B,IAAI;IAAAC,UAAA,EACFA,UAAU;IAAAC,UAAA,EACVA;EAAU,CACX,GAAG,IAAAC,eAAO,EAAE;IAAC,GAAGZ,KAAK;WAAEQ;EAAK;EAE7B;EACA,IAAIK,UAAA,GAAa,CAACV,KAAA,GAAQC,QAAO,KAAMC,QAAA,GAAWD,QAAO,IAAK;EAE9D,IAAIU,WAAA,GAAc,IAAAC,uCAAa,EAAE;IAC/B,GAAGf,KAAK;IACRgB,gBAAA,EAAkB;IAClBC,MAAA,EAAQ;kBACNJ,UAAA;MACAK,SAAA,EAAWR,UAAU,CAAC;IACxB;EACF;EAEA,oBACE,IAAAS,YAAA,EAAAC,aAAA,CAAC;IAAK,GAAGV,UAAU;IAAG,GAAGI,WAAW;IAAEb,GAAA,EAAKA,GAAA;IAAKoB,IAAA,EAAMrB,KAAA,CAAMqB,IAAI,IAAIC;kBAClE,IAAAH,YAAA,EAAAC,aAAA,CAAC,IAAAG,yCAAW,EAAEC,QAAQ;IAACrB,KAAA,EAAO;MAAC,GAAGQ,UAAU;MAAEV,GAAA,EAAKM,QAAA;MAAUkB,WAAA,EAAa;IAAM;KAC7EX,WAAA,CAAYY,QAAQ;AAI7B;AAEA;;;AAGA,MAAMC,yCAAA,GAAuB,aAAC,IAAAC,iBAAS,EAAqB7B,2BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}