{"ast":null,"code":"import \"./vars.9d4a6a55.css\";\nimport $i2wAT$buttongroup_vars_cssmodulejs from \"./buttongroup_vars_css.mjs\";\nimport { useSlotProps as $i2wAT$useSlotProps, useStyleProps as $i2wAT$useStyleProps, useDOMRef as $i2wAT$useDOMRef, useResizeObserver as $i2wAT$useResizeObserver, classNames as $i2wAT$classNames, SlotProvider as $i2wAT$SlotProvider } from \"@react-spectrum/utils\";\nimport { useValueEffect as $i2wAT$useValueEffect, useLayoutEffect as $i2wAT$useLayoutEffect, filterDOMProps as $i2wAT$filterDOMProps } from \"@react-aria/utils\";\nimport { useProvider as $i2wAT$useProvider, useProviderProps as $i2wAT$useProviderProps, Provider as $i2wAT$Provider } from \"@react-spectrum/provider\";\nimport $i2wAT$react, { useCallback as $i2wAT$useCallback, useRef as $i2wAT$useRef } from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $bd4bfa55854eb3bf$var$ButtonGroup(props, ref) {\n  let {\n    scale: scale\n  } = (0, $i2wAT$useProvider)();\n  props = (0, $i2wAT$useProviderProps)(props);\n  props = (0, $i2wAT$useSlotProps)(props, 'buttonGroup');\n  let {\n    children: children,\n    orientation = 'horizontal',\n    isDisabled: isDisabled,\n    align = 'start',\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $i2wAT$useStyleProps)(otherProps);\n  let domRef = (0, $i2wAT$useDOMRef)(ref);\n  let [hasOverflow, setHasOverflow] = (0, $i2wAT$useValueEffect)(false);\n  let checkForOverflow = (0, $i2wAT$useCallback)(() => {\n    let computeHasOverflow = () => {\n      if (domRef.current && orientation === 'horizontal') {\n        let buttonGroupChildren = Array.from(domRef.current.children);\n        let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n        // If any buttons have negative X positions (align=\"end\") or extend beyond\n        // the width of the button group (align=\"start\"), then switch to vertical.\n        if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) return true;\n        return false;\n      }\n    };\n    if (orientation === 'horizontal') setHasOverflow(function* () {\n      // Force to horizontal for measurement.\n      yield false;\n      // Measure, and update if there is overflow.\n      yield computeHasOverflow();\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef, orientation, scale, setHasOverflow, children]);\n  // There are two main reasons we need to remeasure:\n  // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)\n  (0, $i2wAT$useLayoutEffect)(() => {\n    checkForOverflow();\n  }, [checkForOverflow]);\n  // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure\n  let parent = (0, $i2wAT$useRef)(undefined);\n  (0, $i2wAT$useLayoutEffect)(() => {\n    if (domRef.current) parent.current = domRef.current.parentElement;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef.current]);\n  (0, $i2wAT$useResizeObserver)({\n    ref: parent,\n    onResize: checkForOverflow\n  });\n  return /*#__PURE__*/(0, $i2wAT$react).createElement(\"div\", {\n    ...(0, $i2wAT$filterDOMProps)(otherProps),\n    ...styleProps,\n    ref: domRef,\n    className: (0, $i2wAT$classNames)((0, $parcel$interopDefault($i2wAT$buttongroup_vars_cssmodulejs)), 'spectrum-ButtonGroup', {\n      'spectrum-ButtonGroup--vertical': orientation === 'vertical' || hasOverflow,\n      'spectrum-ButtonGroup--alignEnd': align === 'end',\n      'spectrum-ButtonGroup--alignCenter': align === 'center'\n    }, styleProps.className)\n  }, /*#__PURE__*/(0, $i2wAT$react).createElement((0, $i2wAT$SlotProvider), {\n    slots: {\n      button: {\n        UNSAFE_className: (0, $i2wAT$classNames)((0, $parcel$interopDefault($i2wAT$buttongroup_vars_cssmodulejs)), 'spectrum-ButtonGroup-Button')\n      }\n    }\n  }, /*#__PURE__*/(0, $i2wAT$react).createElement((0, $i2wAT$Provider), {\n    isDisabled: isDisabled\n  }, children)));\n}\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\nlet $bd4bfa55854eb3bf$export$69b1032f2ecdf404 = /*#__PURE__*/(0, $i2wAT$react).forwardRef($bd4bfa55854eb3bf$var$ButtonGroup);\nexport { $bd4bfa55854eb3bf$export$69b1032f2ecdf404 as ButtonGroup };","map":{"version":3,"names":["$bd4bfa55854eb3bf$var$ButtonGroup","props","ref","scale","$i2wAT$useProvider","$i2wAT$useProviderProps","$i2wAT$useSlotProps","children","orientation","isDisabled","align","otherProps","styleProps","$i2wAT$useStyleProps","domRef","$i2wAT$useDOMRef","hasOverflow","setHasOverflow","$i2wAT$useValueEffect","checkForOverflow","$i2wAT$useCallback","computeHasOverflow","current","buttonGroupChildren","Array","from","maxX","offsetWidth","some","child","offsetLeft","$i2wAT$useLayoutEffect","parent","$i2wAT$useRef","undefined","parentElement","$i2wAT$useResizeObserver","onResize","$i2wAT$react","createElement","$i2wAT$filterDOMProps","className","$i2wAT$classNames","$parcel$interopDefault","$i2wAT$buttongroup_vars_cssmodulejs","$i2wAT$SlotProvider","slots","button","UNSAFE_className","$i2wAT$Provider","$bd4bfa55854eb3bf$export$69b1032f2ecdf404","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/buttongroup/dist/packages/@react-spectrum/buttongroup/src/ButtonGroup.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  classNames,\n  SlotProvider,\n  useDOMRef,\n  useResizeObserver,\n  useSlotProps,\n  useStyleProps\n} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps, useLayoutEffect, useValueEffect} from '@react-aria/utils';\nimport {Provider, useProvider, useProviderProps} from '@react-spectrum/provider';\nimport React, {useCallback, useRef} from 'react';\nimport {SpectrumButtonGroupProps} from '@react-types/buttongroup';\nimport styles from '@adobe/spectrum-css-temp/components/buttongroup/vars.css';\n\nfunction ButtonGroup(props: SpectrumButtonGroupProps, ref: DOMRef<HTMLDivElement>) {\n  let {scale} = useProvider();\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'buttonGroup');\n\n  let {\n    children,\n    orientation = 'horizontal',\n    isDisabled,\n    align = 'start',\n    ...otherProps\n  } = props;\n\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n  let [hasOverflow, setHasOverflow] = useValueEffect(false);\n\n  let checkForOverflow = useCallback(() => {\n    let computeHasOverflow = () => {\n      if (domRef.current && orientation === 'horizontal') {\n        let buttonGroupChildren = Array.from(domRef.current.children) as HTMLElement[];\n        let maxX = domRef.current.offsetWidth + 1; // + 1 to account for rounding errors\n        // If any buttons have negative X positions (align=\"end\") or extend beyond\n        // the width of the button group (align=\"start\"), then switch to vertical.\n        if (buttonGroupChildren.some(child => child.offsetLeft < 0 || child.offsetLeft + child.offsetWidth > maxX)) {\n          return true;\n        }\n        return false;\n      }\n    };\n    if (orientation === 'horizontal') {\n      setHasOverflow(function* () {\n        // Force to horizontal for measurement.\n        yield false;\n\n        // Measure, and update if there is overflow.\n        yield computeHasOverflow();\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef, orientation, scale, setHasOverflow, children]);\n\n  // There are two main reasons we need to remeasure:\n  // 1. Internal changes: Check for initial overflow or when orientation/scale/children change (from checkForOverflow dep array)\n  useLayoutEffect(() => {\n    checkForOverflow();\n  }, [checkForOverflow]);\n\n  // 2. External changes: buttongroup won't change size due to any parents changing size, so listen to its container for size changes to figure out if we should remeasure\n  let parent = useRef<HTMLElement>(undefined);\n  useLayoutEffect(() => {\n    if (domRef.current) {\n      parent.current = domRef.current.parentElement as HTMLElement;\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [domRef.current]);\n  useResizeObserver({ref: parent, onResize: checkForOverflow});\n\n  return (\n    <div\n      {...filterDOMProps(otherProps)}\n      {...styleProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-ButtonGroup',\n          {\n            'spectrum-ButtonGroup--vertical': orientation === 'vertical' || hasOverflow,\n            'spectrum-ButtonGroup--alignEnd': align === 'end',\n            'spectrum-ButtonGroup--alignCenter': align === 'center'\n          },\n          styleProps.className\n        )\n      }>\n      <SlotProvider\n        slots={{\n          button: {\n            UNSAFE_className: classNames(styles, 'spectrum-ButtonGroup-Button')\n          }\n        }}>\n        <Provider isDisabled={isDisabled}>\n          {children}\n        </Provider>\n      </SlotProvider>\n    </div>\n  );\n}\n\n/**\n * ButtonGroup handles overflow for a grouping of buttons whose actions are related to each other.\n */\nlet _ButtonGroup = React.forwardRef(ButtonGroup);\nexport {_ButtonGroup as ButtonGroup};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}