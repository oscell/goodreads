{"ast":null,"code":"import { useGlobalListeners as $hcgPp$useGlobalListeners, focusWithoutScrolling as $hcgPp$focusWithoutScrolling, useFormReset as $hcgPp$useFormReset, mergeProps as $hcgPp$mergeProps, useLabels as $hcgPp$useLabels } from \"@react-aria/utils\";\nimport { useCallback as $hcgPp$useCallback, useRef as $hcgPp$useRef } from \"react\";\nimport { useKeyboard as $hcgPp$useKeyboard, useMove as $hcgPp$useMove } from \"@react-aria/interactions\";\nimport { useLocale as $hcgPp$useLocale } from \"@react-aria/i18n\";\nimport { useVisuallyHidden as $hcgPp$useVisuallyHidden } from \"@react-aria/visually-hidden\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $b4a0a4fdc900495e$export$9064ff4e44b3729a(props, state, inputRef) {\n  let {\n    isDisabled: isDisabled,\n    innerRadius: innerRadius,\n    outerRadius: outerRadius,\n    'aria-label': ariaLabel,\n    name: name\n  } = props;\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = (0, $hcgPp$useGlobalListeners)();\n  let thumbRadius = (innerRadius + outerRadius) / 2;\n  let focusInput = (0, $hcgPp$useCallback)(() => {\n    if (inputRef.current) (0, $hcgPp$focusWithoutScrolling)(inputRef.current);\n  }, [inputRef]);\n  (0, $hcgPp$useFormReset)(inputRef, state.hue, state.setHue);\n  let currentPosition = (0, $hcgPp$useRef)(null);\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $hcgPp$useKeyboard)({\n    onKeyDown(e) {\n      // these are the cases that useMove doesn't handle\n      if (!/^(PageUp|PageDown)$/.test(e.key)) {\n        e.continuePropagation();\n        return;\n      }\n      // same handling as useMove, don't need to stop propagation, useKeyboard will do that for us\n      e.preventDefault();\n      // remember to set this and unset it so that onChangeEnd is fired\n      state.setDragging(true);\n      switch (e.key) {\n        case 'PageUp':\n          e.preventDefault();\n          state.increment(state.pageStep);\n          break;\n        case 'PageDown':\n          e.preventDefault();\n          state.decrement(state.pageStep);\n          break;\n      }\n      state.setDragging(false);\n    }\n  });\n  let moveHandler = {\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setDragging(true);\n    },\n    onMove({\n      deltaX: deltaX,\n      deltaY: deltaY,\n      pointerType: pointerType,\n      shiftKey: shiftKey\n    }) {\n      if (currentPosition.current == null) currentPosition.current = state.getThumbPosition(thumbRadius);\n      currentPosition.current.x += deltaX;\n      currentPosition.current.y += deltaY;\n      if (pointerType === 'keyboard') {\n        if (deltaX > 0 || deltaY < 0) state.increment(shiftKey ? state.pageStep : state.step);else if (deltaX < 0 || deltaY > 0) state.decrement(shiftKey ? state.pageStep : state.step);\n      } else state.setHueFromPoint(currentPosition.current.x, currentPosition.current.y, thumbRadius);\n    },\n    onMoveEnd() {\n      isOnTrack.current = false;\n      state.setDragging(false);\n      focusInput();\n    }\n  };\n  let {\n    moveProps: movePropsThumb\n  } = (0, $hcgPp$useMove)(moveHandler);\n  let currentPointer = (0, $hcgPp$useRef)(undefined);\n  let isOnTrack = (0, $hcgPp$useRef)(false);\n  let {\n    moveProps: movePropsContainer\n  } = (0, $hcgPp$useMove)({\n    onMoveStart() {\n      if (isOnTrack.current) moveHandler.onMoveStart();\n    },\n    onMove(e) {\n      if (isOnTrack.current) moveHandler.onMove(e);\n    },\n    onMoveEnd() {\n      if (isOnTrack.current) moveHandler.onMoveEnd();\n    }\n  });\n  let onThumbDown = id => {\n    if (!state.isDragging) {\n      currentPointer.current = id;\n      focusInput();\n      state.setDragging(true);\n      if (typeof PointerEvent !== 'undefined') addGlobalListener(window, 'pointerup', onThumbUp, false);else {\n        addGlobalListener(window, 'mouseup', onThumbUp, false);\n        addGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n  let onThumbUp = e => {\n    var _e_changedTouches;\n    var _e_pointerId;\n    let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setDragging(false);\n      currentPointer.current = undefined;\n      isOnTrack.current = false;\n      if (typeof PointerEvent !== 'undefined') removeGlobalListener(window, 'pointerup', onThumbUp, false);else {\n        removeGlobalListener(window, 'mouseup', onThumbUp, false);\n        removeGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n  let onTrackDown = (track, id, pageX, pageY) => {\n    let rect = track.getBoundingClientRect();\n    let x = pageX - rect.x - rect.width / 2;\n    let y = pageY - rect.y - rect.height / 2;\n    let radius = Math.sqrt(x * x + y * y);\n    if (innerRadius < radius && radius < outerRadius && !state.isDragging && currentPointer.current === undefined) {\n      isOnTrack.current = true;\n      currentPointer.current = id;\n      state.setHueFromPoint(x, y, radius);\n      focusInput();\n      state.setDragging(true);\n      if (typeof PointerEvent !== 'undefined') addGlobalListener(window, 'pointerup', onTrackUp, false);else {\n        addGlobalListener(window, 'mouseup', onTrackUp, false);\n        addGlobalListener(window, 'touchend', onTrackUp, false);\n      }\n    }\n  };\n  let onTrackUp = e => {\n    var _e_changedTouches;\n    var _e_pointerId;\n    let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;\n    if (isOnTrack.current && id === currentPointer.current) {\n      isOnTrack.current = false;\n      currentPointer.current = undefined;\n      state.setDragging(false);\n      focusInput();\n      if (typeof PointerEvent !== 'undefined') removeGlobalListener(window, 'pointerup', onTrackUp, false);else {\n        removeGlobalListener(window, 'mouseup', onTrackUp, false);\n        removeGlobalListener(window, 'touchend', onTrackUp, false);\n      }\n    }\n  };\n  let trackInteractions = isDisabled ? {} : (0, $hcgPp$mergeProps)({\n    ...(typeof PointerEvent !== 'undefined' ? {\n      onPointerDown: e => {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;\n        onTrackDown(e.currentTarget, e.pointerId, e.clientX, e.clientY);\n      }\n    } : {\n      onMouseDown: e => {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;\n        onTrackDown(e.currentTarget, undefined, e.clientX, e.clientY);\n      },\n      onTouchStart: e => {\n        onTrackDown(e.currentTarget, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n      }\n    })\n  }, movePropsContainer);\n  let thumbInteractions = isDisabled ? {} : (0, $hcgPp$mergeProps)({\n    onMouseDown: e => {\n      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;\n      onThumbDown(undefined);\n    },\n    onPointerDown: e => {\n      if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;\n      onThumbDown(e.pointerId);\n    },\n    onTouchStart: e => {\n      onThumbDown(e.changedTouches[0].identifier);\n    }\n  }, keyboardProps, movePropsThumb);\n  let {\n    x: x,\n    y: y\n  } = state.getThumbPosition(thumbRadius);\n  // Provide a default aria-label if none is given\n  let {\n    locale: locale\n  } = (0, $hcgPp$useLocale)();\n  if (ariaLabel == null && props['aria-labelledby'] == null) ariaLabel = state.value.getChannelName('hue', locale);\n  let inputLabellingProps = (0, $hcgPp$useLabels)({\n    ...props,\n    'aria-label': ariaLabel\n  });\n  let {\n    minValue: minValue,\n    maxValue: maxValue,\n    step: step\n  } = state.value.getChannelRange('hue');\n  let forcedColorAdjustNoneStyle = {\n    forcedColorAdjust: 'none'\n  };\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $hcgPp$useVisuallyHidden)({\n    style: {\n      opacity: '0.0001',\n      width: '100%',\n      height: '100%',\n      pointerEvents: 'none'\n    }\n  });\n  return {\n    trackProps: {\n      ...trackInteractions,\n      style: {\n        position: 'relative',\n        touchAction: 'none',\n        width: outerRadius * 2,\n        height: outerRadius * 2,\n        background: `\n          conic-gradient(\n            from 90deg,\n            hsl(0, 100%, 50%),\n            hsl(30, 100%, 50%),\n            hsl(60, 100%, 50%),\n            hsl(90, 100%, 50%),\n            hsl(120, 100%, 50%),\n            hsl(150, 100%, 50%),\n            hsl(180, 100%, 50%),\n            hsl(210, 100%, 50%),\n            hsl(240, 100%, 50%),\n            hsl(270, 100%, 50%),\n            hsl(300, 100%, 50%),\n            hsl(330, 100%, 50%),\n            hsl(360, 100%, 50%)\n          )\n        `,\n        clipPath: `path(evenodd, \"${$b4a0a4fdc900495e$var$circlePath(outerRadius, outerRadius, outerRadius)} ${$b4a0a4fdc900495e$var$circlePath(outerRadius, outerRadius, innerRadius)}\")`,\n        ...forcedColorAdjustNoneStyle\n      }\n    },\n    thumbProps: {\n      ...thumbInteractions,\n      style: {\n        position: 'absolute',\n        left: outerRadius + x,\n        top: outerRadius + y,\n        transform: 'translate(-50%, -50%)',\n        touchAction: 'none',\n        ...forcedColorAdjustNoneStyle\n      }\n    },\n    inputProps: (0, $hcgPp$mergeProps)(inputLabellingProps, {\n      type: 'range',\n      min: String(minValue),\n      max: String(maxValue),\n      step: String(step),\n      'aria-valuetext': `${state.value.formatChannelValue('hue', locale)}, ${state.value.getHueName(locale)}`,\n      disabled: isDisabled,\n      value: `${state.value.getChannelValue('hue')}`,\n      name: name,\n      onChange: e => {\n        state.setHue(parseFloat(e.target.value));\n      },\n      style: visuallyHiddenProps.style,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-describedby': props['aria-describedby'],\n      'aria-details': props['aria-details']\n    })\n  };\n}\n// Creates an SVG path string for a circle.\nfunction $b4a0a4fdc900495e$var$circlePath(cx, cy, r) {\n  return `M ${cx}, ${cy} m ${-r}, 0 a ${r}, ${r}, 0, 1, 0, ${r * 2}, 0 a ${r}, ${r}, 0, 1, 0 ${-r * 2}, 0`;\n}\nexport { $b4a0a4fdc900495e$export$9064ff4e44b3729a as useColorWheel };","map":{"version":3,"names":["$b4a0a4fdc900495e$export$9064ff4e44b3729a","props","state","inputRef","isDisabled","innerRadius","outerRadius","ariaLabel","name","addGlobalListener","removeGlobalListener","$hcgPp$useGlobalListeners","thumbRadius","focusInput","$hcgPp$useCallback","current","$hcgPp$focusWithoutScrolling","$hcgPp$useFormReset","hue","setHue","currentPosition","$hcgPp$useRef","keyboardProps","$hcgPp$useKeyboard","onKeyDown","e","test","key","continuePropagation","preventDefault","setDragging","increment","pageStep","decrement","moveHandler","onMoveStart","onMove","deltaX","deltaY","pointerType","shiftKey","getThumbPosition","x","y","step","setHueFromPoint","onMoveEnd","isOnTrack","moveProps","movePropsThumb","$hcgPp$useMove","currentPointer","undefined","movePropsContainer","onThumbDown","id","isDragging","PointerEvent","window","onThumbUp","_e_changedTouches","_e_pointerId","pointerId","changedTouches","identifier","onTrackDown","track","pageX","pageY","rect","getBoundingClientRect","width","height","radius","Math","sqrt","onTrackUp","trackInteractions","$hcgPp$mergeProps","onPointerDown","button","altKey","ctrlKey","metaKey","currentTarget","clientX","clientY","onMouseDown","onTouchStart","thumbInteractions","locale","$hcgPp$useLocale","value","getChannelName","inputLabellingProps","$hcgPp$useLabels","minValue","maxValue","getChannelRange","forcedColorAdjustNoneStyle","forcedColorAdjust","visuallyHiddenProps","$hcgPp$useVisuallyHidden","style","opacity","pointerEvents","trackProps","position","touchAction","background","clipPath","$b4a0a4fdc900495e$var$circlePath","thumbProps","left","top","transform","inputProps","type","min","String","max","formatChannelValue","getHueName","disabled","getChannelValue","onChange","parseFloat","target","cx","cy","r"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-aria/color/dist/packages/@react-aria/color/src/useColorWheel.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaColorWheelProps} from '@react-types/color';\nimport {ColorWheelState} from '@react-stately/color';\nimport {DOMAttributes, RefObject} from '@react-types/shared';\nimport {focusWithoutScrolling, mergeProps, useFormReset, useGlobalListeners, useLabels} from '@react-aria/utils';\nimport React, {ChangeEvent, InputHTMLAttributes, useCallback, useRef} from 'react';\nimport {useKeyboard, useMove} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\nexport interface AriaColorWheelOptions extends AriaColorWheelProps {\n  /** The outer radius of the color wheel. */\n  outerRadius: number,\n  /** The inner radius of the color wheel. */\n  innerRadius: number\n}\n\nexport interface ColorWheelAria {\n  /** Props for the track element. */\n  trackProps: DOMAttributes,\n  /** Props for the thumb element. */\n  thumbProps: DOMAttributes,\n  /** Props for the visually hidden range input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a color wheel component.\n * Color wheels allow users to adjust the hue of an HSL or HSB color value on a circular track.\n */\nexport function useColorWheel(props: AriaColorWheelOptions, state: ColorWheelState, inputRef: RefObject<HTMLInputElement | null>): ColorWheelAria {\n  let {\n    isDisabled,\n    innerRadius,\n    outerRadius,\n    'aria-label': ariaLabel,\n    name\n  } = props;\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let thumbRadius = (innerRadius + outerRadius) / 2;\n\n  let focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n\n  useFormReset(inputRef, state.hue, state.setHue);\n\n  let currentPosition = useRef<{x: number, y: number} | null>(null);\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown(e) {\n      // these are the cases that useMove doesn't handle\n      if (!/^(PageUp|PageDown)$/.test(e.key)) {\n        e.continuePropagation();\n        return;\n      }\n      // same handling as useMove, don't need to stop propagation, useKeyboard will do that for us\n      e.preventDefault();\n      // remember to set this and unset it so that onChangeEnd is fired\n      state.setDragging(true);\n      switch (e.key) {\n        case 'PageUp':\n          e.preventDefault();\n          state.increment(state.pageStep);\n          break;\n        case 'PageDown':\n          e.preventDefault();\n          state.decrement(state.pageStep);\n          break;\n      }\n      state.setDragging(false);\n    }\n  });\n\n  let moveHandler = {\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setDragging(true);\n    },\n    onMove({deltaX, deltaY, pointerType, shiftKey}) {\n      if (currentPosition.current == null) {\n        currentPosition.current = state.getThumbPosition(thumbRadius);\n      }\n      currentPosition.current.x += deltaX;\n      currentPosition.current.y += deltaY;\n      if (pointerType === 'keyboard') {\n        if (deltaX > 0 || deltaY < 0) {\n          state.increment(shiftKey ? state.pageStep : state.step);\n        } else if (deltaX < 0 || deltaY > 0) {\n          state.decrement(shiftKey ? state.pageStep : state.step);\n        }\n      } else {\n        state.setHueFromPoint(currentPosition.current.x, currentPosition.current.y, thumbRadius);\n      }\n    },\n    onMoveEnd() {\n      isOnTrack.current = false;\n      state.setDragging(false);\n      focusInput();\n    }\n  };\n  let {moveProps: movePropsThumb} = useMove(moveHandler);\n\n  let currentPointer = useRef<number | null | undefined>(undefined);\n  let isOnTrack = useRef<boolean>(false);\n  let {moveProps: movePropsContainer} = useMove({\n    onMoveStart() {\n      if (isOnTrack.current) {\n        moveHandler.onMoveStart();\n      }\n    },\n    onMove(e) {\n      if (isOnTrack.current) {\n        moveHandler.onMove(e);\n      }\n    },\n    onMoveEnd() {\n      if (isOnTrack.current) {\n        moveHandler.onMoveEnd();\n      }\n    }\n  });\n\n  let onThumbDown = (id: number | null | undefined) => {\n    if (!state.isDragging) {\n      currentPointer.current = id;\n      focusInput();\n      state.setDragging(true);\n\n      if (typeof PointerEvent !== 'undefined') {\n        addGlobalListener(window, 'pointerup', onThumbUp, false);\n      } else {\n        addGlobalListener(window, 'mouseup', onThumbUp, false);\n        addGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n\n  let onThumbUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setDragging(false);\n      currentPointer.current = undefined;\n      isOnTrack.current = false;\n\n      if (typeof PointerEvent !== 'undefined') {\n        removeGlobalListener(window, 'pointerup', onThumbUp, false);\n      } else {\n        removeGlobalListener(window, 'mouseup', onThumbUp, false);\n        removeGlobalListener(window, 'touchend', onThumbUp, false);\n      }\n    }\n  };\n\n  let onTrackDown = (track: Element, id: number | null | undefined, pageX: number, pageY: number) => {\n    let rect = track.getBoundingClientRect();\n    let x = pageX - rect.x - rect.width / 2;\n    let y = pageY - rect.y - rect.height / 2;\n    let radius = Math.sqrt(x * x + y * y);\n    if (innerRadius < radius && radius < outerRadius && !state.isDragging && currentPointer.current === undefined) {\n      isOnTrack.current = true;\n      currentPointer.current = id;\n      state.setHueFromPoint(x, y, radius);\n\n      focusInput();\n      state.setDragging(true);\n\n      if (typeof PointerEvent !== 'undefined') {\n        addGlobalListener(window, 'pointerup', onTrackUp, false);\n      } else {\n        addGlobalListener(window, 'mouseup', onTrackUp, false);\n        addGlobalListener(window, 'touchend', onTrackUp, false);\n      }\n    }\n  };\n\n  let onTrackUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (isOnTrack.current && id === currentPointer.current) {\n      isOnTrack.current = false;\n      currentPointer.current = undefined;\n      state.setDragging(false);\n      focusInput();\n\n\n      if (typeof PointerEvent !== 'undefined') {\n        removeGlobalListener(window, 'pointerup', onTrackUp, false);\n      } else {\n        removeGlobalListener(window, 'mouseup', onTrackUp, false);\n        removeGlobalListener(window, 'touchend', onTrackUp, false);\n      }\n    }\n  };\n\n  let trackInteractions = isDisabled ? {} : mergeProps({\n    ...(typeof PointerEvent !== 'undefined' ? {\n      onPointerDown: (e: React.PointerEvent) => {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n        onTrackDown(e.currentTarget, e.pointerId, e.clientX, e.clientY);\n      }} : {\n        onMouseDown: (e: React.MouseEvent) => {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onTrackDown(e.currentTarget, undefined, e.clientX, e.clientY);\n        },\n        onTouchStart: (e: React.TouchEvent) => {\n          onTrackDown(e.currentTarget, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n        }\n      })\n  }, movePropsContainer);\n\n  let thumbInteractions = isDisabled ? {} : mergeProps({\n    onMouseDown: (e: React.MouseEvent) => {\n      if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n      onThumbDown(undefined);\n    },\n    onPointerDown: (e: React.PointerEvent) => {\n      if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n        return;\n      }\n      onThumbDown(e.pointerId);\n    },\n    onTouchStart: (e: React.TouchEvent) => {\n      onThumbDown(e.changedTouches[0].identifier);\n    }\n  }, keyboardProps, movePropsThumb);\n  let {x, y} = state.getThumbPosition(thumbRadius);\n\n  // Provide a default aria-label if none is given\n  let {locale} = useLocale();\n  if (ariaLabel == null && props['aria-labelledby'] == null) {\n    ariaLabel = state.value.getChannelName('hue', locale);\n  }\n\n  let inputLabellingProps = useLabels({\n    ...props,\n    'aria-label': ariaLabel\n  });\n\n  let {minValue, maxValue, step} = state.value.getChannelRange('hue');\n\n  let forcedColorAdjustNoneStyle = {\n    forcedColorAdjust: 'none'\n  };\n\n  let {visuallyHiddenProps} = useVisuallyHidden({\n    style: {\n      opacity: '0.0001',\n      width: '100%',\n      height: '100%',\n      pointerEvents: 'none'\n    }\n  });\n\n  return {\n    trackProps: {\n      ...trackInteractions,\n      style: {\n        position: 'relative',\n        touchAction: 'none',\n        width: outerRadius * 2,\n        height: outerRadius * 2,\n        background: `\n          conic-gradient(\n            from 90deg,\n            hsl(0, 100%, 50%),\n            hsl(30, 100%, 50%),\n            hsl(60, 100%, 50%),\n            hsl(90, 100%, 50%),\n            hsl(120, 100%, 50%),\n            hsl(150, 100%, 50%),\n            hsl(180, 100%, 50%),\n            hsl(210, 100%, 50%),\n            hsl(240, 100%, 50%),\n            hsl(270, 100%, 50%),\n            hsl(300, 100%, 50%),\n            hsl(330, 100%, 50%),\n            hsl(360, 100%, 50%)\n          )\n        `,\n        clipPath: `path(evenodd, \"${circlePath(outerRadius, outerRadius, outerRadius)} ${circlePath(outerRadius, outerRadius, innerRadius)}\")`,\n        ...forcedColorAdjustNoneStyle\n      }\n    },\n    thumbProps: {\n      ...thumbInteractions,\n      style: {\n        position: 'absolute',\n        left: outerRadius + x,\n        top: outerRadius + y,\n        transform: 'translate(-50%, -50%)',\n        touchAction: 'none',\n        ...forcedColorAdjustNoneStyle\n      }\n    },\n    inputProps: mergeProps(\n      inputLabellingProps,\n      {\n        type: 'range',\n        min: String(minValue),\n        max: String(maxValue),\n        step: String(step),\n        'aria-valuetext': `${state.value.formatChannelValue('hue', locale)}, ${state.value.getHueName(locale)}`,\n        disabled: isDisabled,\n        value: `${state.value.getChannelValue('hue')}`,\n        name,\n        onChange: (e: ChangeEvent<HTMLInputElement>) => {\n          state.setHue(parseFloat(e.target.value));\n        },\n        style: visuallyHiddenProps.style,\n        'aria-errormessage': props['aria-errormessage'],\n        'aria-describedby': props['aria-describedby'],\n        'aria-details': props['aria-details']\n      }\n    )\n  };\n}\n\n// Creates an SVG path string for a circle.\nfunction circlePath(cx: number, cy: number, r: number) {\n  return `M ${cx}, ${cy} m ${-r}, 0 a ${r}, ${r}, 0, 1, 0, ${r * 2}, 0 a ${r}, ${r}, 0, 1, 0 ${-r * 2}, 0`;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}