{"ast":null,"code":"import { Overlay as $70305dc5fb729c3b$export$c6fdb837b070b4ff } from \"./Overlay.mjs\";\nimport \"./overlays.f8d97b78.css\";\nimport $3XF9U$overlays_cssmodulejs from \"./overlays_css.mjs\";\nimport \"./vars.c8553ee9.css\";\nimport $3XF9U$tray_vars_cssmodulejs from \"./tray_vars_css.mjs\";\nimport { Underlay as $76a452f4e3df11be$export$f360afc887607b02 } from \"./Underlay.mjs\";\nimport { useModalOverlay as $3XF9U$useModalOverlay, DismissButton as $3XF9U$DismissButton } from \"@react-aria/overlays\";\nimport { useDOMRef as $3XF9U$useDOMRef, useStyleProps as $3XF9U$useStyleProps, classNames as $3XF9U$classNames } from \"@react-spectrum/utils\";\nimport $3XF9U$react, { useRef as $3XF9U$useRef, forwardRef as $3XF9U$forwardRef } from \"react\";\nimport { useViewportSize as $3XF9U$useViewportSize } from \"@react-aria/utils\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $1afc87f3d16a5a1c$var$Tray(props, ref) {\n  let {\n    children: children,\n    state: state,\n    ...otherProps\n  } = props;\n  let domRef = (0, $3XF9U$useDOMRef)(ref);\n  let wrapperRef = (0, $3XF9U$useRef)(null);\n  return /*#__PURE__*/(0, $3XF9U$react).createElement((0, $70305dc5fb729c3b$export$c6fdb837b070b4ff), {\n    ...otherProps,\n    isOpen: state.isOpen,\n    nodeRef: wrapperRef\n  }, /*#__PURE__*/(0, $3XF9U$react).createElement($1afc87f3d16a5a1c$var$TrayWrapper, {\n    ...props,\n    wrapperRef: wrapperRef,\n    ref: domRef\n  }, children));\n}\nlet $1afc87f3d16a5a1c$var$TrayWrapper = /*#__PURE__*/(0, $3XF9U$forwardRef)(function (props, ref) {\n  let {\n    children: children,\n    isOpen: isOpen,\n    isFixedHeight: isFixedHeight,\n    state: state,\n    wrapperRef: wrapperRef\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $3XF9U$useStyleProps)(props);\n  let {\n    modalProps: modalProps,\n    underlayProps: underlayProps\n  } = (0, $3XF9U$useModalOverlay)({\n    ...props,\n    isDismissable: true\n  }, state, ref);\n  // We need to measure the window's height in JS rather than using percentages in CSS\n  // so that contents (e.g. menu) can inherit the max-height properly. Using percentages\n  // does not work properly because there is nothing to base the percentage on.\n  // We cannot use vh units because mobile browsers adjust the window height dynamically\n  // when the address bar/bottom toolbars show and hide on scroll and vh units are fixed.\n  // Also, the visual viewport is smaller than the layout viewport when the virtual keyboard\n  // is up, so use the VisualViewport API to ensure the tray is displayed above the keyboard.\n  let viewport = (0, $3XF9U$useViewportSize)();\n  let wrapperStyle = {\n    '--spectrum-visual-viewport-height': viewport.height + 'px'\n  };\n  let wrapperClassName = (0, $3XF9U$classNames)((0, $parcel$interopDefault($3XF9U$tray_vars_cssmodulejs)), 'spectrum-Tray-wrapper');\n  let className = (0, $3XF9U$classNames)((0, $parcel$interopDefault($3XF9U$tray_vars_cssmodulejs)), 'spectrum-Tray', {\n    'is-open': isOpen,\n    'spectrum-Tray--fixedHeight': isFixedHeight\n  }, (0, $3XF9U$classNames)((0, $parcel$interopDefault($3XF9U$overlays_cssmodulejs)), 'spectrum-Tray', 'react-spectrum-Tray'), styleProps.className);\n  // Attach Transition's nodeRef to outer most wrapper for node.reflow: https://github.com/reactjs/react-transition-group/blob/c89f807067b32eea6f68fd6c622190d88ced82e2/src/Transition.js#L231\n  return /*#__PURE__*/(0, $3XF9U$react).createElement(\"div\", {\n    ref: wrapperRef\n  }, /*#__PURE__*/(0, $3XF9U$react).createElement((0, $76a452f4e3df11be$export$f360afc887607b02), {\n    ...underlayProps,\n    isOpen: isOpen\n  }), /*#__PURE__*/(0, $3XF9U$react).createElement(\"div\", {\n    className: wrapperClassName,\n    style: wrapperStyle\n  }, /*#__PURE__*/(0, $3XF9U$react).createElement(\"div\", {\n    ...styleProps,\n    ...modalProps,\n    className: className,\n    ref: ref,\n    \"data-testid\": \"tray\"\n  }, /*#__PURE__*/(0, $3XF9U$react).createElement((0, $3XF9U$DismissButton), {\n    onDismiss: state.close\n  }), children, /*#__PURE__*/(0, $3XF9U$react).createElement((0, $3XF9U$DismissButton), {\n    onDismiss: state.close\n  }))));\n});\nlet $1afc87f3d16a5a1c$export$4589ed81930b555c = /*#__PURE__*/(0, $3XF9U$forwardRef)($1afc87f3d16a5a1c$var$Tray);\nexport { $1afc87f3d16a5a1c$export$4589ed81930b555c as Tray };","map":{"version":3,"names":["$1afc87f3d16a5a1c$var$Tray","props","ref","children","state","otherProps","domRef","$3XF9U$useDOMRef","wrapperRef","$3XF9U$useRef","$3XF9U$react","createElement","$70305dc5fb729c3b$export$c6fdb837b070b4ff","isOpen","nodeRef","$1afc87f3d16a5a1c$var$TrayWrapper","$3XF9U$forwardRef","isFixedHeight","styleProps","$3XF9U$useStyleProps","modalProps","underlayProps","$3XF9U$useModalOverlay","isDismissable","viewport","$3XF9U$useViewportSize","wrapperStyle","height","wrapperClassName","$3XF9U$classNames","$parcel$interopDefault","$3XF9U$tray_vars_cssmodulejs","className","$3XF9U$overlays_cssmodulejs","$76a452f4e3df11be$export$f360afc887607b02","style","$3XF9U$DismissButton","onDismiss","close","$1afc87f3d16a5a1c$export$4589ed81930b555c"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/overlays/dist/packages/@react-spectrum/overlays/src/Tray.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaModalOverlayProps, DismissButton, useModalOverlay} from '@react-aria/overlays';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef, RefObject, StyleProps} from '@react-types/shared';\nimport {Overlay} from './Overlay';\nimport {OverlayProps} from '@react-types/overlays';\nimport {OverlayTriggerState} from '@react-stately/overlays';\nimport overrideStyles from './overlays.css';\nimport React, {forwardRef, MutableRefObject, ReactNode, useRef} from 'react';\nimport trayStyles from '@adobe/spectrum-css-temp/components/tray/vars.css';\nimport {Underlay} from './Underlay';\nimport {useViewportSize} from '@react-aria/utils';\n\ninterface TrayProps extends AriaModalOverlayProps, StyleProps, Omit<OverlayProps, 'nodeRef' | 'shouldContainFocus'> {\n  children: ReactNode,\n  state: OverlayTriggerState,\n  isFixedHeight?: boolean\n}\n\ninterface TrayWrapperProps extends TrayProps {\n  isOpen?: boolean,\n  wrapperRef: MutableRefObject<HTMLDivElement>\n}\n\nfunction Tray(props: TrayProps, ref: DOMRef<HTMLDivElement>) {\n  let {children, state, ...otherProps} = props;\n  let domRef = useDOMRef(ref);\n  let wrapperRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <Overlay {...otherProps} isOpen={state.isOpen} nodeRef={wrapperRef}>\n      <TrayWrapper {...props} wrapperRef={wrapperRef} ref={domRef}>\n        {children}\n      </TrayWrapper>\n    </Overlay>\n  );\n}\n\nlet TrayWrapper = forwardRef(function (props: TrayWrapperProps, ref: RefObject<HTMLDivElement | null>) {\n  let {\n    children,\n    isOpen,\n    isFixedHeight,\n    state,\n    wrapperRef\n  } = props;\n  let {styleProps} = useStyleProps(props);\n\n  let {modalProps, underlayProps} = useModalOverlay({\n    ...props,\n    isDismissable: true\n  }, state, ref);\n\n  // We need to measure the window's height in JS rather than using percentages in CSS\n  // so that contents (e.g. menu) can inherit the max-height properly. Using percentages\n  // does not work properly because there is nothing to base the percentage on.\n  // We cannot use vh units because mobile browsers adjust the window height dynamically\n  // when the address bar/bottom toolbars show and hide on scroll and vh units are fixed.\n  // Also, the visual viewport is smaller than the layout viewport when the virtual keyboard\n  // is up, so use the VisualViewport API to ensure the tray is displayed above the keyboard.\n  let viewport = useViewportSize();\n  let wrapperStyle: any = {\n    '--spectrum-visual-viewport-height': viewport.height + 'px'\n  };\n\n  let wrapperClassName = classNames(\n    trayStyles,\n    'spectrum-Tray-wrapper'\n  );\n\n  let className = classNames(\n    trayStyles,\n    'spectrum-Tray',\n    {\n      'is-open': isOpen,\n      'spectrum-Tray--fixedHeight': isFixedHeight\n    },\n    classNames(\n      overrideStyles,\n      'spectrum-Tray',\n      'react-spectrum-Tray'\n    ),\n    styleProps.className\n  );\n\n  // Attach Transition's nodeRef to outer most wrapper for node.reflow: https://github.com/reactjs/react-transition-group/blob/c89f807067b32eea6f68fd6c622190d88ced82e2/src/Transition.js#L231\n  return (\n    <div ref={wrapperRef}>\n      <Underlay {...underlayProps} isOpen={isOpen} />\n      <div className={wrapperClassName} style={wrapperStyle}>\n        <div\n          {...styleProps}\n          {...modalProps}\n          className={className}\n          ref={ref}\n          data-testid=\"tray\">\n          <DismissButton onDismiss={state.close} />\n          {children}\n          <DismissButton onDismiss={state.close} />\n        </div>\n      </div>\n    </div>\n  );\n});\n\nlet _Tray = forwardRef(Tray);\nexport {_Tray as Tray};\n"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAmCA,SAASA,2BAAKC,KAAgB,EAAEC,GAA2B;EACzD,IAAI;IAAAC,QAAA,EAACA,QAAQ;IAAAC,KAAA,EAAEA,KAAK;IAAE,GAAGC;EAAA,CAAW,GAAGJ,KAAA;EACvC,IAAIK,MAAA,GAAS,IAAAC,gBAAQ,EAAEL,GAAA;EACvB,IAAIM,UAAA,GAAa,IAAAC,aAAK,EAAkB;EAExC,oBACE,IAAAC,YAAA,EAAAC,aAAA,EAAC,GAAAC,yCAAM;IAAG,GAAGP,UAAU;IAAEQ,MAAA,EAAQT,KAAA,CAAMS,MAAM;IAAEC,OAAA,EAASN;kBACtD,IAAAE,YAAA,EAAAC,aAAA,CAACI,iCAAA;IAAa,GAAGd,KAAK;IAAEO,UAAA,EAAYA,UAAA;IAAYN,GAAA,EAAKI;KAClDH,QAAA;AAIT;AAEA,IAAIY,iCAAA,gBAAc,IAAAC,iBAAS,EAAE,UAAUf,KAAuB,EAAEC,GAAqC;EACnG,IAAI;IAAAC,QAAA,EACFA,QAAQ;IAAAU,MAAA,EACRA,MAAM;IAAAI,aAAA,EACNA,aAAa;IAAAb,KAAA,EACbA,KAAK;IAAAI,UAAA,EACLA;EAAU,CACX,GAAGP,KAAA;EACJ,IAAI;IAAAiB,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAElB,KAAA;EAEjC,IAAI;IAAAmB,UAAA,EAACA,UAAU;IAAAC,aAAA,EAAEA;EAAa,CAAC,GAAG,IAAAC,sBAAc,EAAE;IAChD,GAAGrB,KAAK;IACRsB,aAAA,EAAe;EACjB,GAAGnB,KAAA,EAAOF,GAAA;EAEV;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIsB,QAAA,GAAW,IAAAC,sBAAc;EAC7B,IAAIC,YAAA,GAAoB;IACtB,qCAAqCF,QAAA,CAASG,MAAM,GAAG;EACzD;EAEA,IAAIC,gBAAA,GAAmB,IAAAC,iBAAS,GAC9B,GAAAC,sBAAA,CAAAC,4BAAA,CAAS,GACT;EAGF,IAAIC,SAAA,GAAY,IAAAH,iBAAS,GACvB,GAAAC,sBAAA,CAAAC,4BAAA,CAAS,GACT,iBACA;IACE,WAAWlB,MAAA;IACX,8BAA8BI;EAChC,GACA,IAAAY,iBAAS,GACP,GAAAC,sBAAA,CAAAG,2BAAA,CAAa,GACb,iBACA,wBAEFf,UAAA,CAAWc,SAAS;EAGtB;EACA,oBACE,IAAAtB,YAAA,EAAAC,aAAA,CAAC;IAAIT,GAAA,EAAKM;kBACR,IAAAE,YAAA,EAAAC,aAAA,EAAC,GAAAuB,yCAAO;IAAG,GAAGb,aAAa;IAAER,MAAA,EAAQA;mBACrC,IAAAH,YAAA,EAAAC,aAAA,CAAC;IAAIqB,SAAA,EAAWJ,gBAAA;IAAkBO,KAAA,EAAOT;kBACvC,IAAAhB,YAAA,EAAAC,aAAA,CAAC;IACE,GAAGO,UAAU;IACb,GAAGE,UAAU;IACdY,SAAA,EAAWA,SAAA;IACX9B,GAAA,EAAKA,GAAA;IACL,eAAY;kBACZ,IAAAQ,YAAA,EAAAC,aAAA,EAAC,GAAAyB,oBAAY;IAAEC,SAAA,EAAWjC,KAAA,CAAMkC;MAC/BnC,QAAA,eACD,IAAAO,YAAA,EAAAC,aAAA,EAAC,GAAAyB,oBAAY;IAAEC,SAAA,EAAWjC,KAAA,CAAMkC;;AAK1C;AAEA,IAAIC,yCAAA,gBAAQ,IAAAvB,iBAAS,EAAEhB,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}