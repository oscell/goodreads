{"ast":null,"code":"import \"./vars.6caec7fe.css\";\nimport $3XyjH$button_vars_cssmodulejs from \"./button_vars_css.mjs\";\nimport { useFocusableRef as $3XyjH$useFocusableRef, useStyleProps as $3XyjH$useStyleProps, classNames as $3XyjH$classNames, SlotProvider as $3XyjH$SlotProvider } from \"@react-spectrum/utils\";\nimport { FocusRing as $3XyjH$FocusRing } from \"@react-aria/focus\";\nimport { mergeProps as $3XyjH$mergeProps } from \"@react-aria/utils\";\nimport $3XyjH$react from \"react\";\nimport { Text as $3XyjH$Text } from \"@react-spectrum/text\";\nimport { useHover as $3XyjH$useHover } from \"@react-aria/interactions\";\nimport { useProviderProps as $3XyjH$useProviderProps } from \"@react-spectrum/provider\";\nimport { useToggleButton as $3XyjH$useToggleButton } from \"@react-aria/button\";\nimport { useToggleState as $3XyjH$useToggleState } from \"@react-stately/toggle\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $3979c7c23b0bd270$var$ToggleButton(props, ref) {\n  props = (0, $3XyjH$useProviderProps)(props);\n  let {\n    isQuiet: isQuiet,\n    isDisabled: isDisabled,\n    isEmphasized: isEmphasized,\n    staticColor: staticColor,\n    children: children,\n    autoFocus: autoFocus,\n    ...otherProps\n  } = props;\n  let domRef = (0, $3XyjH$useFocusableRef)(ref);\n  let state = (0, $3XyjH$useToggleState)(props);\n  let {\n    buttonProps: buttonProps,\n    isPressed: isPressed\n  } = (0, $3XyjH$useToggleButton)(props, state, domRef);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $3XyjH$useHover)({\n    isDisabled: isDisabled\n  });\n  let {\n    styleProps: styleProps\n  } = (0, $3XyjH$useStyleProps)(otherProps);\n  let isTextOnly = (0, $3XyjH$react).Children.toArray(props.children).every(c => ! /*#__PURE__*/(0, $3XyjH$react).isValidElement(c));\n  return /*#__PURE__*/(0, $3XyjH$react).createElement((0, $3XyjH$FocusRing), {\n    focusRingClass: (0, $3XyjH$classNames)((0, $parcel$interopDefault($3XyjH$button_vars_cssmodulejs)), 'focus-ring'),\n    autoFocus: autoFocus\n  }, /*#__PURE__*/(0, $3XyjH$react).createElement(\"button\", {\n    ...styleProps,\n    ...(0, $3XyjH$mergeProps)(buttonProps, hoverProps),\n    ref: domRef,\n    className: (0, $3XyjH$classNames)((0, $parcel$interopDefault($3XyjH$button_vars_cssmodulejs)), 'spectrum-ActionButton', {\n      'spectrum-ActionButton--quiet': isQuiet,\n      'spectrum-ActionButton--emphasized': isEmphasized,\n      'spectrum-ActionButton--staticColor': !!staticColor,\n      'spectrum-ActionButton--staticWhite': staticColor === 'white',\n      'spectrum-ActionButton--staticBlack': staticColor === 'black',\n      'is-active': isPressed,\n      'is-disabled': isDisabled,\n      'is-hovered': isHovered,\n      'is-selected': state.isSelected\n    }, styleProps.className)\n  }, /*#__PURE__*/(0, $3XyjH$react).createElement((0, $3XyjH$SlotProvider), {\n    slots: {\n      icon: {\n        size: 'S',\n        UNSAFE_className: (0, $3XyjH$classNames)((0, $parcel$interopDefault($3XyjH$button_vars_cssmodulejs)), 'spectrum-Icon')\n      },\n      text: {\n        UNSAFE_className: (0, $3XyjH$classNames)((0, $parcel$interopDefault($3XyjH$button_vars_cssmodulejs)), 'spectrum-ActionButton-label')\n      }\n    }\n  }, typeof children === 'string' || isTextOnly ? /*#__PURE__*/(0, $3XyjH$react).createElement((0, $3XyjH$Text), null, children) : children)));\n}\n/**\n * ToggleButtons allow users to toggle a selection on or off, for example\n * switching between two states or modes.\n */\nlet $3979c7c23b0bd270$export$d2b052e7b4be1756 = /*#__PURE__*/(0, $3XyjH$react).forwardRef($3979c7c23b0bd270$var$ToggleButton);\nexport { $3979c7c23b0bd270$export$d2b052e7b4be1756 as ToggleButton };","map":{"version":3,"names":["$3979c7c23b0bd270$var$ToggleButton","props","ref","$3XyjH$useProviderProps","isQuiet","isDisabled","isEmphasized","staticColor","children","autoFocus","otherProps","domRef","$3XyjH$useFocusableRef","state","$3XyjH$useToggleState","buttonProps","isPressed","$3XyjH$useToggleButton","hoverProps","isHovered","$3XyjH$useHover","styleProps","$3XyjH$useStyleProps","isTextOnly","$3XyjH$react","Children","toArray","every","c","isValidElement","createElement","$3XyjH$FocusRing","focusRingClass","$3XyjH$classNames","$parcel$interopDefault","$3XyjH$button_vars_cssmodulejs","$3XyjH$mergeProps","className","isSelected","$3XyjH$SlotProvider","slots","icon","size","UNSAFE_className","text","$3XyjH$Text","$3979c7c23b0bd270$export$d2b052e7b4be1756","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/button/dist/packages/@react-spectrum/button/src/ToggleButton.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumToggleButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useToggleButton} from '@react-aria/button';\nimport {useToggleState} from '@react-stately/toggle';\n\nfunction ToggleButton(props: SpectrumToggleButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  let {\n    isQuiet,\n    isDisabled,\n    isEmphasized,\n    staticColor,\n    children,\n    autoFocus,\n    ...otherProps\n  } = props;\n\n  let domRef = useFocusableRef(ref);\n  let state = useToggleState(props);\n  let {buttonProps, isPressed} = useToggleButton(props, state, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n  let isTextOnly = React.Children.toArray(props.children).every(c => !React.isValidElement(c));\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ActionButton',\n            {\n              'spectrum-ActionButton--quiet': isQuiet,\n              'spectrum-ActionButton--emphasized': isEmphasized,\n              'spectrum-ActionButton--staticColor': !!staticColor,\n              'spectrum-ActionButton--staticWhite': staticColor === 'white',\n              'spectrum-ActionButton--staticBlack': staticColor === 'black',\n              'is-active': isPressed,\n              'is-disabled': isDisabled,\n              'is-hovered': isHovered,\n              'is-selected': state.isSelected\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              UNSAFE_className: classNames(styles, 'spectrum-ActionButton-label')\n            }\n          }}>\n          {typeof children === 'string' || isTextOnly\n            ? <Text>{children}</Text>\n            : children}\n        </SlotProvider>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * ToggleButtons allow users to toggle a selection on or off, for example\n * switching between two states or modes.\n */\nlet _ToggleButton = React.forwardRef(ToggleButton);\nexport {_ToggleButton as ToggleButton};\n"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAyBA,SAASA,mCAAaC,KAAgC,EAAEC,GAAoC;EAC1FD,KAAA,GAAQ,IAAAE,uBAAe,EAAEF,KAAA;EACzB,IAAI;IAAAG,OAAA,EACFA,OAAO;IAAAC,UAAA,EACPA,UAAU;IAAAC,YAAA,EACVA,YAAY;IAAAC,WAAA,EACZA,WAAW;IAAAC,QAAA,EACXA,QAAQ;IAAAC,SAAA,EACRA,SAAS;IACT,GAAGC;EAAA,CACJ,GAAGT,KAAA;EAEJ,IAAIU,MAAA,GAAS,IAAAC,sBAAc,EAAEV,GAAA;EAC7B,IAAIW,KAAA,GAAQ,IAAAC,qBAAa,EAAEb,KAAA;EAC3B,IAAI;IAAAc,WAAA,EAACA,WAAW;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,sBAAc,EAAEhB,KAAA,EAAOY,KAAA,EAAOF,MAAA;EAC7D,IAAI;IAAAO,UAAA,EAACA,UAAU;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,eAAO,EAAE;gBAACf;EAAU;EAClD,IAAI;IAAAgB,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEZ,UAAA;EACjC,IAAIa,UAAA,GAAa,IAAAC,YAAI,EAAEC,QAAQ,CAACC,OAAO,CAACzB,KAAA,CAAMO,QAAQ,EAAEmB,KAAK,CAACC,CAAA,IAAK,eAAC,IAAAJ,YAAI,EAAEK,cAAc,CAACD,CAAA;EAEzF,oBACE,IAAAJ,YAAA,EAAAM,aAAA,EAAC,GAAAC,gBAAQ;IAAEC,cAAA,EAAgB,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,8BAAA,CAAK,GAAG;IAAe1B,SAAA,EAAWA;kBACtE,IAAAe,YAAA,EAAAM,aAAA,CAAC;IACE,GAAGT,UAAU;IACb,GAAG,IAAAe,iBAAS,EAAErB,WAAA,EAAaG,UAAA,CAAW;IACvChB,GAAA,EAAKS,MAAA;IACL0B,SAAA,EACE,IAAAJ,iBAAS,GACP,GAAAC,sBAAA,CAAAC,8BAAA,CAAK,GACL,yBACA;MACE,gCAAgC/B,OAAA;MAChC,qCAAqCE,YAAA;MACrC,sCAAsC,CAAC,CAACC,WAAA;MACxC,sCAAsCA,WAAA,KAAgB;MACtD,sCAAsCA,WAAA,KAAgB;MACtD,aAAaS,SAAA;MACb,eAAeX,UAAA;MACf,cAAcc,SAAA;MACd,eAAeN,KAAA,CAAMyB;IACvB,GACAjB,UAAA,CAAWgB,SAAS;kBAGxB,IAAAb,YAAA,EAAAM,aAAA,EAAC,GAAAS,mBAAW;IACVC,KAAA,EAAO;MACLC,IAAA,EAAM;QACJC,IAAA,EAAM;QACNC,gBAAA,EAAkB,IAAAV,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,8BAAA,CAAK,GAAG;MACvC;MACAS,IAAA,EAAM;QACJD,gBAAA,EAAkB,IAAAV,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,8BAAA,CAAK,GAAG;MACvC;IACF;KACC,OAAO3B,QAAA,KAAa,YAAYe,UAAA,gBAC7B,IAAAC,YAAA,EAAAM,aAAA,EAAC,GAAAe,WAAG,SAAGrC,QAAA,IACPA,QAAA;AAKd;AAEA;;;;AAIA,IAAIsC,yCAAA,gBAAgB,IAAAtB,YAAI,EAAEuB,UAAU,CAAC/C,kCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}