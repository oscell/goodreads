{"ast":null,"code":"import { useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3 } from \"./utils.mjs\";\nimport { useToggleButton as $jrJ9L$useToggleButton, useFocusRing as $jrJ9L$useFocusRing, useHover as $jrJ9L$useHover, mergeProps as $jrJ9L$mergeProps } from \"react-aria\";\nimport $jrJ9L$react, { createContext as $jrJ9L$createContext, forwardRef as $jrJ9L$forwardRef } from \"react\";\nimport { useToggleState as $jrJ9L$useToggleState } from \"react-stately\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $efde0372d7a700fe$export$43506d75ebd2e218 = /*#__PURE__*/(0, $jrJ9L$createContext)({});\nfunction $efde0372d7a700fe$var$ToggleButton(props, ref) {\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $efde0372d7a700fe$export$43506d75ebd2e218);\n  let state = (0, $jrJ9L$useToggleState)(props);\n  let {\n    buttonProps: buttonProps,\n    isPressed: isPressed\n  } = (0, $jrJ9L$useToggleButton)(props, state, ref);\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $jrJ9L$useFocusRing)(props);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $jrJ9L$useHover)(props);\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    values: {\n      isHovered: isHovered,\n      isPressed: isPressed,\n      isFocused: isFocused,\n      isSelected: state.isSelected,\n      isFocusVisible: isFocusVisible,\n      isDisabled: props.isDisabled || false,\n      state: state\n    },\n    defaultClassName: 'react-aria-ToggleButton'\n  });\n  return /*#__PURE__*/(0, $jrJ9L$react).createElement(\"button\", {\n    ...(0, $jrJ9L$mergeProps)(buttonProps, focusProps, hoverProps),\n    ...renderProps,\n    ref: ref,\n    slot: props.slot || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-disabled\": props.isDisabled || undefined,\n    \"data-pressed\": isPressed || undefined,\n    \"data-selected\": state.isSelected || undefined,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined\n  });\n}\n/**\n * A toggle button allows a user to toggle a selection on or off, for example switching between two states or modes.\n */\nconst $efde0372d7a700fe$export$d2b052e7b4be1756 = /*#__PURE__*/(0, $jrJ9L$forwardRef)($efde0372d7a700fe$var$ToggleButton);\nexport { $efde0372d7a700fe$export$43506d75ebd2e218 as ToggleButtonContext, $efde0372d7a700fe$export$d2b052e7b4be1756 as ToggleButton };","map":{"version":3,"names":["$efde0372d7a700fe$export$43506d75ebd2e218","$jrJ9L$createContext","$efde0372d7a700fe$var$ToggleButton","props","ref","$64fa3d84918910a7$export$29f1550f4b0d4415","state","$jrJ9L$useToggleState","buttonProps","isPressed","$jrJ9L$useToggleButton","focusProps","isFocused","isFocusVisible","$jrJ9L$useFocusRing","hoverProps","isHovered","$jrJ9L$useHover","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","values","isSelected","isDisabled","defaultClassName","$jrJ9L$react","createElement","$jrJ9L$mergeProps","slot","undefined","$efde0372d7a700fe$export$d2b052e7b4be1756","$jrJ9L$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/ToggleButton.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleButtonProps, HoverEvents, mergeProps, useFocusRing, useHover, useToggleButton} from 'react-aria';\nimport {ButtonRenderProps} from './Button';\nimport {ContextValue, RenderProps, SlotProps, useContextProps, useRenderProps} from './utils';\nimport {forwardRefType} from '@react-types/shared';\nimport React, {createContext, ForwardedRef, forwardRef} from 'react';\nimport {ToggleState, useToggleState} from 'react-stately';\n\nexport interface ToggleButtonRenderProps extends Omit<ButtonRenderProps, 'isPending'> {\n  /**\n   * Whether the button is currently selected.\n   * @selector [data-selected]\n   */\n  isSelected: boolean,\n  /**\n   * State of the toggle button.\n   */\n  state: ToggleState\n}\n\nexport interface ToggleButtonProps extends Omit<AriaToggleButtonProps, 'children' | 'elementType'>, HoverEvents, SlotProps, RenderProps<ToggleButtonRenderProps> {}\n\nexport const ToggleButtonContext = createContext<ContextValue<ToggleButtonProps, HTMLButtonElement>>({});\n\nfunction ToggleButton(props: ToggleButtonProps, ref: ForwardedRef<HTMLButtonElement>) {\n  [props, ref] = useContextProps(props, ref, ToggleButtonContext);\n  let state = useToggleState(props);\n  let {buttonProps, isPressed} = useToggleButton(props, state, ref);\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing(props);\n  let {hoverProps, isHovered} = useHover(props);\n  let renderProps = useRenderProps({\n    ...props,\n    values: {isHovered, isPressed, isFocused, isSelected: state.isSelected, isFocusVisible, isDisabled: props.isDisabled || false, state},\n    defaultClassName: 'react-aria-ToggleButton'\n  });\n\n  return (\n    <button\n      {...mergeProps(buttonProps, focusProps, hoverProps)}\n      {...renderProps}\n      ref={ref}\n      slot={props.slot || undefined}\n      data-focused={isFocused || undefined}\n      data-disabled={props.isDisabled || undefined}\n      data-pressed={isPressed || undefined}\n      data-selected={state.isSelected || undefined}\n      data-hovered={isHovered || undefined}\n      data-focus-visible={isFocusVisible || undefined} />\n  );\n}\n\n/**\n * A toggle button allows a user to toggle a selection on or off, for example switching between two states or modes.\n */\nconst _ToggleButton = /*#__PURE__*/ (forwardRef as forwardRefType)(ToggleButton);\nexport {_ToggleButton as ToggleButton};\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AAiCO,MAAMA,yCAAA,gBAAsB,IAAAC,oBAAY,EAAsD,CAAC;AAEtG,SAASC,mCAAaC,KAAwB,EAAEC,GAAoC;EAClF,CAACD,KAAA,EAAOC,GAAA,CAAI,GAAG,IAAAC,yCAAc,EAAEF,KAAA,EAAOC,GAAA,EAAKJ,yCAAA;EAC3C,IAAIM,KAAA,GAAQ,IAAAC,qBAAa,EAAEJ,KAAA;EAC3B,IAAI;IAAAK,WAAA,EAACA,WAAW;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,sBAAc,EAAEP,KAAA,EAAOG,KAAA,EAAOF,GAAA;EAC7D,IAAI;IAAAO,UAAA,EAACA,UAAU;IAAAC,SAAA,EAAEA,SAAS;IAAAC,cAAA,EAAEA;EAAc,CAAC,GAAG,IAAAC,mBAAW,EAAEX,KAAA;EAC3D,IAAI;IAAAY,UAAA,EAACA,UAAU;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAG,IAAAC,eAAO,EAAEd,KAAA;EACvC,IAAIe,WAAA,GAAc,IAAAC,uCAAa,EAAE;IAC/B,GAAGhB,KAAK;IACRiB,MAAA,EAAQ;iBAACJ,SAAA;iBAAWP,SAAA;iBAAWG,SAAA;MAAWS,UAAA,EAAYf,KAAA,CAAMe,UAAU;sBAAER,cAAA;MAAgBS,UAAA,EAAYnB,KAAA,CAAMmB,UAAU,IAAI;aAAOhB;IAAK;IACpIiB,gBAAA,EAAkB;EACpB;EAEA,oBACE,IAAAC,YAAA,EAAAC,aAAA,CAAC;IACE,GAAG,IAAAC,iBAAS,EAAElB,WAAA,EAAaG,UAAA,EAAYI,UAAA,CAAW;IAClD,GAAGG,WAAW;IACfd,GAAA,EAAKA,GAAA;IACLuB,IAAA,EAAMxB,KAAA,CAAMwB,IAAI,IAAIC,SAAA;IACpB,gBAAchB,SAAA,IAAagB,SAAA;IAC3B,iBAAezB,KAAA,CAAMmB,UAAU,IAAIM,SAAA;IACnC,gBAAcnB,SAAA,IAAamB,SAAA;IAC3B,iBAAetB,KAAA,CAAMe,UAAU,IAAIO,SAAA;IACnC,gBAAcZ,SAAA,IAAaY,SAAA;IAC3B,sBAAoBf,cAAA,IAAkBe;;AAE5C;AAEA;;;AAGA,MAAMC,yCAAA,GAA8B,aAAC,IAAAC,iBAAS,EAAqB5B,kCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}