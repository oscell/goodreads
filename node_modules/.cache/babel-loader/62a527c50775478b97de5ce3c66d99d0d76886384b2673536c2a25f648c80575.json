{"ast":null,"code":"import { Provider as $64fa3d84918910a7$export$2881499e37b75b9a, useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3 } from \"./utils.mjs\";\nimport $dVbUU$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { TextContext as $514c0188e459b4c0$export$9afb8bc826b033ea } from \"./Text.mjs\";\nimport { useDrop as $dVbUU$useDrop, useButton as $dVbUU$useButton, useHover as $dVbUU$useHover, useFocusRing as $dVbUU$useFocusRing, useLocalizedStringFormatter as $dVbUU$useLocalizedStringFormatter, useClipboard as $dVbUU$useClipboard, mergeProps as $dVbUU$mergeProps, VisuallyHidden as $dVbUU$VisuallyHidden } from \"react-aria\";\nimport { useObjectRef as $dVbUU$useObjectRef, useSlotId as $dVbUU$useSlotId, useLabels as $dVbUU$useLabels, filterDOMProps as $dVbUU$filterDOMProps } from \"@react-aria/utils\";\nimport { isFocusable as $dVbUU$isFocusable } from \"@react-aria/focus\";\nimport $dVbUU$react, { createContext as $dVbUU$createContext, useRef as $dVbUU$useRef, forwardRef as $dVbUU$forwardRef } from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $cb088e721efb9218$export$14a72053295ff9a6 = /*#__PURE__*/(0, $dVbUU$createContext)(null);\nfunction $cb088e721efb9218$var$DropZone(props, ref) {\n  let {\n    isDisabled = false\n  } = props;\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $cb088e721efb9218$export$14a72053295ff9a6);\n  let dropzoneRef = (0, $dVbUU$useObjectRef)(ref);\n  let buttonRef = (0, $dVbUU$useRef)(null);\n  let {\n    dropProps: dropProps,\n    dropButtonProps: dropButtonProps,\n    isDropTarget: isDropTarget\n  } = (0, $dVbUU$useDrop)({\n    ...props,\n    ref: buttonRef,\n    hasDropButton: true\n  });\n  let {\n    buttonProps: buttonProps\n  } = (0, $dVbUU$useButton)(dropButtonProps || {}, buttonRef);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dVbUU$useHover)(props);\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $dVbUU$useFocusRing)();\n  let stringFormatter = (0, $dVbUU$useLocalizedStringFormatter)((0, $parcel$interopDefault($dVbUU$intlStringsmodulejs)), 'react-aria-components');\n  let textId = (0, $dVbUU$useSlotId)();\n  let ariaLabel = props['aria-label'] || stringFormatter.format('dropzoneLabel');\n  let messageId = props['aria-labelledby'];\n  let ariaLabelledby = [textId, messageId].filter(Boolean).join(' ');\n  let labelProps = (0, $dVbUU$useLabels)({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n  let {\n    clipboardProps: clipboardProps\n  } = (0, $dVbUU$useClipboard)({\n    isDisabled: isDisabled,\n    onPaste: items => {\n      var _props_onDrop;\n      return (_props_onDrop = props.onDrop) === null || _props_onDrop === void 0 ? void 0 : _props_onDrop.call(props, {\n        type: 'drop',\n        items: items,\n        x: 0,\n        y: 0,\n        dropOperation: 'copy'\n      });\n    }\n  });\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    values: {\n      isHovered: isHovered,\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      isDropTarget: isDropTarget,\n      isDisabled: isDisabled\n    },\n    defaultClassName: 'react-aria-DropZone'\n  });\n  let DOMProps = (0, $dVbUU$filterDOMProps)(props);\n  delete DOMProps.id;\n  return /*#__PURE__*/(0, $dVbUU$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $514c0188e459b4c0$export$9afb8bc826b033ea), {\n      id: textId,\n      slot: 'label'\n    }]]\n  }, /*#__PURE__*/(0, $dVbUU$react).createElement(\"div\", {\n    ...(0, $dVbUU$mergeProps)(dropProps, hoverProps, DOMProps),\n    ...renderProps,\n    slot: props.slot || undefined,\n    ref: dropzoneRef,\n    onClick: e => {\n      var _dropzoneRef_current;\n      let target = e.target;\n      while (target && ((_dropzoneRef_current = dropzoneRef.current) === null || _dropzoneRef_current === void 0 ? void 0 : _dropzoneRef_current.contains(target))) {\n        if ((0, $dVbUU$isFocusable)(target)) break;else if (target === dropzoneRef.current) {\n          var _buttonRef_current;\n          (_buttonRef_current = buttonRef.current) === null || _buttonRef_current === void 0 ? void 0 : _buttonRef_current.focus();\n          break;\n        }\n        target = target.parentElement;\n      }\n    },\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-drop-target\": isDropTarget || undefined,\n    \"data-disabled\": isDisabled || undefined\n  }, /*#__PURE__*/(0, $dVbUU$react).createElement((0, $dVbUU$VisuallyHidden), null, /*#__PURE__*/(0, $dVbUU$react).createElement(\"button\", {\n    ...(0, $dVbUU$mergeProps)(buttonProps, focusProps, clipboardProps, labelProps),\n    ref: buttonRef\n  })), renderProps.children));\n}\n/**\n * A drop zone is an area into which one or multiple objects can be dragged and dropped.\n */\nconst $cb088e721efb9218$export$3c6489d84dc98b6 = /*#__PURE__*/(0, $dVbUU$forwardRef)($cb088e721efb9218$var$DropZone);\nexport { $cb088e721efb9218$export$14a72053295ff9a6 as DropZoneContext, $cb088e721efb9218$export$3c6489d84dc98b6 as DropZone };","map":{"version":3,"names":["$cb088e721efb9218$export$14a72053295ff9a6","$dVbUU$createContext","$cb088e721efb9218$var$DropZone","props","ref","isDisabled","$64fa3d84918910a7$export$29f1550f4b0d4415","dropzoneRef","$dVbUU$useObjectRef","buttonRef","$dVbUU$useRef","dropProps","dropButtonProps","isDropTarget","$dVbUU$useDrop","hasDropButton","buttonProps","$dVbUU$useButton","hoverProps","isHovered","$dVbUU$useHover","focusProps","isFocused","isFocusVisible","$dVbUU$useFocusRing","stringFormatter","$dVbUU$useLocalizedStringFormatter","$parcel$interopDefault","$dVbUU$intlStringsmodulejs","textId","$dVbUU$useSlotId","ariaLabel","format","messageId","ariaLabelledby","filter","Boolean","join","labelProps","$dVbUU$useLabels","clipboardProps","$dVbUU$useClipboard","onPaste","items","_props_onDrop","onDrop","call","type","x","y","dropOperation","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","values","defaultClassName","DOMProps","$dVbUU$filterDOMProps","id","$dVbUU$react","createElement","$64fa3d84918910a7$export$2881499e37b75b9a","$514c0188e459b4c0$export$9afb8bc826b033ea","slot","$dVbUU$mergeProps","undefined","onClick","e","_dropzoneRef_current","target","current","contains","$dVbUU$isFocusable","_buttonRef_current","focus","parentElement","$dVbUU$VisuallyHidden","children","$cb088e721efb9218$export$3c6489d84dc98b6","$dVbUU$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/DropZone.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, HoverEvents} from '@react-types/shared';\nimport {ContextValue, Provider, RenderProps, SlotProps, useContextProps, useRenderProps} from './utils';\nimport {DropOptions, mergeProps, useButton, useClipboard, useDrop, useFocusRing, useHover, useLocalizedStringFormatter, VisuallyHidden} from 'react-aria';\nimport {filterDOMProps, useLabels, useObjectRef, useSlotId} from '@react-aria/utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {isFocusable} from '@react-aria/focus';\nimport React, {createContext, ForwardedRef, forwardRef, useRef} from 'react';\nimport {TextContext} from './Text';\n\nexport interface DropZoneRenderProps {\n  /**\n   * Whether the dropzone is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the dropzone is focused, either via a mouse or keyboard.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the dropzone is keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the dropzone is the drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean,\n  /**\n   * Whether the dropzone is disabled.\n   * @selector [data-disabled]\n   */\n  isDisabled: boolean\n}\n\nexport interface DropZoneProps extends Omit<DropOptions, 'getDropOperationForPoint' | 'ref' | 'hasDropButton'>, HoverEvents, RenderProps<DropZoneRenderProps>, SlotProps, AriaLabelingProps {}\n\nexport const DropZoneContext = createContext<ContextValue<DropZoneProps, HTMLDivElement>>(null);\n\nfunction DropZone(props: DropZoneProps, ref: ForwardedRef<HTMLDivElement>) {\n  let {isDisabled = false} = props;\n  [props, ref] = useContextProps(props, ref, DropZoneContext);\n  let dropzoneRef = useObjectRef(ref);\n  let buttonRef = useRef<HTMLButtonElement>(null);\n  let {dropProps, dropButtonProps, isDropTarget} = useDrop({...props, ref: buttonRef, hasDropButton: true});\n  let {buttonProps} = useButton(dropButtonProps || {}, buttonRef);\n  let {hoverProps, isHovered} = useHover(props);\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, 'react-aria-components');\n\n  let textId = useSlotId();\n  let ariaLabel = props['aria-label'] || stringFormatter.format('dropzoneLabel');\n  let messageId = props['aria-labelledby'];\n  let ariaLabelledby = [textId, messageId].filter(Boolean).join(' ');\n  let labelProps = useLabels({'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby});\n\n\n  let {clipboardProps} = useClipboard({\n    isDisabled,\n    onPaste: (items) => props.onDrop?.({\n      type: 'drop',\n      items,\n      x: 0,\n      y: 0,\n      dropOperation: 'copy'\n    })\n  });\n\n  let renderProps = useRenderProps({\n    ...props,\n    values: {isHovered, isFocused, isFocusVisible, isDropTarget, isDisabled},\n    defaultClassName: 'react-aria-DropZone'\n  });\n  let DOMProps = filterDOMProps(props);\n  delete DOMProps.id;\n\n  return (\n    <Provider\n      values={[\n        [TextContext, {id: textId, slot: 'label'}]\n      ]}>\n      {/* eslint-disable-next-line */}\n      <div\n        {...mergeProps(dropProps, hoverProps, DOMProps)}\n        {...renderProps}\n        slot={props.slot || undefined}\n        ref={dropzoneRef}\n        onClick={(e) => {\n          let target = e.target as HTMLElement | null;\n          while (target && dropzoneRef.current?.contains(target)) {\n            if (isFocusable(target)) {\n              break;\n            } else if (target === dropzoneRef.current) {\n              buttonRef.current?.focus();\n              break;\n            }\n\n            target = target.parentElement;\n          }\n        }}\n        data-hovered={isHovered || undefined}\n        data-focused={isFocused || undefined}\n        data-focus-visible={isFocusVisible || undefined}\n        data-drop-target={isDropTarget || undefined}\n        data-disabled={isDisabled || undefined}>\n        <VisuallyHidden>\n          <button\n            {...mergeProps(buttonProps, focusProps, clipboardProps, labelProps)}\n            ref={buttonRef} />\n        </VisuallyHidden>\n        {renderProps.children}\n      </div>\n    </Provider>\n  );\n}\n\n/**\n * A drop zone is an area into which one or multiple objects can be dragged and dropped.\n */\nconst _DropZone = forwardRef(DropZone);\nexport {_DropZone as DropZone};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}