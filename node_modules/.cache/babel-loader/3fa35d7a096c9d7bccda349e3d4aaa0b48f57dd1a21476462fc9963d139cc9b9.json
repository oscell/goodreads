{"ast":null,"code":"import { BreadcrumbItem as $2bfa2c84c665c457$export$c13f210c706eb549 } from \"./BreadcrumbItem.mjs\";\nimport \"./vars.bf1e313b.css\";\nimport $52CM4$breadcrumb_vars_cssmodulejs from \"./breadcrumb_vars_css.mjs\";\nimport { ActionButton as $52CM4$ActionButton } from \"@react-spectrum/button\";\nimport { useDOMRef as $52CM4$useDOMRef, useStyleProps as $52CM4$useStyleProps, classNames as $52CM4$classNames } from \"@react-spectrum/utils\";\nimport $52CM4$spectrumiconsuiFolderBreadcrumb from \"@spectrum-icons/ui/FolderBreadcrumb\";\nimport { MenuTrigger as $52CM4$MenuTrigger, Menu as $52CM4$Menu } from \"@react-spectrum/menu\";\nimport $52CM4$react, { useRef as $52CM4$useRef, useCallback as $52CM4$useCallback } from \"react\";\nimport { useBreadcrumbs as $52CM4$useBreadcrumbs } from \"@react-aria/breadcrumbs\";\nimport { useValueEffect as $52CM4$useValueEffect, useResizeObserver as $52CM4$useResizeObserver, useLayoutEffect as $52CM4$useLayoutEffect } from \"@react-aria/utils\";\nimport { useProviderProps as $52CM4$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $2adaf67aabd3300b$var$MIN_VISIBLE_ITEMS = 1;\nconst $2adaf67aabd3300b$var$MAX_VISIBLE_ITEMS = 4;\nfunction $2adaf67aabd3300b$var$Breadcrumbs(props, ref) {\n  props = (0, $52CM4$useProviderProps)(props);\n  let {\n    size = 'L',\n    isMultiline: isMultiline,\n    children: children,\n    showRoot: showRoot,\n    isDisabled: isDisabled,\n    onAction: onAction,\n    autoFocusCurrent: autoFocusCurrent,\n    ...otherProps\n  } = props;\n  // Not using React.Children.toArray because it mutates the key prop.\n  let childArray = [];\n  (0, $52CM4$react).Children.forEach(children, (child, index) => {\n    if (/*#__PURE__*/(0, $52CM4$react).isValidElement(child)) {\n      if (child.key == null) child = /*#__PURE__*/(0, $52CM4$react).cloneElement(child, {\n        key: index\n      });\n      childArray.push(child);\n    }\n  });\n  let domRef = (0, $52CM4$useDOMRef)(ref);\n  let listRef = (0, $52CM4$useRef)(null);\n  let [visibleItems, setVisibleItems] = (0, $52CM4$useValueEffect)(childArray.length);\n  let {\n    navProps: navProps\n  } = (0, $52CM4$useBreadcrumbs)(props);\n  let {\n    styleProps: styleProps\n  } = (0, $52CM4$useStyleProps)(otherProps);\n  let updateOverflow = (0, $52CM4$useCallback)(() => {\n    let computeVisibleItems = visibleItems => {\n      // Refs can be null at runtime.\n      let currListRef = listRef.current;\n      if (!currListRef) return visibleItems;\n      let listItems = Array.from(currListRef.children);\n      if (listItems.length <= 0) return visibleItems;\n      let containerWidth = currListRef.offsetWidth;\n      let isShowingMenu = childArray.length > visibleItems;\n      let calculatedWidth = 0;\n      let newVisibleItems = 0;\n      let maxVisibleItems = $2adaf67aabd3300b$var$MAX_VISIBLE_ITEMS;\n      if (showRoot) {\n        calculatedWidth += listItems.shift().offsetWidth;\n        newVisibleItems++;\n      }\n      if (isShowingMenu) {\n        calculatedWidth += listItems.shift().offsetWidth;\n        maxVisibleItems--;\n      }\n      if (showRoot && calculatedWidth >= containerWidth) newVisibleItems--;\n      // TODO: what if multiline and only one breadcrumb??\n      if (isMultiline) {\n        listItems.pop();\n        newVisibleItems++;\n      } else if (listItems.length > 0) {\n        // Ensure the last breadcrumb isn't truncated when we measure it.\n        let last = listItems.pop();\n        last.style.overflow = 'visible';\n        calculatedWidth += last.offsetWidth;\n        if (calculatedWidth < containerWidth) newVisibleItems++;\n        last.style.overflow = '';\n      }\n      for (let breadcrumb of listItems.reverse()) {\n        calculatedWidth += breadcrumb.offsetWidth;\n        if (calculatedWidth < containerWidth) newVisibleItems++;\n      }\n      return Math.max($2adaf67aabd3300b$var$MIN_VISIBLE_ITEMS, Math.min(maxVisibleItems, newVisibleItems));\n    };\n    setVisibleItems(function* () {\n      // Update to show all items.\n      yield childArray.length;\n      // Measure, and update to show the items that fit.\n      let newVisibleItems = computeVisibleItems(childArray.length);\n      yield newVisibleItems;\n      // If the number of items is less than the number of children,\n      // then update again to ensure that the menu fits.\n      if (newVisibleItems < childArray.length && newVisibleItems > 1) yield computeVisibleItems(newVisibleItems);\n    });\n  }, [childArray.length, setVisibleItems, showRoot, isMultiline]);\n  (0, $52CM4$useResizeObserver)({\n    ref: domRef,\n    onResize: updateOverflow\n  });\n  let lastChildren = (0, $52CM4$useRef)(null);\n  (0, $52CM4$useLayoutEffect)(() => {\n    if (children !== lastChildren.current) {\n      lastChildren.current = children;\n      updateOverflow();\n    }\n  });\n  let contents = childArray;\n  if (childArray.length > visibleItems) {\n    let selectedItem = childArray[childArray.length - 1];\n    var _selectedItem_key;\n    let selectedKey = (_selectedItem_key = selectedItem.key) !== null && _selectedItem_key !== void 0 ? _selectedItem_key : childArray.length - 1;\n    let onMenuAction = key => {\n      // Don't fire onAction when clicking on the last item\n      if (key !== selectedKey && onAction) onAction(key);\n    };\n    let menuItem = /*#__PURE__*/(0, $52CM4$react).createElement((0, $2bfa2c84c665c457$export$c13f210c706eb549), {\n      key: \"menu\",\n      isMenu: true\n    }, /*#__PURE__*/(0, $52CM4$react).createElement((0, $52CM4$MenuTrigger), null, /*#__PURE__*/(0, $52CM4$react).createElement((0, $52CM4$ActionButton), {\n      UNSAFE_className: (0, $52CM4$classNames)((0, $parcel$interopDefault($52CM4$breadcrumb_vars_cssmodulejs)), 'spectrum-Breadcrumbs-actionButton'),\n      \"aria-label\": \"\\u2026\",\n      isQuiet: true,\n      isDisabled: isDisabled\n    }, /*#__PURE__*/(0, $52CM4$react).createElement((0, $52CM4$spectrumiconsuiFolderBreadcrumb), null)), /*#__PURE__*/(0, $52CM4$react).createElement((0, $52CM4$Menu), {\n      selectionMode: \"single\",\n      selectedKeys: [selectedKey],\n      onAction: onMenuAction\n    }, childArray)));\n    contents = [menuItem];\n    let breadcrumbs = [...childArray];\n    let endItems = visibleItems;\n    if (showRoot && visibleItems > 1) {\n      let rootItem = breadcrumbs.shift();\n      if (rootItem) contents.unshift(rootItem);\n      endItems--;\n    }\n    contents.push(...breadcrumbs.slice(-endItems));\n  }\n  let lastIndex = contents.length - 1;\n  let breadcrumbItems = contents.map((child, index) => {\n    let isCurrent = index === lastIndex;\n    var _child_key;\n    let key = (_child_key = child.key) !== null && _child_key !== void 0 ? _child_key : index;\n    let onPress = () => {\n      if (onAction) onAction(key);\n    };\n    return /*#__PURE__*/(0, $52CM4$react).createElement(\"li\", {\n      key: index,\n      className: (0, $52CM4$classNames)((0, $parcel$interopDefault($52CM4$breadcrumb_vars_cssmodulejs)), 'spectrum-Breadcrumbs-item')\n    }, /*#__PURE__*/(0, $52CM4$react).createElement((0, $2bfa2c84c665c457$export$c13f210c706eb549), {\n      ...child.props,\n      key: key,\n      isCurrent: isCurrent,\n      isDisabled: isDisabled,\n      onPress: onPress,\n      autoFocus: isCurrent && autoFocusCurrent\n    }, child.props.children));\n  });\n  return /*#__PURE__*/(0, $52CM4$react).createElement(\"nav\", {\n    ...styleProps,\n    ...navProps,\n    ref: domRef\n  }, /*#__PURE__*/(0, $52CM4$react).createElement(\"ul\", {\n    ref: listRef,\n    className: (0, $52CM4$classNames)((0, $parcel$interopDefault($52CM4$breadcrumb_vars_cssmodulejs)), 'spectrum-Breadcrumbs', {\n      'spectrum-Breadcrumbs--small': size === 'S',\n      'spectrum-Breadcrumbs--medium': size === 'M',\n      'spectrum-Breadcrumbs--multiline': isMultiline,\n      'spectrum-Breadcrumbs--showRoot': showRoot,\n      'is-disabled': isDisabled\n    }, styleProps.className)\n  }, breadcrumbItems));\n}\n/**\n * Breadcrumbs show hierarchy and navigational context for a userâ€™s location within an application.\n */\nlet $2adaf67aabd3300b$export$2dc68d50d56fbbd = /*#__PURE__*/(0, $52CM4$react).forwardRef($2adaf67aabd3300b$var$Breadcrumbs);\nexport { $2adaf67aabd3300b$export$2dc68d50d56fbbd as Breadcrumbs };","map":{"version":3,"names":["$2adaf67aabd3300b$var$MIN_VISIBLE_ITEMS","$2adaf67aabd3300b$var$MAX_VISIBLE_ITEMS","$2adaf67aabd3300b$var$Breadcrumbs","props","ref","$52CM4$useProviderProps","size","isMultiline","children","showRoot","isDisabled","onAction","autoFocusCurrent","otherProps","childArray","$52CM4$react","Children","forEach","child","index","isValidElement","key","cloneElement","push","domRef","$52CM4$useDOMRef","listRef","$52CM4$useRef","visibleItems","setVisibleItems","$52CM4$useValueEffect","length","navProps","$52CM4$useBreadcrumbs","styleProps","$52CM4$useStyleProps","updateOverflow","$52CM4$useCallback","computeVisibleItems","currListRef","current","listItems","Array","from","containerWidth","offsetWidth","isShowingMenu","calculatedWidth","newVisibleItems","maxVisibleItems","shift","pop","last","style","overflow","breadcrumb","reverse","Math","max","min","$52CM4$useResizeObserver","onResize","lastChildren","$52CM4$useLayoutEffect","contents","selectedItem","_selectedItem_key","selectedKey","onMenuAction","menuItem","createElement","$2bfa2c84c665c457$export$c13f210c706eb549","isMenu","$52CM4$MenuTrigger","$52CM4$ActionButton","UNSAFE_className","$52CM4$classNames","$parcel$interopDefault","$52CM4$breadcrumb_vars_cssmodulejs","isQuiet","$52CM4$spectrumiconsuiFolderBreadcrumb","$52CM4$Menu","selectionMode","selectedKeys","breadcrumbs","endItems","rootItem","unshift","slice","lastIndex","breadcrumbItems","map","isCurrent","_child_key","onPress","className","autoFocus","$2adaf67aabd3300b$export$2dc68d50d56fbbd","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/breadcrumbs/dist/packages/@react-spectrum/breadcrumbs/src/Breadcrumbs.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {ActionButton} from '@react-spectrum/button';\nimport {BreadcrumbItem} from './BreadcrumbItem';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef, Key} from '@react-types/shared';\nimport FolderBreadcrumb from '@spectrum-icons/ui/FolderBreadcrumb';\nimport {Menu, MenuTrigger} from '@react-spectrum/menu';\nimport React, {ReactElement, useCallback, useRef} from 'react';\nimport {SpectrumBreadcrumbsProps} from '@react-types/breadcrumbs';\nimport styles from '@adobe/spectrum-css-temp/components/breadcrumb/vars.css';\nimport {useBreadcrumbs} from '@react-aria/breadcrumbs';\nimport {useLayoutEffect, useResizeObserver, useValueEffect} from '@react-aria/utils';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nconst MIN_VISIBLE_ITEMS = 1;\nconst MAX_VISIBLE_ITEMS = 4;\n\nfunction Breadcrumbs<T>(props: SpectrumBreadcrumbsProps<T>, ref: DOMRef) {\n  props = useProviderProps(props);\n  let {\n    size = 'L',\n    isMultiline,\n    children,\n    showRoot,\n    isDisabled,\n    onAction,\n    autoFocusCurrent,\n    ...otherProps\n  } = props;\n\n  // Not using React.Children.toArray because it mutates the key prop.\n  let childArray: ReactElement<any>[] = [];\n  React.Children.forEach(children, (child, index) => {\n    if (React.isValidElement(child)) {\n      if (child.key == null) {\n        child = React.cloneElement(child, {key: index});\n      }\n      childArray.push(child);\n    }\n  });\n\n  let domRef = useDOMRef(ref);\n  let listRef = useRef<HTMLUListElement>(null);\n\n  let [visibleItems, setVisibleItems] = useValueEffect(childArray.length);\n\n  let {navProps} = useBreadcrumbs(props);\n  let {styleProps} = useStyleProps(otherProps);\n\n  let updateOverflow = useCallback(() => {\n    let computeVisibleItems = (visibleItems: number): number => {\n      // Refs can be null at runtime.\n      let currListRef: HTMLUListElement | null = listRef.current;\n      if (!currListRef) {\n        return visibleItems;\n      }\n\n      let listItems = Array.from(currListRef.children) as HTMLLIElement[];\n      if (listItems.length <= 0) {\n        return visibleItems;\n      }\n      let containerWidth = currListRef.offsetWidth;\n      let isShowingMenu = childArray.length > visibleItems;\n      let calculatedWidth = 0;\n      let newVisibleItems = 0;\n      let maxVisibleItems = MAX_VISIBLE_ITEMS;\n\n      if (showRoot) {\n        calculatedWidth += (listItems.shift() as HTMLLIElement).offsetWidth;\n        newVisibleItems++;\n      }\n\n      if (isShowingMenu) {\n        calculatedWidth += (listItems.shift() as HTMLLIElement).offsetWidth;\n        maxVisibleItems--;\n      }\n\n      if (showRoot && calculatedWidth >= containerWidth) {\n        newVisibleItems--;\n      }\n\n      // TODO: what if multiline and only one breadcrumb??\n      if (isMultiline) {\n        listItems.pop();\n        newVisibleItems++;\n      } else {\n        if (listItems.length > 0) {\n          // Ensure the last breadcrumb isn't truncated when we measure it.\n          let last = (listItems.pop() as HTMLLIElement);\n          last.style.overflow = 'visible';\n\n          calculatedWidth += last.offsetWidth;\n          if (calculatedWidth < containerWidth) {\n            newVisibleItems++;\n          }\n\n          last.style.overflow = '';\n        }\n      }\n\n      for (let breadcrumb of listItems.reverse()) {\n        calculatedWidth += breadcrumb.offsetWidth;\n        if (calculatedWidth < containerWidth) {\n          newVisibleItems++;\n        }\n      }\n\n      return Math.max(MIN_VISIBLE_ITEMS, Math.min(maxVisibleItems, newVisibleItems));\n    };\n\n    setVisibleItems(function *() {\n      // Update to show all items.\n      yield childArray.length;\n\n      // Measure, and update to show the items that fit.\n      let newVisibleItems = computeVisibleItems(childArray.length);\n      yield newVisibleItems;\n\n      // If the number of items is less than the number of children,\n      // then update again to ensure that the menu fits.\n      if (newVisibleItems < childArray.length && newVisibleItems > 1) {\n        yield computeVisibleItems(newVisibleItems);\n      }\n    });\n  }, [childArray.length, setVisibleItems, showRoot, isMultiline]);\n\n  useResizeObserver({ref: domRef, onResize: updateOverflow});\n\n  let lastChildren = useRef<typeof children | null>(null);\n  useLayoutEffect(() => {\n    if (children !== lastChildren.current) {\n      lastChildren.current = children;\n      updateOverflow();\n    }\n  });\n\n  let contents = childArray;\n  if (childArray.length > visibleItems) {\n    let selectedItem = childArray[childArray.length - 1];\n    let selectedKey = selectedItem.key ?? childArray.length - 1;\n    let onMenuAction = (key: Key) => {\n      // Don't fire onAction when clicking on the last item\n      if (key !== selectedKey && onAction) {\n        onAction(key);\n      }\n    };\n\n    let menuItem = (\n      <BreadcrumbItem key=\"menu\" isMenu>\n        <MenuTrigger>\n          <ActionButton\n            UNSAFE_className={classNames(styles, 'spectrum-Breadcrumbs-actionButton')}\n            aria-label=\"â€¦\"\n            isQuiet\n            isDisabled={isDisabled}>\n            <FolderBreadcrumb />\n          </ActionButton>\n          <Menu selectionMode=\"single\" selectedKeys={[selectedKey]} onAction={onMenuAction}>\n            {childArray}\n          </Menu>\n        </MenuTrigger>\n      </BreadcrumbItem>\n    );\n\n    contents = [menuItem];\n    let breadcrumbs = [...childArray];\n    let endItems = visibleItems;\n    if (showRoot && visibleItems > 1) {\n      let rootItem = breadcrumbs.shift();\n      if (rootItem) {\n        contents.unshift(rootItem);\n      }\n      endItems--;\n    }\n    contents.push(...breadcrumbs.slice(-endItems));\n  }\n\n  let lastIndex = contents.length - 1;\n  let breadcrumbItems = contents.map((child, index) => {\n    let isCurrent = index === lastIndex;\n    let key = child.key ?? index;\n    let onPress = () => {\n      if (onAction) {\n        onAction(key);\n      }\n    };\n\n    return (\n      <li\n        key={index}\n        className={\n          classNames(\n            styles,\n            'spectrum-Breadcrumbs-item'\n          )\n        }>\n        <BreadcrumbItem\n          {...child.props}\n          key={key}\n          isCurrent={isCurrent}\n          isDisabled={isDisabled}\n          onPress={onPress}\n          autoFocus={isCurrent && autoFocusCurrent}>\n          {child.props.children}\n        </BreadcrumbItem>\n      </li>\n    );\n  });\n\n  return (\n    <nav\n      {...styleProps}\n      {...navProps}\n      ref={domRef}>\n      <ul\n        ref={listRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-Breadcrumbs',\n            {\n              'spectrum-Breadcrumbs--small': size === 'S',\n              'spectrum-Breadcrumbs--medium': size === 'M',\n              'spectrum-Breadcrumbs--multiline': isMultiline,\n              'spectrum-Breadcrumbs--showRoot': showRoot,\n              'is-disabled': isDisabled\n            },\n            styleProps.className\n          )\n        }>\n        {breadcrumbItems}\n      </ul>\n    </nav>\n  );\n}\n\n/**\n * Breadcrumbs show hierarchy and navigational context for a userâ€™s location within an application.\n */\nlet _Breadcrumbs = React.forwardRef(Breadcrumbs);\nexport {_Breadcrumbs as Breadcrumbs};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}