{"ast":null,"code":"import { useEffectEvent as $jllmK$useEffectEvent, mergeProps as $jllmK$mergeProps } from \"@react-aria/utils\";\nimport { useEffect as $jllmK$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $f0ac0fb73c3ec062$var$BUTTON_ROLES = {\n  'none': undefined,\n  'single': 'radio',\n  'multiple': 'checkbox'\n};\nfunction $f0ac0fb73c3ec062$export$9597202bd3099a29(props, state, ref) {\n  let selectionMode = state.selectionManager.selectionMode;\n  let buttonProps = {\n    role: $f0ac0fb73c3ec062$var$BUTTON_ROLES[selectionMode]\n  };\n  if (selectionMode !== 'none') {\n    let isSelected = state.selectionManager.isSelected(props.key);\n    buttonProps['aria-checked'] = isSelected;\n  }\n  let isFocused = props.key === state.selectionManager.focusedKey;\n  let onRemovedWithFocus = (0, $jllmK$useEffectEvent)(() => {\n    if (isFocused) state.selectionManager.setFocusedKey(null);\n  });\n  // If the focused item is removed from the DOM, reset the focused key to null.\n  (0, $jllmK$useEffect)(() => {\n    return () => {\n      onRemovedWithFocus();\n    };\n  }, [onRemovedWithFocus]);\n  return {\n    buttonProps: (0, $jllmK$mergeProps)(buttonProps, {\n      tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,\n      onFocus() {\n        state.selectionManager.setFocusedKey(props.key);\n      },\n      onPress() {\n        state.selectionManager.select(props.key);\n      }\n    })\n  };\n}\nexport { $f0ac0fb73c3ec062$export$9597202bd3099a29 as useActionGroupItem };","map":{"version":3,"names":["$f0ac0fb73c3ec062$var$BUTTON_ROLES","undefined","$f0ac0fb73c3ec062$export$9597202bd3099a29","props","state","ref","selectionMode","selectionManager","buttonProps","role","isSelected","key","isFocused","focusedKey","onRemovedWithFocus","$jllmK$useEffectEvent","setFocusedKey","$jllmK$useEffect","$jllmK$mergeProps","tabIndex","onFocus","onPress","select"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/actiongroup/dist/packages/@react-aria/actiongroup/src/useActionGroupItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement, Key, RefObject} from '@react-types/shared';\nimport {ListState} from '@react-stately/list';\nimport {mergeProps, useEffectEvent} from '@react-aria/utils';\nimport {PressProps} from '@react-aria/interactions';\nimport {useEffect} from 'react';\n\nexport interface AriaActionGroupItemProps {\n  key: Key\n}\n\nexport interface ActionGroupItemAria {\n  buttonProps: DOMAttributes & PressProps\n}\n\nconst BUTTON_ROLES = {\n  'none': undefined,\n  'single': 'radio',\n  'multiple': 'checkbox'\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function useActionGroupItem<T>(props: AriaActionGroupItemProps, state: ListState<T>, ref?: RefObject<FocusableElement | null>): ActionGroupItemAria {\n  let selectionMode = state.selectionManager.selectionMode;\n  let buttonProps = {\n    role: BUTTON_ROLES[selectionMode]\n  };\n\n  if (selectionMode !== 'none') {\n    let isSelected = state.selectionManager.isSelected(props.key);\n    buttonProps['aria-checked'] = isSelected;\n  }\n\n  let isFocused = props.key === state.selectionManager.focusedKey;\n  let onRemovedWithFocus = useEffectEvent(() => {\n    if (isFocused) {\n      state.selectionManager.setFocusedKey(null);\n    }\n  });\n\n  // If the focused item is removed from the DOM, reset the focused key to null.\n  useEffect(() => {\n    return () => {\n      onRemovedWithFocus();\n    };\n  }, [onRemovedWithFocus]);\n\n  return {\n    buttonProps: mergeProps(buttonProps, {\n      tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,\n      onFocus() {\n        state.selectionManager.setFocusedKey(props.key);\n      },\n      onPress() {\n        state.selectionManager.select(props.key);\n      }\n    })\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AA0BA,MAAMA,kCAAA,GAAe;EACnB,QAAQC,SAAA;EACR,UAAU;EACV,YAAY;AACd;AAGO,SAASC,0CAAsBC,KAA+B,EAAEC,KAAmB,EAAEC,GAAwC;EAClI,IAAIC,aAAA,GAAgBF,KAAA,CAAMG,gBAAgB,CAACD,aAAa;EACxD,IAAIE,WAAA,GAAc;IAChBC,IAAA,EAAMT,kCAAY,CAACM,aAAA;EACrB;EAEA,IAAIA,aAAA,KAAkB,QAAQ;IAC5B,IAAII,UAAA,GAAaN,KAAA,CAAMG,gBAAgB,CAACG,UAAU,CAACP,KAAA,CAAMQ,GAAG;IAC5DH,WAAW,CAAC,eAAe,GAAGE,UAAA;EAChC;EAEA,IAAIE,SAAA,GAAYT,KAAA,CAAMQ,GAAG,KAAKP,KAAA,CAAMG,gBAAgB,CAACM,UAAU;EAC/D,IAAIC,kBAAA,GAAqB,IAAAC,qBAAa,EAAE;IACtC,IAAIH,SAAA,EACFR,KAAA,CAAMG,gBAAgB,CAACS,aAAa,CAAC;EAEzC;EAEA;EACA,IAAAC,gBAAQ,EAAE;IACR,OAAO;MACLH,kBAAA;IACF;EACF,GAAG,CAACA,kBAAA,CAAmB;EAEvB,OAAO;IACLN,WAAA,EAAa,IAAAU,iBAAS,EAAEV,WAAA,EAAa;MACnCW,QAAA,EAAUP,SAAA,IAAaR,KAAA,CAAMG,gBAAgB,CAACM,UAAU,IAAI,OAAO,IAAI;MACvEO,QAAA;QACEhB,KAAA,CAAMG,gBAAgB,CAACS,aAAa,CAACb,KAAA,CAAMQ,GAAG;MAChD;MACAU,QAAA;QACEjB,KAAA,CAAMG,gBAAgB,CAACe,MAAM,CAACnB,KAAA,CAAMQ,GAAG;MACzC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}