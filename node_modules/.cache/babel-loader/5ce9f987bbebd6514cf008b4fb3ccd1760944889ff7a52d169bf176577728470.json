{"ast":null,"code":"import { ColorThumb as $3a90e89d07d7bbd5$export$a3cc47cee1c1ccc } from \"./ColorThumb.mjs\";\nimport \"./vars.d78ec0e6.css\";\nimport $fxUYb$colorslider_vars_cssmodulejs from \"./colorslider_vars_css.mjs\";\nimport { useFocusableRef as $fxUYb$useFocusableRef, useStyleProps as $fxUYb$useStyleProps, classNames as $fxUYb$classNames, SlotProvider as $fxUYb$SlotProvider } from \"@react-spectrum/utils\";\nimport { useContextProps as $fxUYb$useContextProps, ColorSliderContext as $fxUYb$ColorSliderContext } from \"react-aria-components\";\nimport { Label as $fxUYb$Label } from \"@react-spectrum/label\";\nimport $fxUYb$react, { useRef as $fxUYb$useRef, useState as $fxUYb$useState } from \"react\";\nimport { useColorSlider as $fxUYb$useColorSlider } from \"@react-aria/color\";\nimport { useColorSliderState as $fxUYb$useColorSliderState } from \"@react-stately/color\";\nimport { useFocusVisible as $fxUYb$useFocusVisible, useFocus as $fxUYb$useFocus } from \"@react-aria/interactions\";\nimport { useLocale as $fxUYb$useLocale } from \"@react-aria/i18n\";\nimport { useProviderProps as $fxUYb$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $3870e4ce67ed7ee1$var$ColorSlider(props, ref) {\n  props = (0, $fxUYb$useProviderProps)(props);\n  let inputRef = (0, $fxUYb$useRef)(null);\n  let trackRef = (0, $fxUYb$useRef)(null);\n  let domRef = (0, $fxUYb$useFocusableRef)(ref, inputRef);\n  [props, domRef] = (0, $fxUYb$useContextProps)(props, domRef, (0, $fxUYb$ColorSliderContext));\n  let {\n    isDisabled: isDisabled,\n    channel: channel,\n    orientation: orientation,\n    label: label,\n    showValueLabel: showValueLabel,\n    'aria-label': ariaLabel\n  } = props;\n  let vertical = orientation === 'vertical';\n  let {\n    styleProps: styleProps\n  } = (0, $fxUYb$useStyleProps)(props);\n  let {\n    locale: locale\n  } = (0, $fxUYb$useLocale)();\n  let state = (0, $fxUYb$useColorSliderState)({\n    ...props,\n    locale: locale\n  });\n  // If vertical and a label is provided, use it as an aria-label instead.\n  if (vertical && label) {\n    ariaLabel = ariaLabel || (typeof label === 'string' ? label : undefined);\n    label = null;\n  }\n  // If no external label, aria-label or aria-labelledby is provided,\n  // default to displaying the localized channel value.\n  // Specifically check if label is undefined. If label is `null` then display no visible label.\n  // A default aria-label is provided by useColorSlider in that case.\n  if (label === undefined && !ariaLabel && !props['aria-labelledby'] && !vertical) label = state.value.getChannelName(channel, locale);\n  // Show the value label by default if there is a visible label\n  if (showValueLabel == null) showValueLabel = !!label;\n  let {\n    inputProps: inputProps,\n    thumbProps: thumbProps,\n    trackProps: trackProps,\n    labelProps: labelProps,\n    outputProps: outputProps\n  } = (0, $fxUYb$useColorSlider)({\n    ...props,\n    label: label,\n    'aria-label': ariaLabel,\n    trackRef: trackRef,\n    inputRef: inputRef\n  }, state);\n  let {\n    isFocusVisible: isFocusVisible\n  } = (0, $fxUYb$useFocusVisible)();\n  let [isFocused, setIsFocused] = (0, $fxUYb$useState)(false);\n  let {\n    focusProps: focusProps\n  } = (0, $fxUYb$useFocus)({\n    isDisabled: isDisabled,\n    onFocusChange: setIsFocused\n  });\n  return /*#__PURE__*/(0, $fxUYb$react).createElement(\"div\", {\n    ref: domRef,\n    ...styleProps,\n    className: (0, $fxUYb$classNames)((0, $parcel$interopDefault($fxUYb$colorslider_vars_cssmodulejs)), {\n      'spectrum-ColorSlider-container--horizontal': !vertical,\n      'spectrum-ColorSlider-container--vertical': vertical\n    })\n  }, label && /*#__PURE__*/(0, $fxUYb$react).createElement(\"div\", {\n    className: (0, $fxUYb$classNames)((0, $parcel$interopDefault($fxUYb$colorslider_vars_cssmodulejs)), 'spectrum-ColorSlider-labelContainer')\n  }, /*#__PURE__*/(0, $fxUYb$react).createElement((0, $fxUYb$Label), labelProps, label), props.contextualHelp && /*#__PURE__*/(0, $fxUYb$react).createElement((0, $fxUYb$SlotProvider), {\n    slots: {\n      actionButton: {\n        UNSAFE_className: (0, $fxUYb$classNames)((0, $parcel$interopDefault($fxUYb$colorslider_vars_cssmodulejs)), 'spectrum-ColorSlider-contextualHelp')\n      }\n    }\n  }, props.contextualHelp), showValueLabel && /*#__PURE__*/(0, $fxUYb$react).createElement((0, $fxUYb$Label), {\n    elementType: \"span\",\n    UNSAFE_className: (0, $fxUYb$classNames)((0, $parcel$interopDefault($fxUYb$colorslider_vars_cssmodulejs)), 'spectrum-ColorSlider-valueLabel')\n  }, /*#__PURE__*/(0, $fxUYb$react).createElement(\"output\", outputProps, state.value.formatChannelValue(channel, locale)))), /*#__PURE__*/(0, $fxUYb$react).createElement(\"div\", {\n    ...trackProps,\n    ref: trackRef,\n    className: (0, $fxUYb$classNames)((0, $parcel$interopDefault($fxUYb$colorslider_vars_cssmodulejs)), 'spectrum-ColorSlider', {\n      'is-disabled': isDisabled,\n      'spectrum-ColorSlider--vertical': vertical\n    })\n  }, /*#__PURE__*/(0, $fxUYb$react).createElement((0, $3a90e89d07d7bbd5$export$a3cc47cee1c1ccc), {\n    value: state.getDisplayColor(),\n    isFocused: isFocused && isFocusVisible,\n    isDisabled: isDisabled,\n    isDragging: state.isThumbDragging(0),\n    containerRef: trackRef,\n    className: (0, $fxUYb$classNames)((0, $parcel$interopDefault($fxUYb$colorslider_vars_cssmodulejs)), 'spectrum-ColorSlider-handle'),\n    ...thumbProps\n  }, /*#__PURE__*/(0, $fxUYb$react).createElement(\"input\", {\n    ...inputProps,\n    ...focusProps,\n    ref: inputRef,\n    className: (0, $fxUYb$classNames)((0, $parcel$interopDefault($fxUYb$colorslider_vars_cssmodulejs)), 'spectrum-ColorSlider-slider')\n  }))));\n}\n/**\n * ColorSliders allow users to adjust an individual channel of a color value.\n */\nlet $3870e4ce67ed7ee1$export$44fd664bcca5b6fb = /*#__PURE__*/(0, $fxUYb$react).forwardRef($3870e4ce67ed7ee1$var$ColorSlider);\nexport { $3870e4ce67ed7ee1$export$44fd664bcca5b6fb as ColorSlider };","map":{"version":3,"names":["$3870e4ce67ed7ee1$var$ColorSlider","props","ref","$fxUYb$useProviderProps","inputRef","$fxUYb$useRef","trackRef","domRef","$fxUYb$useFocusableRef","$fxUYb$useContextProps","$fxUYb$ColorSliderContext","isDisabled","channel","orientation","label","showValueLabel","ariaLabel","vertical","styleProps","$fxUYb$useStyleProps","locale","$fxUYb$useLocale","state","$fxUYb$useColorSliderState","undefined","value","getChannelName","inputProps","thumbProps","trackProps","labelProps","outputProps","$fxUYb$useColorSlider","isFocusVisible","$fxUYb$useFocusVisible","isFocused","setIsFocused","$fxUYb$useState","focusProps","$fxUYb$useFocus","onFocusChange","$fxUYb$react","createElement","className","$fxUYb$classNames","$parcel$interopDefault","$fxUYb$colorslider_vars_cssmodulejs","$fxUYb$Label","contextualHelp","$fxUYb$SlotProvider","slots","actionButton","UNSAFE_className","elementType","formatChannelValue","$3a90e89d07d7bbd5$export$a3cc47cee1c1ccc","getDisplayColor","isDragging","isThumbDragging","containerRef","$3870e4ce67ed7ee1$export$44fd664bcca5b6fb","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/color/dist/packages/@react-spectrum/color/src/ColorSlider.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, SlotProvider, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport {ColorSliderContext, useContextProps} from 'react-aria-components';\nimport {ColorThumb} from './ColorThumb';\nimport {FocusableRef} from '@react-types/shared';\nimport {Label} from '@react-spectrum/label';\nimport React, {useRef, useState} from 'react';\nimport {SpectrumColorSliderProps} from '@react-types/color';\nimport styles from '@adobe/spectrum-css-temp/components/colorslider/vars.css';\nimport {useColorSlider} from '@react-aria/color';\nimport {useColorSliderState} from '@react-stately/color';\nimport {useFocus, useFocusVisible} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ColorSlider(props: SpectrumColorSliderProps, ref: FocusableRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let inputRef = useRef(null);\n  let trackRef = useRef(null);\n  let domRef = useFocusableRef(ref, inputRef);\n  [props, domRef] = useContextProps(props, domRef, ColorSliderContext);\n\n  let {\n    isDisabled,\n    channel,\n    orientation,\n    label,\n    showValueLabel,\n    'aria-label': ariaLabel\n  } = props;\n  let vertical = orientation === 'vertical';\n\n  let {styleProps} = useStyleProps(props);\n  let {locale} = useLocale();\n\n  let state = useColorSliderState({...props, locale});\n\n  // If vertical and a label is provided, use it as an aria-label instead.\n  if (vertical && label) {\n    ariaLabel = ariaLabel || (typeof label === 'string' ? label : undefined);\n    label = null;\n  }\n\n  // If no external label, aria-label or aria-labelledby is provided,\n  // default to displaying the localized channel value.\n  // Specifically check if label is undefined. If label is `null` then display no visible label.\n  // A default aria-label is provided by useColorSlider in that case.\n  if (label === undefined && !ariaLabel && !props['aria-labelledby'] && !vertical) {\n    label = state.value.getChannelName(channel, locale);\n  }\n\n  // Show the value label by default if there is a visible label\n  if (showValueLabel == null) {\n    showValueLabel = !!label;\n  }\n\n  let {inputProps, thumbProps, trackProps, labelProps, outputProps} = useColorSlider({\n    ...props,\n    label,\n    'aria-label': ariaLabel,\n    trackRef,\n    inputRef\n  }, state);\n\n  let {isFocusVisible} = useFocusVisible();\n  let [isFocused, setIsFocused] = useState(false);\n  let {focusProps} = useFocus({\n    isDisabled,\n    onFocusChange: setIsFocused\n  });\n\n  return (\n    <div\n      ref={domRef}\n      {...styleProps}\n      className={classNames(\n        styles,\n        {\n          'spectrum-ColorSlider-container--horizontal': !vertical,\n          'spectrum-ColorSlider-container--vertical': vertical\n        }\n      )}>\n      {label &&\n        <div className={classNames(styles, 'spectrum-ColorSlider-labelContainer')}>\n          <Label {...labelProps}>{label}</Label>\n          {props.contextualHelp &&\n            <SlotProvider\n              slots={{\n                actionButton: {\n                  UNSAFE_className: classNames(styles, 'spectrum-ColorSlider-contextualHelp')\n                }\n              }}>\n              {props.contextualHelp}\n            </SlotProvider>\n          }\n          {showValueLabel && (\n            <Label elementType=\"span\" UNSAFE_className={classNames(styles, 'spectrum-ColorSlider-valueLabel')}>\n              <output {...outputProps}>{state.value.formatChannelValue(channel, locale)}</output>\n            </Label>\n          )}\n        </div>\n      }\n      <div\n        {...trackProps}\n        ref={trackRef}\n        className={classNames(\n          styles,\n          'spectrum-ColorSlider', {\n            'is-disabled': isDisabled,\n            'spectrum-ColorSlider--vertical': vertical\n          }\n        )\n      }>\n        <ColorThumb\n          value={state.getDisplayColor()}\n          isFocused={isFocused && isFocusVisible}\n          isDisabled={isDisabled}\n          isDragging={state.isThumbDragging(0)}\n          containerRef={trackRef}\n          className={classNames(styles, 'spectrum-ColorSlider-handle')}\n          {...thumbProps}>\n          <input {...inputProps} {...focusProps} ref={inputRef} className={classNames(styles, 'spectrum-ColorSlider-slider')} />\n        </ColorThumb>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ColorSliders allow users to adjust an individual channel of a color value.\n */\nlet _ColorSlider = React.forwardRef(ColorSlider);\nexport {_ColorSlider as ColorSlider};\n"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AA0BA,SAASA,kCAAYC,KAA+B,EAAEC,GAAiC;EACrFD,KAAA,GAAQ,IAAAE,uBAAe,EAAEF,KAAA;EACzB,IAAIG,QAAA,GAAW,IAAAC,aAAK,EAAE;EACtB,IAAIC,QAAA,GAAW,IAAAD,aAAK,EAAE;EACtB,IAAIE,MAAA,GAAS,IAAAC,sBAAc,EAAEN,GAAA,EAAKE,QAAA;EAClC,CAACH,KAAA,EAAOM,MAAA,CAAO,GAAG,IAAAE,sBAAc,EAAER,KAAA,EAAOM,MAAA,GAAQ,GAAAG,yBAAiB;EAElE,IAAI;IAAAC,UAAA,EACFA,UAAU;IAAAC,OAAA,EACVA,OAAO;IAAAC,WAAA,EACPA,WAAW;IAAAC,KAAA,EACXA,KAAK;IAAAC,cAAA,EACLA,cAAc;IACd,cAAcC;EAAS,CACxB,GAAGf,KAAA;EACJ,IAAIgB,QAAA,GAAWJ,WAAA,KAAgB;EAE/B,IAAI;IAAAK,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAElB,KAAA;EACjC,IAAI;IAAAmB,MAAA,EAACA;EAAM,CAAC,GAAG,IAAAC,gBAAQ;EAEvB,IAAIC,KAAA,GAAQ,IAAAC,0BAAkB,EAAE;IAAC,GAAGtB,KAAK;YAAEmB;EAAM;EAEjD;EACA,IAAIH,QAAA,IAAYH,KAAA,EAAO;IACrBE,SAAA,GAAYA,SAAA,KAAc,OAAOF,KAAA,KAAU,WAAWA,KAAA,GAAQU,SAAQ;IACtEV,KAAA,GAAQ;EACV;EAEA;EACA;EACA;EACA;EACA,IAAIA,KAAA,KAAUU,SAAA,IAAa,CAACR,SAAA,IAAa,CAACf,KAAK,CAAC,kBAAkB,IAAI,CAACgB,QAAA,EACrEH,KAAA,GAAQQ,KAAA,CAAMG,KAAK,CAACC,cAAc,CAACd,OAAA,EAASQ,MAAA;EAG9C;EACA,IAAIL,cAAA,IAAkB,MACpBA,cAAA,GAAiB,CAAC,CAACD,KAAA;EAGrB,IAAI;IAAAa,UAAA,EAACA,UAAU;IAAAC,UAAA,EAAEA,UAAU;IAAAC,UAAA,EAAEA,UAAU;IAAAC,UAAA,EAAEA,UAAU;IAAAC,WAAA,EAAEA;EAAW,CAAC,GAAG,IAAAC,qBAAa,EAAE;IACjF,GAAG/B,KAAK;WACRa,KAAA;IACA,cAAcE,SAAA;cACdV,QAAA;cACAF;EACF,GAAGkB,KAAA;EAEH,IAAI;IAAAW,cAAA,EAACA;EAAc,CAAC,GAAG,IAAAC,sBAAc;EACrC,IAAI,CAACC,SAAA,EAAWC,YAAA,CAAa,GAAG,IAAAC,eAAO,EAAE;EACzC,IAAI;IAAAC,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,eAAO,EAAE;gBAC1B5B,UAAA;IACA6B,aAAA,EAAeJ;EACjB;EAEA,oBACE,IAAAK,YAAA,EAAAC,aAAA,CAAC;IACCxC,GAAA,EAAKK,MAAA;IACJ,GAAGW,UAAU;IACdyB,SAAA,EAAW,IAAAC,iBAAS,GAClB,GAAAC,sBAAA,CAAAC,mCAAA,CAAK,GACL;MACE,8CAA8C,CAAC7B,QAAA;MAC/C,4CAA4CA;IAC9C;KAEDH,KAAA,iBACC,IAAA2B,YAAA,EAAAC,aAAA,CAAC;IAAIC,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,mCAAA,CAAK,GAAG;kBACjC,IAAAL,YAAA,EAAAC,aAAA,EAAC,GAAAK,YAAI,GAAMjB,UAAA,EAAahB,KAAA,GACvBb,KAAA,CAAM+C,cAAc,iBACnB,IAAAP,YAAA,EAAAC,aAAA,EAAC,GAAAO,mBAAW;IACVC,KAAA,EAAO;MACLC,YAAA,EAAc;QACZC,gBAAA,EAAkB,IAAAR,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,mCAAA,CAAK,GAAG;MACvC;IACF;KACC7C,KAAA,CAAM+C,cAAc,GAGxBjC,cAAA,iBACC,IAAA0B,YAAA,EAAAC,aAAA,EAAC,GAAAK,YAAI;IAAEM,WAAA,EAAY;IAAOD,gBAAA,EAAkB,IAAAR,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,mCAAA,CAAK,GAAG;kBAC7D,IAAAL,YAAA,EAAAC,aAAA,CAAC,UAAWX,WAAA,EAAcT,KAAA,CAAMG,KAAK,CAAC6B,kBAAkB,CAAC1C,OAAA,EAASQ,MAAA,mBAK1E,IAAAqB,YAAA,EAAAC,aAAA,CAAC;IACE,GAAGb,UAAU;IACd3B,GAAA,EAAKI,QAAA;IACLqC,SAAA,EAAW,IAAAC,iBAAS,GAClB,GAAAC,sBAAA,CAAAC,mCAAA,CAAK,GACL,wBAAwB;MACtB,eAAenC,UAAA;MACf,kCAAkCM;IACpC;kBAGF,IAAAwB,YAAA,EAAAC,aAAA,EAAC,GAAAa,wCAAS;IACR9B,KAAA,EAAOH,KAAA,CAAMkC,eAAe;IAC5BrB,SAAA,EAAWA,SAAA,IAAaF,cAAA;IACxBtB,UAAA,EAAYA,UAAA;IACZ8C,UAAA,EAAYnC,KAAA,CAAMoC,eAAe,CAAC;IAClCC,YAAA,EAAcrD,QAAA;IACdqC,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,mCAAA,CAAK,GAAG;IAC7B,GAAGlB;kBACJ,IAAAa,YAAA,EAAAC,aAAA,CAAC;IAAO,GAAGf,UAAU;IAAG,GAAGW,UAAU;IAAEpC,GAAA,EAAKE,QAAA;IAAUuC,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,mCAAA,CAAK,GAAG;;AAK9F;AAEA;;;AAGA,IAAIc,yCAAA,gBAAe,IAAAnB,YAAI,EAAEoB,UAAU,CAAC7D,iCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}