{"ast":null,"code":"import \"./combobox.1c1869da.css\";\nimport $c3ZYr$combobox_cssmodulejs from \"./combobox_css.mjs\";\nimport $c3ZYr$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { MobileComboBox as $a1ae4cad4496428f$export$7637df911c069b4d } from \"./MobileComboBox.mjs\";\nimport \"./vars.03cfef19.css\";\nimport $c3ZYr$inputgroup_vars_cssmodulejs from \"./inputgroup_vars_css.mjs\";\nimport \"./vars.7a9c8a9c.css\";\nimport $c3ZYr$textfield_vars_cssmodulejs from \"./textfield_vars_css.mjs\";\nimport $c3ZYr$spectrumiconsuiChevronDownMedium from \"@spectrum-icons/ui/ChevronDownMedium\";\nimport { useIsMobileDevice as $c3ZYr$useIsMobileDevice, useUnwrapDOMRef as $c3ZYr$useUnwrapDOMRef, useFocusableRef as $c3ZYr$useFocusableRef, useResizeObserver as $c3ZYr$useResizeObserver, dimensionValue as $c3ZYr$dimensionValue, classNames as $c3ZYr$classNames } from \"@react-spectrum/utils\";\nimport { Field as $c3ZYr$Field } from \"@react-spectrum/label\";\nimport { FieldButton as $c3ZYr$FieldButton } from \"@react-spectrum/button\";\nimport { FocusRing as $c3ZYr$FocusRing } from \"@react-aria/focus\";\nimport { useListBoxLayout as $c3ZYr$useListBoxLayout, ListBoxBase as $c3ZYr$ListBoxBase } from \"@react-spectrum/listbox\";\nimport { Popover as $c3ZYr$Popover } from \"@react-spectrum/overlays\";\nimport { useHover as $c3ZYr$useHover, PressResponder as $c3ZYr$PressResponder } from \"@react-aria/interactions\";\nimport { ProgressCircle as $c3ZYr$ProgressCircle } from \"@react-spectrum/progress\";\nimport $c3ZYr$react, { useRef as $c3ZYr$useRef, useState as $c3ZYr$useState, useCallback as $c3ZYr$useCallback, useEffect as $c3ZYr$useEffect } from \"react\";\nimport { TextFieldBase as $c3ZYr$TextFieldBase } from \"@react-spectrum/textfield\";\nimport { useComboBox as $c3ZYr$useComboBox } from \"@react-aria/combobox\";\nimport { useComboBoxState as $c3ZYr$useComboBoxState } from \"@react-stately/combobox\";\nimport { useLocalizedStringFormatter as $c3ZYr$useLocalizedStringFormatter, useFilter as $c3ZYr$useFilter } from \"@react-aria/i18n\";\nimport { useFormProps as $c3ZYr$useFormProps } from \"@react-spectrum/form\";\nimport { useLayoutEffect as $c3ZYr$useLayoutEffect } from \"@react-aria/utils\";\nimport { useProviderProps as $c3ZYr$useProviderProps, useProvider as $c3ZYr$useProvider } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $2289f375e813f187$var$ComboBox(props, ref) {\n  props = (0, $c3ZYr$useProviderProps)(props);\n  props = (0, $c3ZYr$useFormProps)(props);\n  if (props.placeholder) console.warn('Placeholders are deprecated due to accessibility issues. Please use help text instead. See the docs for details: https://react-spectrum.adobe.com/react-spectrum/ComboBox.html#help-text');\n  let isMobile = (0, $c3ZYr$useIsMobileDevice)();\n  if (isMobile)\n    // menuTrigger=focus/manual don't apply to mobile combobox\n    return /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $a1ae4cad4496428f$export$7637df911c069b4d), {\n      ...props,\n      menuTrigger: \"input\",\n      ref: ref\n    });else return /*#__PURE__*/(0, $c3ZYr$react).createElement($2289f375e813f187$var$ComboBoxBase, {\n    ...props,\n    ref: ref\n  });\n}\nconst $2289f375e813f187$var$ComboBoxBase = /*#__PURE__*/(0, $c3ZYr$react).forwardRef(function ComboBoxBase(props, ref) {\n  let {\n    menuTrigger = 'input',\n    shouldFlip = true,\n    direction = 'bottom',\n    align = 'start',\n    isQuiet: isQuiet,\n    loadingState: loadingState,\n    onLoadMore: onLoadMore,\n    allowsCustomValue: allowsCustomValue,\n    menuWidth: customMenuWidth,\n    name: name,\n    formValue = 'text'\n  } = props;\n  if (allowsCustomValue) formValue = 'text';\n  let stringFormatter = (0, $c3ZYr$useLocalizedStringFormatter)((0, $parcel$interopDefault($c3ZYr$intlStringsmodulejs)), '@react-spectrum/combobox');\n  let isAsync = loadingState != null;\n  let popoverRef = (0, $c3ZYr$useRef)(undefined);\n  let unwrappedPopoverRef = (0, $c3ZYr$useUnwrapDOMRef)(popoverRef);\n  let buttonRef = (0, $c3ZYr$useRef)(undefined);\n  let unwrappedButtonRef = (0, $c3ZYr$useUnwrapDOMRef)(buttonRef);\n  let listBoxRef = (0, $c3ZYr$useRef)(undefined);\n  let inputRef = (0, $c3ZYr$useRef)(undefined);\n  // serve as the new popover `triggerRef` instead of `unwrappedButtonRef` before for better positioning.\n  let inputGroupRef = (0, $c3ZYr$useRef)(undefined);\n  let domRef = (0, $c3ZYr$useFocusableRef)(ref, inputRef);\n  let {\n    contains: contains\n  } = (0, $c3ZYr$useFilter)({\n    sensitivity: 'base'\n  });\n  let state = (0, $c3ZYr$useComboBoxState)({\n    ...props,\n    defaultFilter: contains,\n    allowsEmptyCollection: isAsync\n  });\n  let layout = (0, $c3ZYr$useListBoxLayout)();\n  let {\n    buttonProps: buttonProps,\n    inputProps: inputProps,\n    listBoxProps: listBoxProps,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = (0, $c3ZYr$useComboBox)({\n    ...props,\n    layoutDelegate: layout,\n    buttonRef: unwrappedButtonRef,\n    popoverRef: unwrappedPopoverRef,\n    listBoxRef: listBoxRef,\n    inputRef: inputRef,\n    menuTrigger: menuTrigger,\n    name: formValue === 'text' ? name : undefined\n  }, state);\n  // Measure the width of the inputfield and the button to inform the width of the menu (below).\n  let [menuWidth, setMenuWidth] = (0, $c3ZYr$useState)(null);\n  let {\n    scale: scale\n  } = (0, $c3ZYr$useProvider)();\n  let onResize = (0, $c3ZYr$useCallback)(() => {\n    if (unwrappedButtonRef.current && inputRef.current) {\n      let buttonWidth = unwrappedButtonRef.current.offsetWidth;\n      let inputWidth = inputRef.current.offsetWidth;\n      setMenuWidth(buttonWidth + inputWidth);\n    }\n  }, [unwrappedButtonRef, inputRef, setMenuWidth]);\n  (0, $c3ZYr$useResizeObserver)({\n    ref: domRef,\n    onResize: onResize\n  });\n  (0, $c3ZYr$useLayoutEffect)(onResize, [scale, onResize]);\n  let width = isQuiet ? null : menuWidth;\n  let style = {\n    width: customMenuWidth ? (0, $c3ZYr$dimensionValue)(customMenuWidth) : width,\n    minWidth: isQuiet ? `calc(${menuWidth}px + calc(2 * var(--spectrum-dropdown-quiet-offset)))` : menuWidth\n  };\n  var _state_selectedKey;\n  return /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$react).Fragment, null, /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$Field), {\n    ...props,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails,\n    labelProps: labelProps,\n    ref: domRef\n  }, /*#__PURE__*/(0, $c3ZYr$react).createElement($2289f375e813f187$var$ComboBoxInput, {\n    ...props,\n    isOpen: state.isOpen,\n    loadingState: loadingState,\n    inputProps: inputProps,\n    inputRef: inputRef,\n    triggerProps: buttonProps,\n    triggerRef: buttonRef,\n    validationState: props.validationState || (isInvalid ? 'invalid' : null),\n    ref: inputGroupRef\n  })), name && formValue === 'key' && /*#__PURE__*/(0, $c3ZYr$react).createElement(\"input\", {\n    type: \"hidden\",\n    name: name,\n    value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : ''\n  }), /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$Popover), {\n    state: state,\n    UNSAFE_style: style,\n    UNSAFE_className: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-InputGroup-popover', {\n      'spectrum-InputGroup-popover--quiet': isQuiet\n    }),\n    ref: popoverRef,\n    triggerRef: inputGroupRef,\n    scrollRef: listBoxRef,\n    placement: `${direction} ${align}`,\n    hideArrow: true,\n    isNonModal: true,\n    shouldFlip: shouldFlip\n  }, /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$ListBoxBase), {\n    ...listBoxProps,\n    ref: listBoxRef,\n    disallowEmptySelection: true,\n    autoFocus: state.focusStrategy,\n    shouldSelectOnPressUp: true,\n    focusOnPointerEnter: true,\n    layout: layout,\n    state: state,\n    shouldUseVirtualFocus: true,\n    isLoading: loadingState === 'loading' || loadingState === 'loadingMore',\n    showLoadingSpinner: loadingState === 'loadingMore',\n    onLoadMore: onLoadMore,\n    renderEmptyState: () => isAsync && /*#__PURE__*/(0, $c3ZYr$react).createElement(\"span\", {\n      className: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$combobox_cssmodulejs)), 'no-results')\n    }, loadingState === 'loading' ? stringFormatter.format('loading') : stringFormatter.format('noResults'))\n  })));\n});\nconst $2289f375e813f187$var$ComboBoxInput = /*#__PURE__*/(0, $c3ZYr$react).forwardRef(function ComboBoxInput(props, ref) {\n  let {\n    isQuiet: isQuiet,\n    isDisabled: isDisabled,\n    validationState: validationState,\n    inputProps: inputProps,\n    inputRef: inputRef,\n    triggerProps: triggerProps,\n    triggerRef: triggerRef,\n    autoFocus: autoFocus,\n    style: style,\n    className: className,\n    loadingState: loadingState,\n    isOpen: isOpen,\n    menuTrigger: menuTrigger\n  } = props;\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $c3ZYr$useHover)({});\n  let stringFormatter = (0, $c3ZYr$useLocalizedStringFormatter)((0, $parcel$interopDefault($c3ZYr$intlStringsmodulejs)), '@react-spectrum/combobox');\n  let timeout = (0, $c3ZYr$useRef)(null);\n  let [showLoading, setShowLoading] = (0, $c3ZYr$useState)(false);\n  let loadingCircle = /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$ProgressCircle), {\n    \"aria-label\": stringFormatter.format('loading'),\n    size: \"S\",\n    isIndeterminate: true,\n    UNSAFE_className: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$textfield_vars_cssmodulejs)), 'spectrum-Textfield-circleLoader', (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-InputGroup-input-circleLoader'))\n  });\n  let isLoading = loadingState === 'loading' || loadingState === 'filtering';\n  let inputValue = inputProps.value;\n  let lastInputValue = (0, $c3ZYr$useRef)(inputValue);\n  (0, $c3ZYr$useEffect)(() => {\n    if (isLoading && !showLoading) {\n      if (timeout.current === null) timeout.current = setTimeout(() => {\n        setShowLoading(true);\n      }, 500);\n      // If user is typing, clear the timer and restart since it is a new request\n      if (inputValue !== lastInputValue.current) {\n        clearTimeout(timeout.current);\n        timeout.current = setTimeout(() => {\n          setShowLoading(true);\n        }, 500);\n      }\n    } else if (!isLoading) {\n      // If loading is no longer happening, clear any timers and hide the loading circle\n      setShowLoading(false);\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n    lastInputValue.current = inputValue;\n  }, [isLoading, showLoading, inputValue]);\n  (0, $c3ZYr$useEffect)(() => {\n    return () => {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    };\n  }, []);\n  return /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$FocusRing), {\n    within: true,\n    isTextInput: true,\n    focusClass: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'is-focused'),\n    focusRingClass: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'focus-ring'),\n    autoFocus: autoFocus\n  }, /*#__PURE__*/(0, $c3ZYr$react).createElement(\"div\", {\n    ...hoverProps,\n    ref: ref,\n    style: style,\n    className: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-InputGroup', {\n      'spectrum-InputGroup--quiet': isQuiet,\n      'is-disabled': isDisabled,\n      'spectrum-InputGroup--invalid': validationState === 'invalid' && !isDisabled,\n      'is-hovered': isHovered\n    }, className)\n  }, /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$TextFieldBase), {\n    inputProps: inputProps,\n    inputRef: inputRef,\n    UNSAFE_className: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-InputGroup-field'),\n    inputClassName: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-InputGroup-input'),\n    validationIconClassName: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-InputGroup-input-validationIcon'),\n    isDisabled: isDisabled,\n    isQuiet: isQuiet,\n    validationState: validationState,\n    // loading circle should only be displayed if menu is open, if menuTrigger is \"manual\", or first time load (to stop circle from showing up when user selects an option)\n    // TODO: add special case for completionMode: complete as well\n    isLoading: showLoading && (isOpen || menuTrigger === 'manual' || loadingState === 'loading'),\n    loadingIndicator: loadingState != null && loadingCircle,\n    disableFocusRing: true\n  }), /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$PressResponder), {\n    preventFocusOnPress: true,\n    isPressed: isOpen\n  }, /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$FieldButton), {\n    ...triggerProps,\n    ref: triggerRef,\n    UNSAFE_className: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-FieldButton'),\n    isQuiet: isQuiet,\n    validationState: validationState\n  }, /*#__PURE__*/(0, $c3ZYr$react).createElement((0, $c3ZYr$spectrumiconsuiChevronDownMedium), {\n    UNSAFE_className: (0, $c3ZYr$classNames)((0, $parcel$interopDefault($c3ZYr$inputgroup_vars_cssmodulejs)), 'spectrum-Dropdown-chevron')\n  })))));\n});\n/**\n * ComboBoxes combine a text entry with a picker menu, allowing users to filter longer lists to only the selections matching a query.\n */\nconst $2289f375e813f187$export$72b9695b8216309a = /*#__PURE__*/(0, $c3ZYr$react).forwardRef($2289f375e813f187$var$ComboBox);\nexport { $2289f375e813f187$export$72b9695b8216309a as ComboBox };","map":{"version":3,"names":["$2289f375e813f187$var$ComboBox","props","ref","$c3ZYr$useProviderProps","$c3ZYr$useFormProps","placeholder","console","warn","isMobile","$c3ZYr$useIsMobileDevice","$c3ZYr$react","createElement","$a1ae4cad4496428f$export$7637df911c069b4d","menuTrigger","$2289f375e813f187$var$ComboBoxBase","forwardRef","ComboBoxBase","shouldFlip","direction","align","isQuiet","loadingState","onLoadMore","allowsCustomValue","menuWidth","customMenuWidth","name","formValue","stringFormatter","$c3ZYr$useLocalizedStringFormatter","$parcel$interopDefault","$c3ZYr$intlStringsmodulejs","isAsync","popoverRef","$c3ZYr$useRef","undefined","unwrappedPopoverRef","$c3ZYr$useUnwrapDOMRef","buttonRef","unwrappedButtonRef","listBoxRef","inputRef","inputGroupRef","domRef","$c3ZYr$useFocusableRef","contains","$c3ZYr$useFilter","sensitivity","state","$c3ZYr$useComboBoxState","defaultFilter","allowsEmptyCollection","layout","$c3ZYr$useListBoxLayout","buttonProps","inputProps","listBoxProps","labelProps","descriptionProps","errorMessageProps","isInvalid","validationErrors","validationDetails","$c3ZYr$useComboBox","layoutDelegate","setMenuWidth","$c3ZYr$useState","scale","$c3ZYr$useProvider","onResize","$c3ZYr$useCallback","current","buttonWidth","offsetWidth","inputWidth","$c3ZYr$useResizeObserver","$c3ZYr$useLayoutEffect","width","style","$c3ZYr$dimensionValue","minWidth","_state_selectedKey","Fragment","$c3ZYr$Field","$2289f375e813f187$var$ComboBoxInput","isOpen","triggerProps","triggerRef","validationState","type","value","selectedKey","$c3ZYr$Popover","UNSAFE_style","UNSAFE_className","$c3ZYr$classNames","$c3ZYr$inputgroup_vars_cssmodulejs","scrollRef","placement","hideArrow","isNonModal","$c3ZYr$ListBoxBase","disallowEmptySelection","autoFocus","focusStrategy","shouldSelectOnPressUp","focusOnPointerEnter","shouldUseVirtualFocus","isLoading","showLoadingSpinner","renderEmptyState","className","$c3ZYr$combobox_cssmodulejs","format","ComboBoxInput","isDisabled","hoverProps","isHovered","$c3ZYr$useHover","timeout","showLoading","setShowLoading","loadingCircle","$c3ZYr$ProgressCircle","size","isIndeterminate","$c3ZYr$textfield_vars_cssmodulejs","inputValue","lastInputValue","$c3ZYr$useEffect","setTimeout","clearTimeout","$c3ZYr$FocusRing","within","isTextInput","focusClass","focusRingClass","$c3ZYr$TextFieldBase","inputClassName","validationIconClassName","loadingIndicator","disableFocusRing","$c3ZYr$PressResponder","preventFocusOnPress","isPressed","$c3ZYr$FieldButton","$c3ZYr$spectrumiconsuiChevronDownMedium","$2289f375e813f187$export$72b9695b8216309a"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/combobox/dist/packages/@react-spectrum/combobox/src/ComboBox.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport ChevronDownMedium from '@spectrum-icons/ui/ChevronDownMedium';\nimport {\n  classNames,\n  dimensionValue,\n  useFocusableRef,\n  useIsMobileDevice,\n  useResizeObserver,\n  useUnwrapDOMRef\n} from '@react-spectrum/utils';\nimport comboboxStyles from './combobox.css';\nimport {DOMRefValue, FocusableRef, FocusableRefValue} from '@react-types/shared';\nimport {Field} from '@react-spectrum/label';\nimport {FieldButton} from '@react-spectrum/button';\nimport {FocusRing} from '@react-aria/focus';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {ListBoxBase, useListBoxLayout} from '@react-spectrum/listbox';\nimport {MobileComboBox} from './MobileComboBox';\nimport {Popover} from '@react-spectrum/overlays';\nimport {PressResponder, useHover} from '@react-aria/interactions';\nimport {ProgressCircle} from '@react-spectrum/progress';\nimport React, {\n  InputHTMLAttributes,\n  ReactElement,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport {SpectrumComboBoxProps} from '@react-types/combobox';\nimport styles from '@adobe/spectrum-css-temp/components/inputgroup/vars.css';\nimport {TextFieldBase} from '@react-spectrum/textfield';\nimport textfieldStyles from '@adobe/spectrum-css-temp/components/textfield/vars.css';\nimport {useComboBox} from '@react-aria/combobox';\nimport {useComboBoxState} from '@react-stately/combobox';\nimport {useFilter, useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\n\nfunction ComboBox<T extends object>(props: SpectrumComboBoxProps<T>, ref: FocusableRef<HTMLElement>) {\n  props = useProviderProps(props);\n  props = useFormProps(props);\n\n  if (props.placeholder) {\n    console.warn('Placeholders are deprecated due to accessibility issues. Please use help text instead. See the docs for details: https://react-spectrum.adobe.com/react-spectrum/ComboBox.html#help-text');\n  }\n\n  let isMobile = useIsMobileDevice();\n  if (isMobile) {\n    // menuTrigger=focus/manual don't apply to mobile combobox\n    return <MobileComboBox {...props} menuTrigger=\"input\" ref={ref} />;\n  } else {\n    return <ComboBoxBase {...props} ref={ref} />;\n  }\n}\n\nconst ComboBoxBase = React.forwardRef(function ComboBoxBase<T extends object>(props: SpectrumComboBoxProps<T>, ref: FocusableRef<HTMLElement>) {\n  let {\n    menuTrigger = 'input',\n    shouldFlip = true,\n    direction = 'bottom',\n    align = 'start',\n    isQuiet,\n    loadingState,\n    onLoadMore,\n    allowsCustomValue,\n    menuWidth: customMenuWidth,\n    name,\n    formValue = 'text'\n  } = props;\n  if (allowsCustomValue) {\n    formValue = 'text';\n  }\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/combobox');\n  let isAsync = loadingState != null;\n  let popoverRef = useRef<DOMRefValue<HTMLDivElement>>(undefined);\n  let unwrappedPopoverRef = useUnwrapDOMRef(popoverRef);\n  let buttonRef = useRef<FocusableRefValue<HTMLElement>>(undefined);\n  let unwrappedButtonRef = useUnwrapDOMRef(buttonRef);\n  let listBoxRef = useRef(undefined);\n  let inputRef = useRef<HTMLInputElement>(undefined);\n  // serve as the new popover `triggerRef` instead of `unwrappedButtonRef` before for better positioning.\n  let inputGroupRef = useRef<HTMLDivElement>(undefined);\n  let domRef = useFocusableRef(ref, inputRef);\n\n  let {contains} = useFilter({sensitivity: 'base'});\n  let state = useComboBoxState(\n    {\n      ...props,\n      defaultFilter: contains,\n      allowsEmptyCollection: isAsync\n    }\n  );\n  let layout = useListBoxLayout();\n\n  let {buttonProps, inputProps, listBoxProps, labelProps, descriptionProps, errorMessageProps, isInvalid, validationErrors, validationDetails} = useComboBox(\n    {\n      ...props,\n      layoutDelegate: layout,\n      buttonRef: unwrappedButtonRef,\n      popoverRef: unwrappedPopoverRef,\n      listBoxRef,\n      inputRef: inputRef,\n      menuTrigger,\n      name: formValue === 'text' ? name : undefined\n    },\n    state\n  );\n\n  // Measure the width of the inputfield and the button to inform the width of the menu (below).\n  let [menuWidth, setMenuWidth] = useState(null);\n  let {scale} = useProvider();\n\n  let onResize = useCallback(() => {\n    if (unwrappedButtonRef.current && inputRef.current) {\n      let buttonWidth = unwrappedButtonRef.current.offsetWidth;\n      let inputWidth = inputRef.current.offsetWidth;\n      setMenuWidth(buttonWidth + inputWidth);\n    }\n  }, [unwrappedButtonRef, inputRef, setMenuWidth]);\n\n  useResizeObserver({\n    ref: domRef,\n    onResize: onResize\n  });\n\n  useLayoutEffect(onResize, [scale, onResize]);\n\n  let width = isQuiet ? null : menuWidth;\n  let style = {\n    width: customMenuWidth ? dimensionValue(customMenuWidth) : width,\n    minWidth: isQuiet ? `calc(${menuWidth}px + calc(2 * var(--spectrum-dropdown-quiet-offset)))` : menuWidth\n  };\n\n  return (\n    <>\n      <Field\n        {...props}\n        descriptionProps={descriptionProps}\n        errorMessageProps={errorMessageProps}\n        isInvalid={isInvalid}\n        validationErrors={validationErrors}\n        validationDetails={validationDetails}\n        labelProps={labelProps}\n        ref={domRef}>\n        <ComboBoxInput\n          {...props}\n          isOpen={state.isOpen}\n          loadingState={loadingState}\n          inputProps={inputProps}\n          inputRef={inputRef}\n          triggerProps={buttonProps}\n          triggerRef={buttonRef}\n          validationState={props.validationState || (isInvalid ? 'invalid' : null)}\n          ref={inputGroupRef} />\n      </Field>\n      {name && formValue === 'key' && <input type=\"hidden\" name={name} value={state.selectedKey ?? ''} />}\n      <Popover\n        state={state}\n        UNSAFE_style={style}\n        UNSAFE_className={classNames(styles, 'spectrum-InputGroup-popover', {'spectrum-InputGroup-popover--quiet': isQuiet})}\n        ref={popoverRef}\n        triggerRef={inputGroupRef}\n        scrollRef={listBoxRef}\n        placement={`${direction} ${align}`}\n        hideArrow\n        isNonModal\n        shouldFlip={shouldFlip}>\n        <ListBoxBase\n          {...listBoxProps}\n          ref={listBoxRef}\n          disallowEmptySelection\n          autoFocus={state.focusStrategy}\n          shouldSelectOnPressUp\n          focusOnPointerEnter\n          layout={layout}\n          state={state}\n          shouldUseVirtualFocus\n          isLoading={loadingState === 'loading' || loadingState === 'loadingMore'}\n          showLoadingSpinner={loadingState === 'loadingMore'}\n          onLoadMore={onLoadMore}\n          renderEmptyState={() => isAsync && (\n            <span className={classNames(comboboxStyles, 'no-results')}>\n              {loadingState === 'loading' ? stringFormatter.format('loading') :  stringFormatter.format('noResults')}\n            </span>\n          )} />\n      </Popover>\n    </>\n  );\n});\n\ninterface ComboBoxInputProps extends SpectrumComboBoxProps<unknown> {\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  inputRef: RefObject<HTMLInputElement | HTMLTextAreaElement | null>,\n  triggerProps: AriaButtonProps,\n  triggerRef: RefObject<FocusableRefValue<HTMLElement> | null>,\n  style?: React.CSSProperties,\n  className?: string,\n  isOpen?: boolean\n}\n\nconst ComboBoxInput = React.forwardRef(function ComboBoxInput(props: ComboBoxInputProps, ref: RefObject<HTMLElement | null>) {\n  let {\n    isQuiet,\n    isDisabled,\n    validationState,\n    inputProps,\n    inputRef,\n    triggerProps,\n    triggerRef,\n    autoFocus,\n    style,\n    className,\n    loadingState,\n    isOpen,\n    menuTrigger\n  } = props;\n  let {hoverProps, isHovered} = useHover({});\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/combobox');\n  let timeout = useRef(null);\n  let [showLoading, setShowLoading] = useState(false);\n\n  let loadingCircle = (\n    <ProgressCircle\n      aria-label={stringFormatter.format('loading')}\n      size=\"S\"\n      isIndeterminate\n      UNSAFE_className={classNames(\n        textfieldStyles,\n        'spectrum-Textfield-circleLoader',\n        classNames(\n          styles,\n          'spectrum-InputGroup-input-circleLoader'\n        )\n      )} />\n  );\n\n  let isLoading = loadingState === 'loading' || loadingState === 'filtering';\n  let inputValue = inputProps.value;\n  let lastInputValue = useRef(inputValue);\n  useEffect(() => {\n    if (isLoading && !showLoading) {\n      if (timeout.current === null) {\n        timeout.current = setTimeout(() => {\n          setShowLoading(true);\n        }, 500);\n      }\n\n      // If user is typing, clear the timer and restart since it is a new request\n      if (inputValue !== lastInputValue.current) {\n        clearTimeout(timeout.current);\n        timeout.current = setTimeout(() => {\n          setShowLoading(true);\n        }, 500);\n      }\n    } else if (!isLoading) {\n      // If loading is no longer happening, clear any timers and hide the loading circle\n      setShowLoading(false);\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n\n    lastInputValue.current = inputValue;\n  }, [isLoading, showLoading, inputValue]);\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    };\n  }, []);\n\n  return (\n    (<FocusRing\n      within\n      isTextInput\n      focusClass={classNames(styles, 'is-focused')}\n      focusRingClass={classNames(styles, 'focus-ring')}\n      autoFocus={autoFocus}>\n      <div\n        {...hoverProps}\n        ref={ref as RefObject<HTMLDivElement | null>}\n        style={style}\n        className={\n          classNames(\n            styles,\n            'spectrum-InputGroup',\n            {\n              'spectrum-InputGroup--quiet': isQuiet,\n              'is-disabled': isDisabled,\n              'spectrum-InputGroup--invalid': validationState === 'invalid' && !isDisabled,\n              'is-hovered': isHovered\n            },\n            className\n          )\n        }>\n        <TextFieldBase\n          inputProps={inputProps}\n          inputRef={inputRef}\n          UNSAFE_className={\n            classNames(\n              styles,\n              'spectrum-InputGroup-field'\n            )\n          }\n          inputClassName={\n            classNames(\n              styles,\n              'spectrum-InputGroup-input'\n            )\n          }\n          validationIconClassName={\n            classNames(\n              styles,\n              'spectrum-InputGroup-input-validationIcon'\n            )\n          }\n          isDisabled={isDisabled}\n          isQuiet={isQuiet}\n          validationState={validationState}\n          // loading circle should only be displayed if menu is open, if menuTrigger is \"manual\", or first time load (to stop circle from showing up when user selects an option)\n          // TODO: add special case for completionMode: complete as well\n          isLoading={showLoading && (isOpen || menuTrigger === 'manual' || loadingState === 'loading')}\n          loadingIndicator={loadingState != null && loadingCircle}\n          disableFocusRing />\n        <PressResponder preventFocusOnPress isPressed={isOpen}>\n          <FieldButton\n            {...triggerProps}\n            ref={triggerRef}\n            UNSAFE_className={\n              classNames(\n                styles,\n                'spectrum-FieldButton'\n              )\n            }\n            isQuiet={isQuiet}\n            validationState={validationState}>\n            <ChevronDownMedium UNSAFE_className={classNames(styles, 'spectrum-Dropdown-chevron')} />\n          </FieldButton>\n        </PressResponder>\n      </div>\n    </FocusRing>)\n  );\n});\n\n/**\n * ComboBoxes combine a text entry with a picker menu, allowing users to filter longer lists to only the selections matching a query.\n */\nconst _ComboBox = React.forwardRef(ComboBox) as <T>(props: SpectrumComboBoxProps<T> & {ref?: FocusableRef<HTMLElement>}) => ReactElement;\nexport {_ComboBox as ComboBox};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}