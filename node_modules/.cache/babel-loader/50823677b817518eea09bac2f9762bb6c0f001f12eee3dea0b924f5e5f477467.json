{"ast":null,"code":"import \"./vars.b0351abd.css\";\nimport $hJE0A$icon_vars_cssmodulejs from \"./icon_vars_css.mjs\";\nimport { baseStyleProps as $hJE0A$baseStyleProps, useSlotProps as $hJE0A$useSlotProps, useStyleProps as $hJE0A$useStyleProps, classNames as $hJE0A$classNames } from \"@react-spectrum/utils\";\nimport { filterDOMProps as $hJE0A$filterDOMProps } from \"@react-aria/utils\";\nimport $hJE0A$react from \"react\";\nimport { useProvider as $hJE0A$useProvider } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $6bfb67578ee6effd$var$iconColorValue(value) {\n  return `var(--spectrum-semantic-${value}-color-icon)`;\n}\nconst $6bfb67578ee6effd$var$iconStyleProps = {\n  ...(0, $hJE0A$baseStyleProps),\n  color: ['color', $6bfb67578ee6effd$var$iconColorValue]\n};\nfunction $6bfb67578ee6effd$export$f04a61298a47a40f(props) {\n  props = (0, $hJE0A$useSlotProps)(props, 'icon');\n  let {\n    children: children,\n    size: size,\n    'aria-label': ariaLabel,\n    'aria-hidden': ariaHidden,\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $hJE0A$useStyleProps)(otherProps, $6bfb67578ee6effd$var$iconStyleProps);\n  let provider = (0, $hJE0A$useProvider)();\n  let scale = 'M';\n  if (provider !== null) scale = provider.scale === 'large' ? 'L' : 'M';\n  if (!ariaHidden) ariaHidden = undefined;\n  // Use user specified size, falling back to provider scale if size is undef\n  let iconSize = size ? size : scale;\n  return /*#__PURE__*/(0, $hJE0A$react).cloneElement(children, {\n    ...(0, $hJE0A$filterDOMProps)(otherProps),\n    ...styleProps,\n    focusable: 'false',\n    'aria-label': ariaLabel,\n    'aria-hidden': ariaLabel ? ariaHidden || undefined : true,\n    role: 'img',\n    className: (0, $hJE0A$classNames)((0, $parcel$interopDefault($hJE0A$icon_vars_cssmodulejs)), children.props.className, 'spectrum-Icon', `spectrum-Icon--size${iconSize}`, styleProps.className)\n  });\n}\nexport { $6bfb67578ee6effd$export$f04a61298a47a40f as Icon };","map":{"version":3,"names":["$6bfb67578ee6effd$var$iconColorValue","value","$6bfb67578ee6effd$var$iconStyleProps","$hJE0A$baseStyleProps","color","$6bfb67578ee6effd$export$f04a61298a47a40f","props","$hJE0A$useSlotProps","children","size","ariaLabel","ariaHidden","otherProps","styleProps","$hJE0A$useStyleProps","provider","$hJE0A$useProvider","scale","undefined","iconSize","$hJE0A$react","cloneElement","$hJE0A$filterDOMProps","focusable","role","className","$hJE0A$classNames","$parcel$interopDefault","$hJE0A$icon_vars_cssmodulejs"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/icon/dist/packages/@react-spectrum/icon/src/Icon.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, IconColorValue, StyleProps} from '@react-types/shared';\nimport {baseStyleProps, classNames, StyleHandlers, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {filterDOMProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/icon/vars.css';\nimport {useProvider} from '@react-spectrum/provider';\n\nexport interface IconProps extends DOMProps, AriaLabelingProps, StyleProps {\n  /**\n   * A screen reader only label for the Icon.\n   */\n  'aria-label'?: string,\n  /**\n   * The content to display. Should be an SVG.\n   */\n  children: ReactElement<any>,\n  /**\n   * Size of Icon (changes based on scale).\n   */\n  size?: 'XXS' | 'XS' | 'S' | 'M' | 'L' |'XL' | 'XXL',\n  /**\n   * A slot to place the icon in.\n   * @default 'icon'\n   */\n  slot?: string,\n  /**\n   * Indicates whether the element is exposed to an accessibility API.\n   */\n  'aria-hidden'?: boolean | 'false' | 'true',\n  /**\n   * Color of the Icon.\n   */\n  color?: IconColorValue\n}\n\nexport type IconPropsWithoutChildren = Omit<IconProps, 'children'>;\n\nfunction iconColorValue(value: IconColorValue) {\n  return `var(--spectrum-semantic-${value}-color-icon)`;\n}\n\nconst iconStyleProps: StyleHandlers = {\n  ...baseStyleProps,\n  color: ['color', iconColorValue]\n};\n\n/**\n * Spectrum icons are clear, minimal, and consistent across platforms. They follow the focused and rational principles of the design system in both metaphor and style.\n */\nexport function Icon(props: IconProps) {\n  props = useSlotProps(props, 'icon');\n  let {\n    children,\n    size,\n    'aria-label': ariaLabel,\n    'aria-hidden': ariaHidden,\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps, iconStyleProps);\n\n  let provider = useProvider();\n  let scale = 'M';\n  if (provider !== null) {\n    scale = provider.scale === 'large' ? 'L' : 'M';\n  }\n  if (!ariaHidden) {\n    ariaHidden = undefined;\n  }\n\n  // Use user specified size, falling back to provider scale if size is undef\n  let iconSize = size ? size : scale;\n\n  return React.cloneElement(children, {\n    ...filterDOMProps(otherProps),\n    ...styleProps,\n    focusable: 'false',\n    'aria-label': ariaLabel,\n    'aria-hidden': (ariaLabel ? (ariaHidden || undefined) : true),\n    role: 'img',\n    className: classNames(\n      styles,\n      children.props.className,\n      'spectrum-Icon',\n      `spectrum-Icon--size${iconSize}`,\n      styleProps.className)\n  });\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;AAiDA,SAASA,qCAAeC,KAAqB;EAC3C,OAAO,2BAA2BA,KAAA,cAAmB;AACvD;AAEA,MAAMC,oCAAA,GAAgC;EACpC,IAAG,GAAAC,qBAAa,CAAC;EACjBC,KAAA,EAAO,CAAC,SAASJ,oCAAA;AACnB;AAKO,SAASK,0CAAKC,KAAgB;EACnCA,KAAA,GAAQ,IAAAC,mBAAW,EAAED,KAAA,EAAO;EAC5B,IAAI;IAAAE,QAAA,EACFA,QAAQ;IAAAC,IAAA,EACRA,IAAI;IACJ,cAAcC,SAAS;IACvB,eAAeC,UAAU;IACzB,GAAGC;EAAA,CACJ,GAAGN,KAAA;EACJ,IAAI;IAAAO,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEF,UAAA,EAAYV,oCAAA;EAE7C,IAAIa,QAAA,GAAW,IAAAC,kBAAU;EACzB,IAAIC,KAAA,GAAQ;EACZ,IAAIF,QAAA,KAAa,MACfE,KAAA,GAAQF,QAAA,CAASE,KAAK,KAAK,UAAU,MAAM;EAE7C,IAAI,CAACN,UAAA,EACHA,UAAA,GAAaO,SAAA;EAGf;EACA,IAAIC,QAAA,GAAWV,IAAA,GAAOA,IAAA,GAAOQ,KAAA;EAE7B,oBAAO,IAAAG,YAAI,EAAEC,YAAY,CAACb,QAAA,EAAU;IAClC,GAAG,IAAAc,qBAAa,EAAEV,UAAA,CAAW;IAC7B,GAAGC,UAAU;IACbU,SAAA,EAAW;IACX,cAAcb,SAAA;IACd,eAAgBA,SAAA,GAAaC,UAAA,IAAcO,SAAA,GAAa;IACxDM,IAAA,EAAM;IACNC,SAAA,EAAW,IAAAC,iBAAS,GAClB,GAAAC,sBAAA,CAAAC,4BAAA,CAAK,GACLpB,QAAA,CAASF,KAAK,CAACmB,SAAS,EACxB,iBACA,sBAAsBN,QAAA,EAAU,EAChCN,UAAA,CAAWY,SAAS;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}