{"ast":null,"code":"import { hookData as $d7323bca8d074eeb$export$653eddfc964b0f8a } from \"./useTagGroup.mjs\";\nimport $ioKwR$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useId as $ioKwR$useId, useDescription as $ioKwR$useDescription, filterDOMProps as $ioKwR$filterDOMProps, useSyntheticLinkProps as $ioKwR$useSyntheticLinkProps, mergeProps as $ioKwR$mergeProps } from \"@react-aria/utils\";\nimport { useGridListItem as $ioKwR$useGridListItem } from \"@react-aria/gridlist\";\nimport { useInteractionModality as $ioKwR$useInteractionModality } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $ioKwR$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $fc6126c82a4601f1$export$3f568fff7dff2f03(props, state, ref) {\n  let {\n    item: item\n  } = props;\n  let stringFormatter = (0, $ioKwR$useLocalizedStringFormatter)((0, $parcel$interopDefault($ioKwR$intlStringsmodulejs)), '@react-aria/tag');\n  let buttonId = (0, $ioKwR$useId)();\n  let {\n    onRemove: onRemove\n  } = (0, $d7323bca8d074eeb$export$653eddfc964b0f8a).get(state) || {};\n  let {\n    rowProps: rowProps,\n    gridCellProps: gridCellProps,\n    ...states\n  } = (0, $ioKwR$useGridListItem)({\n    node: item\n  }, state, ref);\n  // We want the group to handle keyboard navigation between tags.\n  delete rowProps.onKeyDownCapture;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {\n    descriptionProps: _,\n    ...stateWithoutDescription\n  } = states;\n  let onKeyDown = e => {\n    if (e.key === 'Delete' || e.key === 'Backspace') {\n      e.preventDefault();\n      if (state.selectionManager.isSelected(item.key)) onRemove === null || onRemove === void 0 ? void 0 : onRemove(new Set(state.selectionManager.selectedKeys));else onRemove === null || onRemove === void 0 ? void 0 : onRemove(new Set([item.key]));\n    }\n  };\n  let modality = (0, $ioKwR$useInteractionModality)();\n  if (modality === 'virtual' && typeof window !== 'undefined' && 'ontouchstart' in window) modality = 'pointer';\n  let description = onRemove && (modality === 'keyboard' || modality === 'virtual') ? stringFormatter.format('removeDescription') : '';\n  let descProps = (0, $ioKwR$useDescription)(description);\n  let isFocused = item.key === state.selectionManager.focusedKey;\n  // @ts-ignore - data attributes are ok but TS doesn't know about them.\n  let domProps = (0, $ioKwR$filterDOMProps)(item.props);\n  let linkProps = (0, $ioKwR$useSyntheticLinkProps)(item.props);\n  return {\n    removeButtonProps: {\n      'aria-label': stringFormatter.format('removeButtonLabel'),\n      'aria-labelledby': `${buttonId} ${rowProps.id}`,\n      isDisabled: state.disabledKeys.has(item.key) || item.props.isDisabled,\n      id: buttonId,\n      onPress: () => onRemove ? onRemove(new Set([item.key])) : null,\n      excludeFromTabOrder: true\n    },\n    rowProps: (0, $ioKwR$mergeProps)(rowProps, domProps, linkProps, {\n      tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,\n      onKeyDown: onRemove ? onKeyDown : undefined,\n      'aria-describedby': descProps['aria-describedby']\n    }),\n    gridCellProps: (0, $ioKwR$mergeProps)(gridCellProps, {\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-label': props['aria-label']\n    }),\n    ...stateWithoutDescription,\n    allowsRemoving: !!onRemove\n  };\n}\nexport { $fc6126c82a4601f1$export$3f568fff7dff2f03 as useTag };","map":{"version":3,"names":["$fc6126c82a4601f1$export$3f568fff7dff2f03","props","state","ref","item","stringFormatter","$ioKwR$useLocalizedStringFormatter","$parcel$interopDefault","$ioKwR$intlStringsmodulejs","buttonId","$ioKwR$useId","onRemove","$d7323bca8d074eeb$export$653eddfc964b0f8a","get","rowProps","gridCellProps","states","$ioKwR$useGridListItem","node","onKeyDownCapture","descriptionProps","_","stateWithoutDescription","onKeyDown","e","key","preventDefault","selectionManager","isSelected","Set","selectedKeys","modality","$ioKwR$useInteractionModality","window","description","format","descProps","$ioKwR$useDescription","isFocused","focusedKey","domProps","$ioKwR$filterDOMProps","linkProps","$ioKwR$useSyntheticLinkProps","removeButtonProps","id","isDisabled","disabledKeys","has","onPress","excludeFromTabOrder","$ioKwR$mergeProps","tabIndex","undefined","allowsRemoving"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/tag/dist/packages/@react-aria/tag/src/useTag.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes, FocusableElement, Node, RefObject} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useDescription, useId, useSyntheticLinkProps} from '@react-aria/utils';\nimport {hookData} from './useTagGroup';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {KeyboardEvent} from 'react';\nimport type {ListState} from '@react-stately/list';\nimport {SelectableItemStates} from '@react-aria/selection';\nimport {useGridListItem} from '@react-aria/gridlist';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\n\nexport interface TagAria extends Omit<SelectableItemStates, 'hasAction'> {\n  /** Props for the tag row element. */\n  rowProps: DOMAttributes,\n  /** Props for the tag cell element. */\n  gridCellProps: DOMAttributes,\n  /** Props for the tag remove button. */\n  removeButtonProps: AriaButtonProps,\n  /** Whether the tag can be removed. */\n  allowsRemoving: boolean\n}\n\nexport interface AriaTagProps<T> {\n  /** An object representing the tag. Contains all the relevant information that makes up the tag. */\n  item: Node<T>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a tag component.\n * @param props - Props to be applied to the tag.\n * @param state - State for the tag group, as returned by `useListState`.\n * @param ref - A ref to a DOM element for the tag.\n */\nexport function useTag<T>(props: AriaTagProps<T>, state: ListState<T>, ref: RefObject<FocusableElement | null>): TagAria {\n  let {item} = props;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/tag');\n  let buttonId = useId();\n\n  let {onRemove} = hookData.get(state) || {};\n  let {rowProps, gridCellProps, ...states} = useGridListItem({\n    node: item\n  }, state, ref);\n\n  // We want the group to handle keyboard navigation between tags.\n  delete rowProps.onKeyDownCapture;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {descriptionProps: _, ...stateWithoutDescription} = states;\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'Delete' || e.key === 'Backspace') {\n      e.preventDefault();\n      if (state.selectionManager.isSelected(item.key)) {\n        onRemove?.(new Set(state.selectionManager.selectedKeys));\n      } else {\n        onRemove?.(new Set([item.key]));\n      }\n    }\n  };\n\n  let modality = useInteractionModality();\n  if (modality === 'virtual' &&  (typeof window !== 'undefined' && 'ontouchstart' in window)) {\n    modality = 'pointer';\n  }\n  let description = onRemove && (modality === 'keyboard' || modality === 'virtual') ? stringFormatter.format('removeDescription') : '';\n  let descProps = useDescription(description);\n\n  let isFocused = item.key === state.selectionManager.focusedKey;\n  // @ts-ignore - data attributes are ok but TS doesn't know about them.\n  let domProps = filterDOMProps(item.props);\n  let linkProps = useSyntheticLinkProps(item.props);\n  return {\n    removeButtonProps: {\n      'aria-label': stringFormatter.format('removeButtonLabel'),\n      'aria-labelledby': `${buttonId} ${rowProps.id}`,\n      isDisabled: state.disabledKeys.has(item.key) || item.props.isDisabled,\n      id: buttonId,\n      onPress: () => onRemove ? onRemove(new Set([item.key])) : null,\n      excludeFromTabOrder: true\n    },\n    rowProps: mergeProps(rowProps, domProps, linkProps, {\n      tabIndex: (isFocused || state.selectionManager.focusedKey == null) ? 0 : -1,\n      onKeyDown: onRemove ? onKeyDown : undefined,\n      'aria-describedby': descProps['aria-describedby']\n    }),\n    gridCellProps: mergeProps(gridCellProps, {\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-label': props['aria-label']\n    }),\n    ...stateWithoutDescription,\n    allowsRemoving: !!onRemove\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}