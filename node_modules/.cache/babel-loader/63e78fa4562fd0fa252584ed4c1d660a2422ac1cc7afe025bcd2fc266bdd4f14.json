{"ast":null,"code":"import $8S3NB$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./vars.d26a2e16.css\";\nimport $8S3NB$inlinealert_vars_cssmodulejs from \"./inlinealert_vars_css.mjs\";\nimport $8S3NB$spectrumiconsuiAlertMedium from \"@spectrum-icons/ui/AlertMedium\";\nimport { useStyleProps as $8S3NB$useStyleProps, useDOMRef as $8S3NB$useDOMRef, classNames as $8S3NB$classNames, SlotProvider as $8S3NB$SlotProvider } from \"@react-spectrum/utils\";\nimport { filterDOMProps as $8S3NB$filterDOMProps } from \"@react-aria/utils\";\nimport { FocusRing as $8S3NB$FocusRing } from \"@react-aria/focus\";\nimport { Grid as $8S3NB$Grid } from \"@react-spectrum/layout\";\nimport $8S3NB$spectrumiconsuiInfoMedium from \"@spectrum-icons/ui/InfoMedium\";\nimport $8S3NB$react, { useRef as $8S3NB$useRef, useEffect as $8S3NB$useEffect } from \"react\";\nimport $8S3NB$spectrumiconsuiSuccessMedium from \"@spectrum-icons/ui/SuccessMedium\";\nimport { useLocalizedStringFormatter as $8S3NB$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useProviderProps as $8S3NB$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $abf1e6290496dda5$var$ICONS = {\n  info: (0, $8S3NB$spectrumiconsuiInfoMedium),\n  positive: (0, $8S3NB$spectrumiconsuiSuccessMedium),\n  notice: (0, $8S3NB$spectrumiconsuiAlertMedium),\n  negative: (0, $8S3NB$spectrumiconsuiAlertMedium)\n};\nfunction $abf1e6290496dda5$var$InlineAlert(props, ref) {\n  props = (0, $8S3NB$useProviderProps)(props);\n  let {\n    children: children,\n    variant = 'neutral',\n    autoFocus: autoFocus,\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $8S3NB$useStyleProps)(otherProps);\n  let domRef = (0, $8S3NB$useDOMRef)(ref);\n  let slots = {\n    heading: {\n      UNSAFE_className: (0, $parcel$interopDefault($8S3NB$inlinealert_vars_cssmodulejs))['spectrum-InLineAlert-heading']\n    },\n    content: {\n      UNSAFE_className: (0, $parcel$interopDefault($8S3NB$inlinealert_vars_cssmodulejs))['spectrum-InLineAlert-content']\n    }\n  };\n  let stringFormatter = (0, $8S3NB$useLocalizedStringFormatter)((0, $parcel$interopDefault($8S3NB$intlStringsmodulejs)), '@react-spectrum/inlinealert');\n  let Icon = null;\n  let iconAlt = '';\n  if (variant in $abf1e6290496dda5$var$ICONS) {\n    Icon = $abf1e6290496dda5$var$ICONS[variant];\n    iconAlt = stringFormatter.format(variant);\n  }\n  let autoFocusRef = (0, $8S3NB$useRef)(props.autoFocus);\n  (0, $8S3NB$useEffect)(() => {\n    if (autoFocusRef.current && domRef.current) domRef.current.focus();\n    autoFocusRef.current = false;\n  }, [domRef]);\n  return /*#__PURE__*/(0, $8S3NB$react).createElement((0, $8S3NB$FocusRing), {\n    focusRingClass: (0, $parcel$interopDefault($8S3NB$inlinealert_vars_cssmodulejs))['focus-ring']\n  }, /*#__PURE__*/(0, $8S3NB$react).createElement(\"div\", {\n    ...(0, $8S3NB$filterDOMProps)(props),\n    ...styleProps,\n    ref: domRef,\n    tabIndex: autoFocus ? -1 : undefined,\n    autoFocus: autoFocus,\n    className: (0, $8S3NB$classNames)((0, $parcel$interopDefault($8S3NB$inlinealert_vars_cssmodulejs)), 'spectrum-InLineAlert', `spectrum-InLineAlert--${variant}`, styleProps.className),\n    role: \"alert\"\n  }, /*#__PURE__*/(0, $8S3NB$react).createElement((0, $8S3NB$Grid), {\n    UNSAFE_className: (0, $parcel$interopDefault($8S3NB$inlinealert_vars_cssmodulejs))['spectrum-InLineAlert-grid']\n  }, /*#__PURE__*/(0, $8S3NB$react).createElement((0, $8S3NB$SlotProvider), {\n    slots: slots\n  }, Icon && /*#__PURE__*/(0, $8S3NB$react).createElement(Icon, {\n    UNSAFE_className: (0, $parcel$interopDefault($8S3NB$inlinealert_vars_cssmodulejs))['spectrum-InLineAlert-icon'],\n    \"aria-label\": iconAlt\n  }), children))));\n}\n/**\n * Inline alerts display a non-modal message associated with objects in a view.\n * These are often used in form validation, providing a place to aggregate feedback related to multiple fields.\n */\nconst $abf1e6290496dda5$export$a3b2c96db9b0eb71 = /*#__PURE__*/(0, $8S3NB$react).forwardRef($abf1e6290496dda5$var$InlineAlert);\nexport { $abf1e6290496dda5$export$a3b2c96db9b0eb71 as InlineAlert };","map":{"version":3,"names":["$abf1e6290496dda5$var$ICONS","info","$8S3NB$spectrumiconsuiInfoMedium","positive","$8S3NB$spectrumiconsuiSuccessMedium","notice","$8S3NB$spectrumiconsuiAlertMedium","negative","$abf1e6290496dda5$var$InlineAlert","props","ref","$8S3NB$useProviderProps","children","variant","autoFocus","otherProps","styleProps","$8S3NB$useStyleProps","domRef","$8S3NB$useDOMRef","slots","heading","UNSAFE_className","$parcel$interopDefault","$8S3NB$inlinealert_vars_cssmodulejs","content","stringFormatter","$8S3NB$useLocalizedStringFormatter","$8S3NB$intlStringsmodulejs","Icon","iconAlt","format","autoFocusRef","$8S3NB$useRef","$8S3NB$useEffect","current","focus","$8S3NB$react","createElement","$8S3NB$FocusRing","focusRingClass","$8S3NB$filterDOMProps","tabIndex","undefined","className","$8S3NB$classNames","role","$8S3NB$Grid","$8S3NB$SlotProvider","$abf1e6290496dda5$export$a3b2c96db9b0eb71","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/inlinealert/dist/packages/@react-spectrum/inlinealert/src/InlineAlert.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport {classNames, SlotProvider, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMProps, DOMRef, StyleProps} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {FocusRing} from '@react-aria/focus';\nimport {Grid} from '@react-spectrum/layout';\nimport InfoMedium from '@spectrum-icons/ui/InfoMedium';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {ReactNode, useEffect, useRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/inlinealert/vars.css';\nimport SuccessMedium from '@spectrum-icons/ui/SuccessMedium';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nexport interface SpectrumInlineAlertProps extends DOMProps, StyleProps {\n  /**\n   * The [visual style](https://spectrum.adobe.com/page/in-line-alert/#Options) of the Inline Alert.\n   * @default 'neutral'\n   */\n  variant?: 'neutral' | 'info' | 'positive' | 'notice' | 'negative',\n  /**\n   * The contents of the Inline Alert.\n   */\n  children: ReactNode,\n  /**\n   * Whether to automatically focus the Inline Alert when it first renders.\n   */\n  autoFocus?: boolean\n}\n\nlet ICONS = {\n  info: InfoMedium,\n  positive: SuccessMedium,\n  notice: AlertMedium,\n  negative: AlertMedium\n};\n\nfunction InlineAlert(props: SpectrumInlineAlertProps, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {\n    children,\n    variant = 'neutral',\n    autoFocus,\n    ...otherProps\n  } = props;\n\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n\n  let slots = {\n    heading: {UNSAFE_className: styles['spectrum-InLineAlert-heading']},\n    content: {UNSAFE_className: styles['spectrum-InLineAlert-content']}\n  };\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/inlinealert');\n  let Icon: typeof React.Component | null = null;\n  let iconAlt: string = '';\n  if (variant in ICONS) {\n    Icon = ICONS[variant];\n    iconAlt = stringFormatter.format(variant);\n  }\n\n  let autoFocusRef = useRef(props.autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current && domRef.current) {\n      domRef.current.focus();\n    }\n    autoFocusRef.current = false;\n  }, [domRef]);\n\n  return (\n    <FocusRing focusRingClass={styles['focus-ring']}>\n      <div\n        {...filterDOMProps(props)}\n        {...styleProps}\n        ref={domRef}\n        tabIndex={autoFocus ? -1 : undefined}\n        autoFocus={autoFocus}\n        className={classNames(\n          styles,\n          'spectrum-InLineAlert',\n          `spectrum-InLineAlert--${variant}`,\n          styleProps.className\n        )}\n        role=\"alert\">\n        <Grid UNSAFE_className={styles['spectrum-InLineAlert-grid']}>\n          <SlotProvider slots={slots}>\n            {Icon && <Icon UNSAFE_className={styles['spectrum-InLineAlert-icon']} aria-label={iconAlt} />}\n            {children}\n          </SlotProvider>\n        </Grid>\n      </div>\n    </FocusRing>\n  );\n}\n\n/**\n * Inline alerts display a non-modal message associated with objects in a view.\n * These are often used in form validation, providing a place to aggregate feedback related to multiple fields.\n */\nconst _InlineAlert = React.forwardRef(InlineAlert);\nexport {_InlineAlert as InlineAlert};\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AA2CA,IAAIA,2BAAA,GAAQ;EACVC,IAAA,GAAM,GAAAC,gCAAS;EACfC,QAAA,GAAU,GAAAC,mCAAY;EACtBC,MAAA,GAAQ,GAAAC,iCAAU;EAClBC,QAAA,GAAU,GAAAD,iCAAU;AACtB;AAEA,SAASE,kCAAYC,KAA+B,EAAEC,GAA2B;EAC/ED,KAAA,GAAQ,IAAAE,uBAAe,EAAEF,KAAA;EACzB,IAAI;IAAAG,QAAA,EACFA,QAAQ;IACRC,OAAA,GAAU;IAAAC,SAAA,EACVA,SAAS;IACT,GAAGC;EAAA,CACJ,GAAGN,KAAA;EAEJ,IAAI;IAAAO,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEF,UAAA;EACjC,IAAIG,MAAA,GAAS,IAAAC,gBAAQ,EAAET,GAAA;EAEvB,IAAIU,KAAA,GAAQ;IACVC,OAAA,EAAS;MAACC,gBAAA,EAAkB,IAAAC,sBAAA,CAAAC,mCAAA,CAAK,EAAE;IAA+B;IAClEC,OAAA,EAAS;MAACH,gBAAA,EAAkB,IAAAC,sBAAA,CAAAC,mCAAA,CAAK,EAAE;IAA+B;EACpE;EAEA,IAAIE,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAJ,sBAAA,CAAAK,0BAAA,CAAW,GAAG;EAChE,IAAIC,IAAA,GAAsC;EAC1C,IAAIC,OAAA,GAAkB;EACtB,IAAIjB,OAAA,IAAWb,2BAAA,EAAO;IACpB6B,IAAA,GAAO7B,2BAAK,CAACa,OAAA,CAAQ;IACrBiB,OAAA,GAAUJ,eAAA,CAAgBK,MAAM,CAAClB,OAAA;EACnC;EAEA,IAAImB,YAAA,GAAe,IAAAC,aAAK,EAAExB,KAAA,CAAMK,SAAS;EACzC,IAAAoB,gBAAQ,EAAE;IACR,IAAIF,YAAA,CAAaG,OAAO,IAAIjB,MAAA,CAAOiB,OAAO,EACxCjB,MAAA,CAAOiB,OAAO,CAACC,KAAK;IAEtBJ,YAAA,CAAaG,OAAO,GAAG;EACzB,GAAG,CAACjB,MAAA,CAAO;EAEX,oBACE,IAAAmB,YAAA,EAAAC,aAAA,EAAC,GAAAC,gBAAQ;IAAEC,cAAA,EAAgB,IAAAjB,sBAAA,CAAAC,mCAAA,CAAK,EAAE;kBAChC,IAAAa,YAAA,EAAAC,aAAA,CAAC;IACE,GAAG,IAAAG,qBAAa,EAAEhC,KAAA,CAAM;IACxB,GAAGO,UAAU;IACdN,GAAA,EAAKQ,MAAA;IACLwB,QAAA,EAAU5B,SAAA,GAAY,KAAK6B,SAAA;IAC3B7B,SAAA,EAAWA,SAAA;IACX8B,SAAA,EAAW,IAAAC,iBAAS,GAClB,GAAAtB,sBAAA,CAAAC,mCAAA,CAAK,GACL,wBACA,yBAAyBX,OAAA,EAAS,EAClCG,UAAA,CAAW4B,SAAS;IAEtBE,IAAA,EAAK;kBACL,IAAAT,YAAA,EAAAC,aAAA,EAAC,GAAAS,WAAG;IAAEzB,gBAAA,EAAkB,IAAAC,sBAAA,CAAAC,mCAAA,CAAK,EAAE;kBAC7B,IAAAa,YAAA,EAAAC,aAAA,EAAC,GAAAU,mBAAW;IAAE5B,KAAA,EAAOA;KAClBS,IAAA,iBAAQ,IAAAQ,YAAA,EAAAC,aAAA,CAACT,IAAA;IAAKP,gBAAA,EAAkB,IAAAC,sBAAA,CAAAC,mCAAA,CAAK,EAAE,4BAA4B;IAAE,cAAYM;MACjFlB,QAAA;AAMb;AAEA;;;;AAIA,MAAMqC,yCAAA,gBAAe,IAAAZ,YAAI,EAAEa,UAAU,CAAC1C,iCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}