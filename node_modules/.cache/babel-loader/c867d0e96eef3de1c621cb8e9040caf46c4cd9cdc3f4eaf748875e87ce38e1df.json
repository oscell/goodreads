{"ast":null,"code":"import { Dialog as $99cd51dc4eb569f7$export$3ddf2d174ce01153 } from \"./Dialog.mjs\";\nimport { DialogContext as $97b119e05830ea0d$export$8b93a07348a7730c } from \"./context.mjs\";\nimport $7TaMJ$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./vars.cfc79477.css\";\nimport $7TaMJ$dialog_vars_cssmodulejs from \"./dialog_vars_css.mjs\";\nimport $7TaMJ$spectrumiconsuiAlertMedium from \"@spectrum-icons/ui/AlertMedium\";\nimport { Button as $7TaMJ$Button } from \"@react-spectrum/button\";\nimport { ButtonGroup as $7TaMJ$ButtonGroup } from \"@react-spectrum/buttongroup\";\nimport { chain as $7TaMJ$chain } from \"@react-aria/utils\";\nimport { useStyleProps as $7TaMJ$useStyleProps, classNames as $7TaMJ$classNames } from \"@react-spectrum/utils\";\nimport { Content as $7TaMJ$Content } from \"@react-spectrum/view\";\nimport { Divider as $7TaMJ$Divider } from \"@react-spectrum/divider\";\nimport { Heading as $7TaMJ$Heading } from \"@react-spectrum/text\";\nimport $7TaMJ$react, { useContext as $7TaMJ$useContext, forwardRef as $7TaMJ$forwardRef } from \"react\";\nimport { useLocalizedStringFormatter as $7TaMJ$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n/**\n * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.\n */\nfunction $2a8395160fff9af3$var$AlertDialog(props, ref) {\n  let {\n    onClose = () => {}\n  } = (0, $7TaMJ$useContext)((0, $97b119e05830ea0d$export$8b93a07348a7730c)) || {};\n  let {\n    variant: variant,\n    children: children,\n    primaryActionLabel: primaryActionLabel,\n    secondaryActionLabel: secondaryActionLabel,\n    cancelLabel: cancelLabel,\n    autoFocusButton: autoFocusButton,\n    title: title,\n    isPrimaryActionDisabled: isPrimaryActionDisabled,\n    isSecondaryActionDisabled: isSecondaryActionDisabled,\n    onCancel = () => {},\n    onPrimaryAction = () => {},\n    onSecondaryAction = () => {},\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $7TaMJ$useStyleProps)(otherProps);\n  let stringFormatter = (0, $7TaMJ$useLocalizedStringFormatter)((0, $parcel$interopDefault($7TaMJ$intlStringsmodulejs)), '@react-spectrum/dialog');\n  let confirmVariant = 'primary';\n  if (variant) {\n    if (variant === 'confirmation') confirmVariant = 'cta';else if (variant === 'destructive') confirmVariant = 'negative';\n  }\n  return /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $99cd51dc4eb569f7$export$3ddf2d174ce01153), {\n    UNSAFE_style: styleProps.style,\n    UNSAFE_className: (0, $7TaMJ$classNames)((0, $parcel$interopDefault($7TaMJ$dialog_vars_cssmodulejs)), {\n      [`spectrum-Dialog--${variant}`]: variant\n    }, styleProps.className),\n    isHidden: styleProps.hidden,\n    size: \"M\",\n    role: \"alertdialog\",\n    ref: ref\n  }, /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$Heading), null, title), (variant === 'error' || variant === 'warning') && /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$spectrumiconsuiAlertMedium), {\n    slot: \"typeIcon\",\n    \"aria-label\": stringFormatter.format('alert')\n  }), /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$Divider), null), /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$Content), null, children), /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$ButtonGroup), {\n    align: \"end\"\n  }, cancelLabel && /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$Button), {\n    variant: \"secondary\",\n    onPress: () => (0, $7TaMJ$chain)(onClose(), onCancel()),\n    autoFocus: autoFocusButton === 'cancel'\n  }, cancelLabel), secondaryActionLabel && /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$Button), {\n    variant: \"secondary\",\n    onPress: () => (0, $7TaMJ$chain)(onClose(), onSecondaryAction()),\n    isDisabled: isSecondaryActionDisabled,\n    autoFocus: autoFocusButton === 'secondary'\n  }, secondaryActionLabel), /*#__PURE__*/(0, $7TaMJ$react).createElement((0, $7TaMJ$Button), {\n    variant: confirmVariant,\n    onPress: () => (0, $7TaMJ$chain)(onClose(), onPrimaryAction()),\n    isDisabled: isPrimaryActionDisabled,\n    autoFocus: autoFocusButton === 'primary'\n  }, primaryActionLabel)));\n}\n/**\n * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.\n */\nlet $2a8395160fff9af3$export$de466dd8317b0b75 = /*#__PURE__*/(0, $7TaMJ$forwardRef)($2a8395160fff9af3$var$AlertDialog);\nexport { $2a8395160fff9af3$export$de466dd8317b0b75 as AlertDialog };","map":{"version":3,"names":["$2a8395160fff9af3$var$AlertDialog","props","ref","onClose","$7TaMJ$useContext","$97b119e05830ea0d$export$8b93a07348a7730c","variant","children","primaryActionLabel","secondaryActionLabel","cancelLabel","autoFocusButton","title","isPrimaryActionDisabled","isSecondaryActionDisabled","onCancel","onPrimaryAction","onSecondaryAction","otherProps","styleProps","$7TaMJ$useStyleProps","stringFormatter","$7TaMJ$useLocalizedStringFormatter","$parcel$interopDefault","$7TaMJ$intlStringsmodulejs","confirmVariant","$7TaMJ$react","createElement","$99cd51dc4eb569f7$export$3ddf2d174ce01153","UNSAFE_style","style","UNSAFE_className","$7TaMJ$classNames","$7TaMJ$dialog_vars_cssmodulejs","className","isHidden","hidden","size","role","$7TaMJ$Heading","$7TaMJ$spectrumiconsuiAlertMedium","slot","format","$7TaMJ$Divider","$7TaMJ$Content","$7TaMJ$ButtonGroup","align","$7TaMJ$Button","onPress","$7TaMJ$chain","autoFocus","isDisabled","$2a8395160fff9af3$export$de466dd8317b0b75","$7TaMJ$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/dialog/dist/packages/@react-spectrum/dialog/src/AlertDialog.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport {Button} from '@react-spectrum/button';\nimport {ButtonGroup} from '@react-spectrum/buttongroup';\nimport {chain} from '@react-aria/utils';\nimport {classNames, useStyleProps} from '@react-spectrum/utils';\nimport {Content} from '@react-spectrum/view';\nimport {Dialog} from './Dialog';\nimport {DialogContext, DialogContextValue} from './context';\nimport {Divider} from '@react-spectrum/divider';\nimport {DOMRef} from '@react-types/shared';\nimport {Heading} from '@react-spectrum/text';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {forwardRef, useContext} from 'react';\nimport {SpectrumAlertDialogProps} from '@react-types/dialog';\nimport {SpectrumButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/dialog/vars.css';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\n/**\n * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.\n */\nfunction AlertDialog(props: SpectrumAlertDialogProps, ref: DOMRef) {\n  let {\n    onClose = () => {}\n  } = useContext(DialogContext) || {} as DialogContextValue;\n\n  let {\n    variant,\n    children,\n    primaryActionLabel,\n    secondaryActionLabel,\n    cancelLabel,\n    autoFocusButton,\n    title,\n    isPrimaryActionDisabled,\n    isSecondaryActionDisabled,\n    onCancel = () => {},\n    onPrimaryAction = () => {},\n    onSecondaryAction = () => {},\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/dialog');\n\n  let confirmVariant: SpectrumButtonProps['variant'] = 'primary';\n  if (variant) {\n    if (variant === 'confirmation') {\n      confirmVariant = 'cta';\n    } else if (variant === 'destructive') {\n      confirmVariant = 'negative';\n    }\n  }\n\n  return (\n    <Dialog\n      UNSAFE_style={styleProps.style}\n      UNSAFE_className={classNames(styles, {[`spectrum-Dialog--${variant}`]: variant}, styleProps.className)}\n      isHidden={styleProps.hidden}\n      size=\"M\"\n      role=\"alertdialog\"\n      ref={ref}>\n      <Heading>{title}</Heading>\n      {(variant === 'error' || variant === 'warning') &&\n        <AlertMedium\n          slot=\"typeIcon\"\n          aria-label={stringFormatter.format('alert')} />\n      }\n      <Divider />\n      <Content>{children}</Content>\n      <ButtonGroup align=\"end\">\n        {cancelLabel &&\n          <Button\n            variant=\"secondary\"\n            onPress={() => chain(onClose(), onCancel())}\n            autoFocus={autoFocusButton === 'cancel'}>\n            {cancelLabel}\n          </Button>\n        }\n        {secondaryActionLabel &&\n          <Button\n            variant=\"secondary\"\n            onPress={() => chain(onClose(), onSecondaryAction())}\n            isDisabled={isSecondaryActionDisabled}\n            autoFocus={autoFocusButton === 'secondary'}>\n            {secondaryActionLabel}\n          </Button>\n        }\n        <Button\n          variant={confirmVariant}\n          onPress={() => chain(onClose(), onPrimaryAction())}\n          isDisabled={isPrimaryActionDisabled}\n          autoFocus={autoFocusButton === 'primary'}>\n          {primaryActionLabel}\n        </Button>\n      </ButtonGroup>\n    </Dialog>\n  );\n}\n\n/**\n * AlertDialogs are a specific type of Dialog. They display important information that users need to acknowledge.\n */\nlet _AlertDialog = forwardRef(AlertDialog);\nexport {_AlertDialog as AlertDialog};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}