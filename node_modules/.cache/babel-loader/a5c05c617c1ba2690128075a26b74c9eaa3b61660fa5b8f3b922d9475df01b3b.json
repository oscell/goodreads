{"ast":null,"code":"import { useNumberField as $5aC6d$useNumberField } from \"@react-aria/numberfield\";\nimport { useLocale as $5aC6d$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $5e632d1ff0188f00$export$e55dd820142d3131(props, state, inputRef) {\n  let {\n    locale: locale\n  } = (0, $5aC6d$useLocale)();\n  return (0, $5aC6d$useNumberField)({\n    ...props,\n    value: undefined,\n    defaultValue: undefined,\n    onChange: undefined,\n    validate: undefined,\n    // Provide a default aria-label if no other label is provided.\n    'aria-label': props['aria-label'] || (props.label || props['aria-labelledby'] ? undefined : state.colorValue.getChannelName(props.channel, locale))\n  }, state, inputRef);\n}\nexport { $5e632d1ff0188f00$export$e55dd820142d3131 as useColorChannelField };","map":{"version":3,"names":["$5e632d1ff0188f00$export$e55dd820142d3131","props","state","inputRef","locale","$5aC6d$useLocale","$5aC6d$useNumberField","value","undefined","defaultValue","onChange","validate","label","colorValue","getChannelName","channel"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-aria/color/dist/packages/@react-aria/color/src/useColorChannelField.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, RefObject} from '@react-types/shared';\nimport {ColorChannelFieldProps, ColorChannelFieldState} from '@react-stately/color';\nimport {NumberFieldAria, useNumberField} from '@react-aria/numberfield';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface AriaColorChannelFieldProps extends ColorChannelFieldProps, AriaLabelingProps {}\nexport interface ColorChannelFieldAria extends NumberFieldAria {}\n\n/**\n * Provides the behavior and accessibility implementation for a color channel field, allowing users to edit the\n * value of an individual color channel.\n */\nexport function useColorChannelField(props: AriaColorChannelFieldProps, state: ColorChannelFieldState, inputRef: RefObject<HTMLInputElement | null>): ColorChannelFieldAria {\n  let {locale} = useLocale();\n  return useNumberField({\n    ...props,\n    value: undefined,\n    defaultValue: undefined,\n    onChange: undefined,\n    validate: undefined,\n    // Provide a default aria-label if no other label is provided.\n    'aria-label': props['aria-label'] || (props.label || props['aria-labelledby'] ? undefined : state.colorValue.getChannelName(props.channel, locale))\n  }, state, inputRef);\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAwBO,SAASA,0CAAqBC,KAAiC,EAAEC,KAA6B,EAAEC,QAA4C;EACjJ,IAAI;IAAAC,MAAA,EAACA;EAAM,CAAC,GAAG,IAAAC,gBAAQ;EACvB,OAAO,IAAAC,qBAAa,EAAE;IACpB,GAAGL,KAAK;IACRM,KAAA,EAAOC,SAAA;IACPC,YAAA,EAAcD,SAAA;IACdE,QAAA,EAAUF,SAAA;IACVG,QAAA,EAAUH,SAAA;IACV;IACA,cAAcP,KAAK,CAAC,aAAa,KAAKA,KAAA,CAAMW,KAAK,IAAIX,KAAK,CAAC,kBAAkB,GAAGO,SAAA,GAAYN,KAAA,CAAMW,UAAU,CAACC,cAAc,CAACb,KAAA,CAAMc,OAAO,EAAEX,MAAA,CAAM;EACnJ,GAAGF,KAAA,EAAOC,QAAA;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}