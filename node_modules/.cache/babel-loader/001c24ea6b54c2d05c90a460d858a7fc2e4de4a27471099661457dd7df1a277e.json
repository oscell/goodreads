{"ast":null,"code":"import { TooltipContext as $b8c00169fae46ac7$export$39ae08fa83328b12 } from \"./context.mjs\";\nimport { FocusableProvider as $cQFGy$FocusableProvider } from \"@react-aria/focus\";\nimport { Overlay as $cQFGy$Overlay } from \"@react-spectrum/overlays\";\nimport $cQFGy$react, { useRef as $cQFGy$useRef, useState as $cQFGy$useState } from \"react\";\nimport { useLayoutEffect as $cQFGy$useLayoutEffect } from \"@react-aria/utils\";\nimport { useOverlayPosition as $cQFGy$useOverlayPosition } from \"@react-aria/overlays\";\nimport { useTooltipTrigger as $cQFGy$useTooltipTrigger } from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState as $cQFGy$useTooltipTriggerState } from \"@react-stately/tooltip\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $019364e6919ef1db$var$DEFAULT_OFFSET = -1; // Offset needed to reach 4px/5px (med/large) distance between tooltip and trigger button\nconst $019364e6919ef1db$var$DEFAULT_CROSS_OFFSET = 0;\nfunction $019364e6919ef1db$var$TooltipTrigger(props) {\n  let {\n    children: children,\n    crossOffset = $019364e6919ef1db$var$DEFAULT_CROSS_OFFSET,\n    isDisabled: isDisabled,\n    offset = $019364e6919ef1db$var$DEFAULT_OFFSET,\n    trigger: triggerAction\n  } = props;\n  let [trigger, tooltip] = (0, $cQFGy$react).Children.toArray(children);\n  let state = (0, $cQFGy$useTooltipTriggerState)(props);\n  let tooltipTriggerRef = (0, $cQFGy$useRef)(undefined);\n  let overlayRef = (0, $cQFGy$useRef)(undefined);\n  let {\n    triggerProps: triggerProps,\n    tooltipProps: tooltipProps\n  } = (0, $cQFGy$useTooltipTrigger)({\n    isDisabled: isDisabled,\n    trigger: triggerAction\n  }, state, tooltipTriggerRef);\n  let [borderRadius, setBorderRadius] = (0, $cQFGy$useState)(0);\n  (0, $cQFGy$useLayoutEffect)(() => {\n    if (overlayRef.current && state.isOpen) {\n      let spectrumBorderRadius = window.getComputedStyle(overlayRef.current).borderRadius;\n      if (spectrumBorderRadius !== '') setBorderRadius(parseInt(spectrumBorderRadius, 10));\n    }\n  }, [state.isOpen, overlayRef]);\n  let arrowRef = (0, $cQFGy$useRef)(null);\n  let [arrowWidth, setArrowWidth] = (0, $cQFGy$useState)(0);\n  (0, $cQFGy$useLayoutEffect)(() => {\n    if (arrowRef.current && state.isOpen) setArrowWidth(arrowRef.current.getBoundingClientRect().width);\n  }, [state.isOpen, arrowRef]);\n  let {\n    overlayProps: overlayProps,\n    arrowProps: arrowProps,\n    placement: placement\n  } = (0, $cQFGy$useOverlayPosition)({\n    placement: props.placement || 'top',\n    targetRef: tooltipTriggerRef,\n    overlayRef: overlayRef,\n    offset: offset,\n    crossOffset: crossOffset,\n    isOpen: state.isOpen,\n    shouldFlip: props.shouldFlip,\n    containerPadding: props.containerPadding,\n    arrowSize: arrowWidth,\n    arrowBoundaryOffset: borderRadius,\n    onClose: () => state.close(true)\n  });\n  return /*#__PURE__*/(0, $cQFGy$react).createElement((0, $cQFGy$FocusableProvider), {\n    ...triggerProps,\n    ref: tooltipTriggerRef\n  }, trigger, /*#__PURE__*/(0, $cQFGy$react).createElement((0, $b8c00169fae46ac7$export$39ae08fa83328b12).Provider, {\n    value: {\n      state: state,\n      placement: placement,\n      ref: overlayRef,\n      UNSAFE_style: overlayProps.style,\n      arrowProps: arrowProps,\n      arrowRef: arrowRef,\n      ...tooltipProps\n    }\n  }, /*#__PURE__*/(0, $cQFGy$react).createElement((0, $cQFGy$Overlay), {\n    isOpen: state.isOpen,\n    nodeRef: overlayRef\n  }, tooltip)));\n}\n// Support TooltipTrigger inside components using CollectionBuilder.\n$019364e6919ef1db$var$TooltipTrigger.getCollectionNode = function* (props) {\n  // Replaced the use of React.Children.toArray because it mutates the key prop.\n  let childArray = [];\n  (0, $cQFGy$react).Children.forEach(props.children, child => {\n    if (/*#__PURE__*/(0, $cQFGy$react).isValidElement(child)) childArray.push(child);\n  });\n  let [trigger, tooltip] = childArray;\n  yield {\n    element: trigger,\n    wrapper: element => /*#__PURE__*/(0, $cQFGy$react).createElement($019364e6919ef1db$var$TooltipTrigger, {\n      key: element.key,\n      ...props\n    }, element, tooltip)\n  };\n};\n/**\n * TooltipTrigger wraps around a trigger element and a Tooltip. It handles opening and closing\n * the Tooltip when the user hovers over or focuses the trigger, and positioning the Tooltip\n * relative to the trigger.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $019364e6919ef1db$export$8c610744efcf8a1d = $019364e6919ef1db$var$TooltipTrigger;\nexport { $019364e6919ef1db$export$8c610744efcf8a1d as TooltipTrigger };","map":{"version":3,"names":["$019364e6919ef1db$var$DEFAULT_OFFSET","$019364e6919ef1db$var$DEFAULT_CROSS_OFFSET","$019364e6919ef1db$var$TooltipTrigger","props","children","crossOffset","isDisabled","offset","trigger","triggerAction","tooltip","$cQFGy$react","Children","toArray","state","$cQFGy$useTooltipTriggerState","tooltipTriggerRef","$cQFGy$useRef","undefined","overlayRef","triggerProps","tooltipProps","$cQFGy$useTooltipTrigger","borderRadius","setBorderRadius","$cQFGy$useState","$cQFGy$useLayoutEffect","current","isOpen","spectrumBorderRadius","window","getComputedStyle","parseInt","arrowRef","arrowWidth","setArrowWidth","getBoundingClientRect","width","overlayProps","arrowProps","placement","$cQFGy$useOverlayPosition","targetRef","shouldFlip","containerPadding","arrowSize","arrowBoundaryOffset","onClose","close","createElement","$cQFGy$FocusableProvider","ref","$b8c00169fae46ac7$export$39ae08fa83328b12","Provider","value","UNSAFE_style","style","$cQFGy$Overlay","nodeRef","getCollectionNode","childArray","forEach","child","isValidElement","push","element","wrapper","key","$019364e6919ef1db$export$8c610744efcf8a1d"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/tooltip/dist/packages/@react-spectrum/tooltip/src/TooltipTrigger.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableProvider} from '@react-aria/focus';\nimport {Overlay} from '@react-spectrum/overlays';\nimport React, {JSX, ReactElement, useRef, useState} from 'react';\nimport {SpectrumTooltipTriggerProps} from '@react-types/tooltip';\nimport {TooltipContext} from './context';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {useOverlayPosition} from '@react-aria/overlays';\nimport {useTooltipTrigger} from '@react-aria/tooltip';\nimport {useTooltipTriggerState} from '@react-stately/tooltip';\n\nconst DEFAULT_OFFSET = -1; // Offset needed to reach 4px/5px (med/large) distance between tooltip and trigger button\nconst DEFAULT_CROSS_OFFSET = 0;\n\nfunction TooltipTrigger(props: SpectrumTooltipTriggerProps) {\n  let {\n    children,\n    crossOffset = DEFAULT_CROSS_OFFSET,\n    isDisabled,\n    offset = DEFAULT_OFFSET,\n    trigger: triggerAction\n  } = props;\n\n  let [trigger, tooltip] = React.Children.toArray(children) as [ReactElement, ReactElement];\n  let state = useTooltipTriggerState(props);\n\n  let tooltipTriggerRef = useRef<HTMLElement>(undefined);\n  let overlayRef = useRef<HTMLDivElement>(undefined);\n\n  let {triggerProps, tooltipProps} = useTooltipTrigger({\n    isDisabled,\n    trigger: triggerAction\n  }, state, tooltipTriggerRef);\n\n  let [borderRadius, setBorderRadius] = useState(0);\n  useLayoutEffect(() => {\n    if (overlayRef.current && state.isOpen) {\n      let spectrumBorderRadius = window.getComputedStyle(overlayRef.current).borderRadius;\n      if (spectrumBorderRadius !== '') {\n        setBorderRadius(parseInt(spectrumBorderRadius, 10));\n      }\n    }\n  }, [state.isOpen, overlayRef]);\n  let arrowRef = useRef(null);\n  let [arrowWidth, setArrowWidth] = useState(0);\n  useLayoutEffect(() => {\n    if (arrowRef.current && state.isOpen) {\n      setArrowWidth(arrowRef.current.getBoundingClientRect().width);\n    }\n  }, [state.isOpen, arrowRef]);\n\n  let {overlayProps, arrowProps, placement} = useOverlayPosition({\n    placement: props.placement || 'top',\n    targetRef: tooltipTriggerRef,\n    overlayRef,\n    offset,\n    crossOffset,\n    isOpen: state.isOpen,\n    shouldFlip: props.shouldFlip,\n    containerPadding: props.containerPadding,\n    arrowSize: arrowWidth,\n    arrowBoundaryOffset: borderRadius,\n    onClose: () => state.close(true)\n  });\n\n  return (\n    <FocusableProvider\n      {...triggerProps}\n      ref={tooltipTriggerRef}>\n      {trigger}\n      <TooltipContext.Provider\n        value={{\n          state,\n          placement,\n          ref: overlayRef,\n          UNSAFE_style: overlayProps.style,\n          arrowProps,\n          arrowRef: arrowRef,\n          ...tooltipProps\n        }}>\n        <Overlay isOpen={state.isOpen} nodeRef={overlayRef}>\n          {tooltip}\n        </Overlay>\n      </TooltipContext.Provider>\n    </FocusableProvider>\n  );\n}\n\n// Support TooltipTrigger inside components using CollectionBuilder.\nTooltipTrigger.getCollectionNode = function* (props: SpectrumTooltipTriggerProps) {\n  // Replaced the use of React.Children.toArray because it mutates the key prop.\n  let childArray: ReactElement[] = [];\n  React.Children.forEach(props.children, child => {\n    if (React.isValidElement(child)) {\n      childArray.push(child);\n    }\n  });\n  let [trigger, tooltip] = childArray;\n  yield {\n    element: trigger,\n    wrapper: (element) => (\n      <TooltipTrigger key={element.key} {...props}>\n        {element}\n        {tooltip}\n      </TooltipTrigger>\n    )\n  };\n};\n\n/**\n * TooltipTrigger wraps around a trigger element and a Tooltip. It handles opening and closing\n * the Tooltip when the user hovers over or focuses the trigger, and positioning the Tooltip\n * relative to the trigger.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TooltipTrigger = TooltipTrigger as (props: SpectrumTooltipTriggerProps) => JSX.Element;\nexport {_TooltipTrigger as TooltipTrigger};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}