{"ast":null,"code":"import { DEFAULT_SLOT as $64fa3d84918910a7$export$c62b8e45d58ddad9, Provider as $64fa3d84918910a7$export$2881499e37b75b9a, useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415 } from \"./utils.mjs\";\nimport { HeadingContext as $4e85f108e88277b8$export$d688439359537581 } from \"./RSPContexts.mjs\";\nimport { PopoverContext as $07b14b47974efb58$export$9b9a0cd73afb7ca4 } from \"./Popover.mjs\";\nimport { useOverlayTrigger as $6IYYA$useOverlayTrigger, useId as $6IYYA$useId, useDialog as $6IYYA$useDialog } from \"react-aria\";\nimport { filterDOMProps as $6IYYA$filterDOMProps } from \"@react-aria/utils\";\nimport { useOverlayTriggerState as $6IYYA$useOverlayTriggerState } from \"react-stately\";\nimport { PressResponder as $6IYYA$PressResponder } from \"@react-aria/interactions\";\nimport $6IYYA$react, { createContext as $6IYYA$createContext, useRef as $6IYYA$useRef, useContext as $6IYYA$useContext, forwardRef as $6IYYA$forwardRef } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $de32f1b87079253c$export$8b93a07348a7730c = /*#__PURE__*/(0, $6IYYA$createContext)(null);\nconst $de32f1b87079253c$export$d2f961adcb0afbe = /*#__PURE__*/(0, $6IYYA$createContext)(null);\nfunction $de32f1b87079253c$export$2e1e1122cf0cba88(props) {\n  let state = (0, $6IYYA$useOverlayTriggerState)(props);\n  let buttonRef = (0, $6IYYA$useRef)(null);\n  let {\n    triggerProps: triggerProps,\n    overlayProps: overlayProps\n  } = (0, $6IYYA$useOverlayTrigger)({\n    type: 'dialog'\n  }, state, buttonRef);\n  // Label dialog by the trigger as a fallback if there is no title slot.\n  // This is done in RAC instead of hooks because otherwise we cannot distinguish\n  // between context and props. Normally aria-labelledby overrides the title\n  // but when sent by context we want the title to win.\n  triggerProps.id = (0, $6IYYA$useId)();\n  overlayProps['aria-labelledby'] = triggerProps.id;\n  return /*#__PURE__*/(0, $6IYYA$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[$de32f1b87079253c$export$d2f961adcb0afbe, state], [$de32f1b87079253c$export$8b93a07348a7730c, overlayProps], [(0, $07b14b47974efb58$export$9b9a0cd73afb7ca4), {\n      trigger: 'DialogTrigger',\n      triggerRef: buttonRef\n    }]]\n  }, /*#__PURE__*/(0, $6IYYA$react).createElement((0, $6IYYA$PressResponder), {\n    ...triggerProps,\n    ref: buttonRef,\n    isPressed: state.isOpen\n  }, props.children));\n}\nfunction $de32f1b87079253c$var$Dialog(props, ref) {\n  let originalAriaLabelledby = props['aria-labelledby'];\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $de32f1b87079253c$export$8b93a07348a7730c);\n  let {\n    dialogProps: dialogProps,\n    titleProps: titleProps\n  } = (0, $6IYYA$useDialog)({\n    ...props,\n    // Only pass aria-labelledby from props, not context.\n    // Context is used as a fallback below.\n    'aria-labelledby': originalAriaLabelledby\n  }, ref);\n  let state = (0, $6IYYA$useContext)($de32f1b87079253c$export$d2f961adcb0afbe);\n  let children = props.children;\n  if (typeof children === 'function') children = children({\n    close: (state === null || state === void 0 ? void 0 : state.close) || (() => {})\n  });\n  if (!dialogProps['aria-label'] && !dialogProps['aria-labelledby']) {\n    // If aria-labelledby exists on props, we know it came from context.\n    // Use that as a fallback in case there is no title slot.\n    if (props['aria-labelledby']) dialogProps['aria-labelledby'] = props['aria-labelledby'];else console.warn('If a Dialog does not contain a <Heading slot=\"title\">, it must have an aria-label or aria-labelledby attribute for accessibility.');\n  }\n  var _props_className;\n  return /*#__PURE__*/(0, $6IYYA$react).createElement(\"section\", {\n    ...(0, $6IYYA$filterDOMProps)(props),\n    ...dialogProps,\n    ref: ref,\n    slot: props.slot || undefined,\n    style: props.style,\n    className: (_props_className = props.className) !== null && _props_className !== void 0 ? _props_className : 'react-aria-Dialog'\n  }, /*#__PURE__*/(0, $6IYYA$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $4e85f108e88277b8$export$d688439359537581), {\n      slots: {\n        [(0, $64fa3d84918910a7$export$c62b8e45d58ddad9)]: {},\n        title: {\n          ...titleProps,\n          level: 2\n        }\n      }\n    }]]\n  }, children));\n}\n/**\n * A dialog is an overlay shown above other content in an application.\n */\nconst $de32f1b87079253c$export$3ddf2d174ce01153 = /*#__PURE__*/(0, $6IYYA$forwardRef)($de32f1b87079253c$var$Dialog);\nexport { $de32f1b87079253c$export$8b93a07348a7730c as DialogContext, $de32f1b87079253c$export$d2f961adcb0afbe as OverlayTriggerStateContext, $de32f1b87079253c$export$2e1e1122cf0cba88 as DialogTrigger, $de32f1b87079253c$export$3ddf2d174ce01153 as Dialog };","map":{"version":3,"names":["$de32f1b87079253c$export$8b93a07348a7730c","$6IYYA$createContext","$de32f1b87079253c$export$d2f961adcb0afbe","$de32f1b87079253c$export$2e1e1122cf0cba88","props","state","$6IYYA$useOverlayTriggerState","buttonRef","$6IYYA$useRef","triggerProps","overlayProps","$6IYYA$useOverlayTrigger","type","id","$6IYYA$useId","$6IYYA$react","createElement","$64fa3d84918910a7$export$2881499e37b75b9a","values","$07b14b47974efb58$export$9b9a0cd73afb7ca4","trigger","triggerRef","$6IYYA$PressResponder","ref","isPressed","isOpen","children","$de32f1b87079253c$var$Dialog","originalAriaLabelledby","$64fa3d84918910a7$export$29f1550f4b0d4415","dialogProps","titleProps","$6IYYA$useDialog","$6IYYA$useContext","close","console","warn","_props_className","$6IYYA$filterDOMProps","slot","undefined","style","className","$4e85f108e88277b8$export$d688439359537581","slots","$64fa3d84918910a7$export$c62b8e45d58ddad9","title","level","$de32f1b87079253c$export$3ddf2d174ce01153","$6IYYA$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/Dialog.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {AriaDialogProps, useDialog, useId, useOverlayTrigger} from 'react-aria';\nimport {ContextValue, DEFAULT_SLOT, Provider, SlotProps, StyleProps, useContextProps} from './utils';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {forwardRefType} from '@react-types/shared';\nimport {HeadingContext} from './RSPContexts';\nimport {OverlayTriggerProps, OverlayTriggerState, useOverlayTriggerState} from 'react-stately';\nimport {PopoverContext} from './Popover';\nimport {PressResponder} from '@react-aria/interactions';\nimport React, {createContext, ForwardedRef, forwardRef, ReactNode, useContext, useRef} from 'react';\n\nexport interface DialogTriggerProps extends OverlayTriggerProps {\n  children: ReactNode\n}\n\ninterface DialogRenderProps {\n  close: () => void\n}\n\nexport interface DialogProps extends AriaDialogProps, StyleProps, SlotProps {\n  /** Children of the dialog. A function may be provided to access a function to close the dialog. */\n  children?: ReactNode | ((opts: DialogRenderProps) => ReactNode)\n}\n\nexport const DialogContext = createContext<ContextValue<DialogProps, HTMLElement>>(null);\nexport const OverlayTriggerStateContext = createContext<OverlayTriggerState | null>(null);\n\n/**\n * A DialogTrigger opens a dialog when a trigger element is pressed.\n */\nexport function DialogTrigger(props: DialogTriggerProps) {\n  let state = useOverlayTriggerState(props);\n\n  let buttonRef = useRef<HTMLButtonElement>(null);\n  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state, buttonRef);\n\n  // Label dialog by the trigger as a fallback if there is no title slot.\n  // This is done in RAC instead of hooks because otherwise we cannot distinguish\n  // between context and props. Normally aria-labelledby overrides the title\n  // but when sent by context we want the title to win.\n  triggerProps.id = useId();\n  overlayProps['aria-labelledby'] = triggerProps.id;\n\n  return (\n    <Provider\n      values={[\n        [OverlayTriggerStateContext, state],\n        [DialogContext, overlayProps],\n        [PopoverContext, {trigger: 'DialogTrigger', triggerRef: buttonRef}]\n      ]}>\n      <PressResponder {...triggerProps} ref={buttonRef} isPressed={state.isOpen}>\n        {props.children}\n      </PressResponder>\n    </Provider>\n  );\n}\n\nfunction Dialog(props: DialogProps, ref: ForwardedRef<HTMLElement>) {\n  let originalAriaLabelledby = props['aria-labelledby'];\n  [props, ref] = useContextProps(props, ref, DialogContext);\n  let {dialogProps, titleProps} = useDialog({\n    ...props,\n    // Only pass aria-labelledby from props, not context.\n    // Context is used as a fallback below.\n    'aria-labelledby': originalAriaLabelledby\n  }, ref);\n  let state = useContext(OverlayTriggerStateContext);\n\n  let children = props.children;\n  if (typeof children === 'function') {\n    children = children({\n      close: state?.close || (() => {})\n    });\n  }\n\n  if (!dialogProps['aria-label'] && !dialogProps['aria-labelledby']) {\n    // If aria-labelledby exists on props, we know it came from context.\n    // Use that as a fallback in case there is no title slot.\n    if (props['aria-labelledby']) {\n      dialogProps['aria-labelledby'] = props['aria-labelledby'];\n    } else {\n      console.warn('If a Dialog does not contain a <Heading slot=\"title\">, it must have an aria-label or aria-labelledby attribute for accessibility.');\n    }\n  }\n\n  return (\n    <section\n      {...filterDOMProps(props)}\n      {...dialogProps}\n      ref={ref}\n      slot={props.slot || undefined}\n      style={props.style}\n      className={props.className ?? 'react-aria-Dialog'}>\n      <Provider\n        values={[\n          [HeadingContext, {\n            slots: {\n              [DEFAULT_SLOT]: {},\n              title: {...titleProps, level: 2}\n            }\n          }]\n        ]}>\n        {children}\n      </Provider>\n    </section>\n  );\n}\n\n/**\n * A dialog is an overlay shown above other content in an application.\n */\nconst _Dialog = /*#__PURE__*/ (forwardRef as forwardRefType)(Dialog);\nexport {_Dialog as Dialog};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}