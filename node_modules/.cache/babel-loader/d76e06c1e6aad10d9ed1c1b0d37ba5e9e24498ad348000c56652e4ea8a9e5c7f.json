{"ast":null,"code":"import $jTkY3$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./vars.f5ba1a45.css\";\nimport $jTkY3$tags_vars_cssmodulejs from \"./tags_vars_css.mjs\";\nimport { Tag as $b5f5ee35d3b6b95c$export$3288d34c523a1192 } from \"./Tag.mjs\";\nimport { ActionButton as $jTkY3$ActionButton } from \"@react-spectrum/button\";\nimport { useTagGroup as $jTkY3$useTagGroup } from \"@react-aria/tag\";\nimport { useDOMRef as $jTkY3$useDOMRef, classNames as $jTkY3$classNames } from \"@react-spectrum/utils\";\nimport { Field as $jTkY3$Field } from \"@react-spectrum/label\";\nimport { FocusScope as $jTkY3$FocusScope, FocusRing as $jTkY3$FocusRing } from \"@react-aria/focus\";\nimport { useListState as $jTkY3$useListState, ListCollection as $jTkY3$ListCollection } from \"@react-stately/list\";\nimport { ListKeyboardDelegate as $jTkY3$ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { useProviderProps as $jTkY3$useProviderProps, useProvider as $jTkY3$useProvider, Provider as $jTkY3$Provider } from \"@react-spectrum/provider\";\nimport $jTkY3$react, { useRef as $jTkY3$useRef, useState as $jTkY3$useState, useMemo as $jTkY3$useMemo, useCallback as $jTkY3$useCallback, useEffect as $jTkY3$useEffect } from \"react\";\nimport { useFormProps as $jTkY3$useFormProps } from \"@react-spectrum/form\";\nimport { useValueEffect as $jTkY3$useValueEffect, useId as $jTkY3$useId, useResizeObserver as $jTkY3$useResizeObserver, useLayoutEffect as $jTkY3$useLayoutEffect } from \"@react-aria/utils\";\nimport { useLocale as $jTkY3$useLocale, useLocalizedStringFormatter as $jTkY3$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $880d112c7a588209$var$TAG_STYLES = {\n  medium: {\n    height: 24,\n    margin: 4\n  },\n  large: {\n    height: 30,\n    margin: 5\n  }\n};\nfunction $880d112c7a588209$var$TagGroup(props, ref) {\n  props = (0, $jTkY3$useProviderProps)(props);\n  props = (0, $jTkY3$useFormProps)(props);\n  let {\n    maxRows: maxRows,\n    children: children,\n    actionLabel: actionLabel,\n    onAction: onAction,\n    labelPosition: labelPosition,\n    renderEmptyState = () => stringFormatter.format('noTags')\n  } = props;\n  let domRef = (0, $jTkY3$useDOMRef)(ref);\n  let containerRef = (0, $jTkY3$useRef)(null);\n  let tagsRef = (0, $jTkY3$useRef)(null);\n  let {\n    direction: direction\n  } = (0, $jTkY3$useLocale)();\n  let {\n    scale: scale\n  } = (0, $jTkY3$useProvider)();\n  let stringFormatter = (0, $jTkY3$useLocalizedStringFormatter)((0, $parcel$interopDefault($jTkY3$intlStringsmodulejs)), '@react-spectrum/tag');\n  let [isCollapsed, setIsCollapsed] = (0, $jTkY3$useState)(maxRows != null);\n  let state = (0, $jTkY3$useListState)(props);\n  let [tagState, setTagState] = (0, $jTkY3$useValueEffect)({\n    visibleTagCount: state.collection.size,\n    showCollapseButton: false\n  });\n  let keyboardDelegate = (0, $jTkY3$useMemo)(() => {\n    let collection = isCollapsed ? new (0, $jTkY3$ListCollection)([...state.collection].slice(0, tagState.visibleTagCount)) : new (0, $jTkY3$ListCollection)([...state.collection]);\n    return new (0, $jTkY3$ListKeyboardDelegate)({\n      collection: collection,\n      ref: domRef,\n      direction: direction,\n      orientation: 'horizontal'\n    });\n  }, [direction, isCollapsed, state.collection, tagState.visibleTagCount, domRef]);\n  // Remove onAction from props so it doesn't make it into useGridList.\n  delete props.onAction;\n  let {\n    gridProps: gridProps,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $jTkY3$useTagGroup)({\n    ...props,\n    keyboardDelegate: keyboardDelegate\n  }, state, tagsRef);\n  let actionsId = (0, $jTkY3$useId)();\n  let actionsRef = (0, $jTkY3$useRef)(null);\n  let updateVisibleTagCount = (0, $jTkY3$useCallback)(() => {\n    if (maxRows && maxRows > 0) {\n      let computeVisibleTagCount = () => {\n        // Refs can be null at runtime.\n        let currContainerRef = containerRef.current;\n        let currTagsRef = tagsRef.current;\n        let currActionsRef = actionsRef.current;\n        if (!currContainerRef || !currTagsRef || !currActionsRef || state.collection.size === 0) return {\n          visibleTagCount: 0,\n          showCollapseButton: false\n        };\n        // Count rows and show tags until we hit the maxRows.\n        let tags = [...currTagsRef.children];\n        let currY = -Infinity;\n        let rowCount = 0;\n        let index = 0;\n        let tagWidths = [];\n        for (let tag of tags) {\n          let {\n            width: width,\n            y: y\n          } = tag.getBoundingClientRect();\n          if (y !== currY) {\n            currY = y;\n            rowCount++;\n          }\n          if (maxRows && rowCount > maxRows) break;\n          tagWidths.push(width);\n          index++;\n        }\n        // Remove tags until there is space for the collapse button and action button (if present) on the last row.\n        let buttons = [...currActionsRef.children];\n        if (maxRows && buttons.length > 0 && rowCount >= maxRows) {\n          var _tags_;\n          let buttonsWidth = buttons.reduce((acc, curr) => acc += curr.getBoundingClientRect().width, 0);\n          buttonsWidth += $880d112c7a588209$var$TAG_STYLES[scale].margin * 2 * buttons.length;\n          let end = direction === 'ltr' ? 'right' : 'left';\n          let containerEnd = currContainerRef.parentElement.getBoundingClientRect()[end];\n          let lastTagEnd = (_tags_ = tags[index - 1]) === null || _tags_ === void 0 ? void 0 : _tags_.getBoundingClientRect()[end];\n          lastTagEnd += $880d112c7a588209$var$TAG_STYLES[scale].margin;\n          let availableWidth = containerEnd - lastTagEnd;\n          while (availableWidth < buttonsWidth && index > 0) {\n            availableWidth += tagWidths.pop();\n            index--;\n          }\n        }\n        return {\n          visibleTagCount: Math.max(index, 1),\n          showCollapseButton: index < state.collection.size\n        };\n      };\n      setTagState(function* () {\n        // Update to show all items.\n        yield {\n          visibleTagCount: state.collection.size,\n          showCollapseButton: true\n        };\n        // Measure, and update to show the items until maxRows is reached.\n        yield computeVisibleTagCount();\n      });\n    }\n  }, [maxRows, setTagState, direction, scale, state.collection.size]);\n  (0, $jTkY3$useResizeObserver)({\n    ref: containerRef,\n    onResize: updateVisibleTagCount\n  });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (0, $jTkY3$useLayoutEffect)(updateVisibleTagCount, [children]);\n  (0, $jTkY3$useEffect)(() => {\n    var\n    // Recalculate visible tags when fonts are loaded.\n    _document_fonts;\n    (_document_fonts = document.fonts) === null || _document_fonts === void 0 ? void 0 : _document_fonts.ready.then(() => updateVisibleTagCount());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  let visibleTags = (0, $jTkY3$useMemo)(() => [...state.collection].slice(0, isCollapsed ? tagState.visibleTagCount : state.collection.size), [isCollapsed, state.collection, tagState.visibleTagCount]);\n  let handlePressCollapse = () => {\n    // Prevents button from losing focus if focusedKey got collapsed.\n    state.selectionManager.setFocusedKey(null);\n    setIsCollapsed(prevCollapsed => !prevCollapsed);\n  };\n  let showActions = tagState.showCollapseButton || actionLabel && onAction;\n  let isEmpty = state.collection.size === 0;\n  let containerStyle = (0, $jTkY3$useMemo)(() => {\n    if (maxRows == null || !isCollapsed || isEmpty) return undefined;\n    let maxHeight = ($880d112c7a588209$var$TAG_STYLES[scale].height + $880d112c7a588209$var$TAG_STYLES[scale].margin * 2) * maxRows;\n    return {\n      maxHeight: maxHeight,\n      overflow: 'hidden'\n    };\n  }, [isCollapsed, maxRows, isEmpty, scale]);\n  return /*#__PURE__*/(0, $jTkY3$react).createElement((0, $jTkY3$FocusScope), null, /*#__PURE__*/(0, $jTkY3$react).createElement((0, $jTkY3$Field), {\n    ...props,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    showErrorIcon: true,\n    ref: domRef,\n    elementType: \"span\",\n    wrapperClassName: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'spectrum-Tags-fieldWrapper', {\n      'spectrum-Tags-fieldWrapper--positionSide': labelPosition === 'side'\n    })\n  }, /*#__PURE__*/(0, $jTkY3$react).createElement(\"div\", {\n    ref: containerRef,\n    style: containerStyle,\n    className: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'spectrum-Tags-container', {\n      'spectrum-Tags-container--empty': isEmpty\n    })\n  }, /*#__PURE__*/(0, $jTkY3$react).createElement((0, $jTkY3$FocusRing), {\n    focusRingClass: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $jTkY3$react).createElement(\"div\", {\n    ref: tagsRef,\n    ...gridProps,\n    className: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'spectrum-Tags')\n  }, visibleTags.map(item => /*#__PURE__*/(0, $jTkY3$react).createElement((0, $b5f5ee35d3b6b95c$export$3288d34c523a1192), {\n    ...item.props,\n    key: item.key,\n    item: item,\n    state: state\n  }, item.rendered)), isEmpty && /*#__PURE__*/(0, $jTkY3$react).createElement(\"div\", {\n    className: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'spectrum-Tags-empty-state')\n  }, renderEmptyState()))), showActions && !isEmpty && /*#__PURE__*/(0, $jTkY3$react).createElement((0, $jTkY3$Provider), {\n    isDisabled: false\n  }, /*#__PURE__*/(0, $jTkY3$react).createElement(\"div\", {\n    role: \"group\",\n    ref: actionsRef,\n    id: actionsId,\n    \"aria-label\": stringFormatter.format('actions'),\n    \"aria-labelledby\": `${gridProps.id} ${actionsId}`,\n    className: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'spectrum-Tags-actions')\n  }, tagState.showCollapseButton && /*#__PURE__*/(0, $jTkY3$react).createElement((0, $jTkY3$ActionButton), {\n    isQuiet: true,\n    onPress: handlePressCollapse,\n    UNSAFE_className: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'spectrum-Tags-actionButton')\n  }, isCollapsed ? stringFormatter.format('showAllButtonLabel', {\n    tagCount: state.collection.size\n  }) : stringFormatter.format('hideButtonLabel')), actionLabel && onAction && /*#__PURE__*/(0, $jTkY3$react).createElement((0, $jTkY3$ActionButton), {\n    isQuiet: true,\n    onPress: () => onAction === null || onAction === void 0 ? void 0 : onAction(),\n    UNSAFE_className: (0, $jTkY3$classNames)((0, $parcel$interopDefault($jTkY3$tags_vars_cssmodulejs)), 'spectrum-Tags-actionButton')\n  }, actionLabel))))));\n}\n/** Tags allow users to categorize content. They can represent keywords or people, and are grouped to describe an item or a search request. */\nconst $880d112c7a588209$export$67ea30858aaf75e3 = /*#__PURE__*/(0, $jTkY3$react).forwardRef($880d112c7a588209$var$TagGroup);\nexport { $880d112c7a588209$export$67ea30858aaf75e3 as TagGroup };","map":{"version":3,"names":["$880d112c7a588209$var$TAG_STYLES","medium","height","margin","large","$880d112c7a588209$var$TagGroup","props","ref","$jTkY3$useProviderProps","$jTkY3$useFormProps","maxRows","children","actionLabel","onAction","labelPosition","renderEmptyState","stringFormatter","format","domRef","$jTkY3$useDOMRef","containerRef","$jTkY3$useRef","tagsRef","direction","$jTkY3$useLocale","scale","$jTkY3$useProvider","$jTkY3$useLocalizedStringFormatter","$parcel$interopDefault","$jTkY3$intlStringsmodulejs","isCollapsed","setIsCollapsed","$jTkY3$useState","state","$jTkY3$useListState","tagState","setTagState","$jTkY3$useValueEffect","visibleTagCount","collection","size","showCollapseButton","keyboardDelegate","$jTkY3$useMemo","$jTkY3$ListCollection","slice","$jTkY3$ListKeyboardDelegate","orientation","gridProps","labelProps","descriptionProps","errorMessageProps","$jTkY3$useTagGroup","actionsId","$jTkY3$useId","actionsRef","updateVisibleTagCount","$jTkY3$useCallback","computeVisibleTagCount","currContainerRef","current","currTagsRef","currActionsRef","tags","currY","Infinity","rowCount","index","tagWidths","tag","width","y","getBoundingClientRect","push","buttons","length","_tags_","buttonsWidth","reduce","acc","curr","end","containerEnd","parentElement","lastTagEnd","availableWidth","pop","Math","max","$jTkY3$useResizeObserver","onResize","$jTkY3$useLayoutEffect","$jTkY3$useEffect","_document_fonts","document","fonts","ready","then","visibleTags","handlePressCollapse","selectionManager","setFocusedKey","prevCollapsed","showActions","isEmpty","containerStyle","undefined","maxHeight","overflow","$jTkY3$react","createElement","$jTkY3$FocusScope","$jTkY3$Field","showErrorIcon","elementType","wrapperClassName","$jTkY3$classNames","$jTkY3$tags_vars_cssmodulejs","style","className","$jTkY3$FocusRing","focusRingClass","map","item","$b5f5ee35d3b6b95c$export$3288d34c523a1192","key","rendered","$jTkY3$Provider","isDisabled","role","id","$jTkY3$ActionButton","isQuiet","onPress","UNSAFE_className","tagCount","$880d112c7a588209$export$67ea30858aaf75e3","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/tag/dist/packages/@react-spectrum/tag/src/TagGroup.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ActionButton} from '@react-spectrum/button';\nimport {AriaTagGroupProps, useTagGroup} from '@react-aria/tag';\nimport {classNames, useDOMRef} from '@react-spectrum/utils';\nimport {Collection, DOMRef, Node, SpectrumLabelableProps, StyleProps, Validation} from '@react-types/shared';\nimport {Field} from '@react-spectrum/label';\nimport {FocusRing, FocusScope} from '@react-aria/focus';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {ListCollection, useListState} from '@react-stately/list';\nimport {ListKeyboardDelegate} from '@react-aria/selection';\nimport {Provider, useProvider, useProviderProps} from '@react-spectrum/provider';\nimport React, {JSX, ReactElement, useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/tags/vars.css';\nimport {Tag} from './Tag';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useId, useLayoutEffect, useResizeObserver, useValueEffect} from '@react-aria/utils';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nconst TAG_STYLES = {\n  medium: {\n    height: 24,\n    margin: 4\n  },\n  large: {\n    height: 30,\n    margin: 5\n  }\n};\n\nexport interface SpectrumTagGroupProps<T> extends Omit<AriaTagGroupProps<T>, 'selectionMode' | 'disallowEmptySelection' | 'selectedKeys' | 'defaultSelectedKeys' | 'onSelectionChange' | 'selectionBehavior' | 'disabledKeys'>, StyleProps, Omit<SpectrumLabelableProps, 'isRequired' | 'necessityIndicator'>, Pick<Validation<any>, 'isInvalid' | 'validationState'> {\n  /** The label to display on the action button.  */\n  actionLabel?: string,\n  /** Handler that is called when the action button is pressed. */\n  onAction?: () => void,\n  /** Sets what the TagGroup should render when there are no tags to display. */\n  renderEmptyState?: () => JSX.Element,\n  /** Limit the number of rows initially shown. This will render a button that allows the user to expand to show all tags. */\n  maxRows?: number\n}\n\nfunction TagGroup<T extends object>(props: SpectrumTagGroupProps<T>, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  props = useFormProps(props);\n  let {\n    maxRows,\n    children,\n    actionLabel,\n    onAction,\n    labelPosition,\n    renderEmptyState = () => stringFormatter.format('noTags')\n  } = props;\n  let domRef = useDOMRef(ref);\n  let containerRef = useRef(null);\n  let tagsRef = useRef<HTMLDivElement | null>(null);\n  let {direction} = useLocale();\n  let {scale} = useProvider();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/tag');\n  let [isCollapsed, setIsCollapsed] = useState(maxRows != null);\n  let state = useListState(props);\n  let [tagState, setTagState] = useValueEffect({visibleTagCount: state.collection.size, showCollapseButton: false});\n  let keyboardDelegate = useMemo(() => {\n    let collection = (isCollapsed\n      ? new ListCollection([...state.collection].slice(0, tagState.visibleTagCount))\n      : new ListCollection([...state.collection])) as Collection<Node<T>>;\n    return new ListKeyboardDelegate({\n      collection,\n      ref: domRef,\n      direction,\n      orientation: 'horizontal'\n    });\n  }, [direction, isCollapsed, state.collection, tagState.visibleTagCount, domRef]) as ListKeyboardDelegate<T>;\n  // Remove onAction from props so it doesn't make it into useGridList.\n  delete props.onAction;\n  let {gridProps, labelProps, descriptionProps, errorMessageProps} = useTagGroup({...props, keyboardDelegate}, state, tagsRef);\n  let actionsId = useId();\n  let actionsRef = useRef(null);\n\n  let updateVisibleTagCount = useCallback(() => {\n    if (maxRows && maxRows > 0) {\n      let computeVisibleTagCount = () => {\n        // Refs can be null at runtime.\n        let currContainerRef: HTMLDivElement | null = containerRef.current;\n        let currTagsRef: HTMLDivElement | null = tagsRef.current;\n        let currActionsRef: HTMLDivElement | null = actionsRef.current;\n        if (!currContainerRef || !currTagsRef || !currActionsRef || state.collection.size === 0) {\n          return {\n            visibleTagCount: 0,\n            showCollapseButton: false\n          };\n        }\n\n        // Count rows and show tags until we hit the maxRows.\n        let tags = [...currTagsRef.children];\n        let currY = -Infinity;\n        let rowCount = 0;\n        let index = 0;\n        let tagWidths: number[] = [];\n        for (let tag of tags) {\n          let {width, y} = tag.getBoundingClientRect();\n\n          if (y !== currY) {\n            currY = y;\n            rowCount++;\n          }\n\n          if (maxRows && rowCount > maxRows) {\n            break;\n          }\n          tagWidths.push(width);\n          index++;\n        }\n\n        // Remove tags until there is space for the collapse button and action button (if present) on the last row.\n        let buttons = [...currActionsRef.children];\n        if (maxRows && buttons.length > 0 && rowCount >= maxRows) {\n          let buttonsWidth = buttons.reduce((acc, curr) => acc += curr.getBoundingClientRect().width, 0);\n          buttonsWidth += TAG_STYLES[scale].margin * 2 * buttons.length;\n          let end = direction === 'ltr' ? 'right' : 'left';\n          let containerEnd = currContainerRef.parentElement.getBoundingClientRect()[end];\n          let lastTagEnd = tags[index - 1]?.getBoundingClientRect()[end];\n          lastTagEnd += TAG_STYLES[scale].margin;\n          let availableWidth = containerEnd - lastTagEnd;\n\n          while (availableWidth < buttonsWidth && index > 0) {\n            availableWidth += tagWidths.pop();\n            index--;\n          }\n        }\n\n        return {\n          visibleTagCount: Math.max(index, 1),\n          showCollapseButton: index < state.collection.size\n        };\n      };\n\n      setTagState(function *() {\n        // Update to show all items.\n        yield {visibleTagCount: state.collection.size, showCollapseButton: true};\n\n        // Measure, and update to show the items until maxRows is reached.\n        yield computeVisibleTagCount();\n      });\n    }\n  }, [maxRows, setTagState, direction, scale, state.collection.size]);\n\n  useResizeObserver({ref: containerRef, onResize: updateVisibleTagCount});\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(updateVisibleTagCount, [children]);\n\n  useEffect(() => {\n    // Recalculate visible tags when fonts are loaded.\n    document.fonts?.ready.then(() => updateVisibleTagCount());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let visibleTags = useMemo(() =>\n    [...state.collection].slice(0, isCollapsed ? tagState.visibleTagCount : state.collection.size),\n    [isCollapsed, state.collection, tagState.visibleTagCount]\n  );\n\n  let handlePressCollapse = () => {\n    // Prevents button from losing focus if focusedKey got collapsed.\n    state.selectionManager.setFocusedKey(null);\n    setIsCollapsed(prevCollapsed => !prevCollapsed);\n  };\n\n  let showActions = tagState.showCollapseButton || (actionLabel && onAction);\n  let isEmpty = state.collection.size === 0;\n\n  let containerStyle = useMemo(() => {\n    if (maxRows == null || !isCollapsed || isEmpty) {\n      return undefined;\n    }\n    let maxHeight = (TAG_STYLES[scale].height + (TAG_STYLES[scale].margin * 2)) * maxRows;\n    return {maxHeight, overflow: 'hidden'};\n  }, [isCollapsed, maxRows, isEmpty, scale]);\n\n  return (\n    <FocusScope>\n      <Field\n        {...props}\n        labelProps={labelProps}\n        descriptionProps={descriptionProps}\n        errorMessageProps={errorMessageProps}\n        showErrorIcon\n        ref={domRef}\n        elementType=\"span\"\n        wrapperClassName={\n          classNames(\n            styles,\n            'spectrum-Tags-fieldWrapper',\n            {\n              'spectrum-Tags-fieldWrapper--positionSide': labelPosition === 'side'\n            }\n          )\n        }>\n        <div\n          ref={containerRef}\n          style={containerStyle}\n          className={\n            classNames(\n              styles,\n              'spectrum-Tags-container',\n              {\n                'spectrum-Tags-container--empty': isEmpty\n              }\n            )\n          }>\n          <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n            <div\n              ref={tagsRef}\n              {...gridProps}\n              className={classNames(styles, 'spectrum-Tags')}>\n              {visibleTags.map(item => (\n                <Tag\n                  {...item.props}\n                  key={item.key}\n                  item={item}\n                  state={state}>\n                  {item.rendered}\n                </Tag>\n              ))}\n              {isEmpty && (\n                <div className={classNames(styles, 'spectrum-Tags-empty-state')}>\n                  {renderEmptyState()}\n                </div>\n              )}\n            </div>\n          </FocusRing>\n          {showActions && !isEmpty &&\n            <Provider isDisabled={false}>\n              <div\n                role=\"group\"\n                ref={actionsRef}\n                id={actionsId}\n                aria-label={stringFormatter.format('actions')}\n                aria-labelledby={`${gridProps.id} ${actionsId}`}\n                className={classNames(styles, 'spectrum-Tags-actions')}>\n                {tagState.showCollapseButton &&\n                  <ActionButton\n                    isQuiet\n                    onPress={handlePressCollapse}\n                    UNSAFE_className={classNames(styles, 'spectrum-Tags-actionButton')}>\n                    {isCollapsed ?\n                      stringFormatter.format('showAllButtonLabel', {tagCount: state.collection.size}) :\n                      stringFormatter.format('hideButtonLabel')\n                    }\n                  </ActionButton>\n                }\n                {actionLabel && onAction &&\n                  <ActionButton\n                    isQuiet\n                    onPress={() => onAction?.()}\n                    UNSAFE_className={classNames(styles, 'spectrum-Tags-actionButton')}>\n                    {actionLabel}\n                  </ActionButton>\n                }\n              </div>\n            </Provider>\n          }\n        </div>\n      </Field>\n    </FocusScope>\n  );\n}\n\n/** Tags allow users to categorize content. They can represent keywords or people, and are grouped to describe an item or a search request. */\nconst _TagGroup = React.forwardRef(TagGroup) as <T>(props: SpectrumTagGroupProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_TagGroup as TagGroup};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}