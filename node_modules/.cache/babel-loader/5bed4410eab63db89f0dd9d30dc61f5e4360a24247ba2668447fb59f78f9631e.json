{"ast":null,"code":"import { createDOMRef as $d7JPl$createDOMRef } from \"@react-spectrum/utils\";\nimport { createFocusManager as $d7JPl$createFocusManager } from \"@react-aria/focus\";\nimport { useDateFormatter as $d7JPl$useDateFormatter, useLocale as $d7JPl$useLocale } from \"@react-aria/i18n\";\nimport { useDisplayNames as $d7JPl$useDisplayNames } from \"@react-aria/datepicker\";\nimport { useMemo as $d7JPl$useMemo, useState as $d7JPl$useState, useRef as $d7JPl$useRef, useImperativeHandle as $d7JPl$useImperativeHandle } from \"react\";\nimport { useLayoutEffect as $d7JPl$useLayoutEffect } from \"@react-aria/utils\";\nimport { useProvider as $d7JPl$useProvider } from \"@react-spectrum/provider\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $04e96200274b03de$export$322f4580ccd8dde6(props) {\n  let formatter = (0, $d7JPl$useDateFormatter)({\n    dateStyle: 'short'\n  });\n  let displayNames = (0, $d7JPl$useDisplayNames)();\n  return (0, $d7JPl$useMemo)(() => {\n    if (props.description) return props.description;\n    if (props.showFormatHelpText) return formatter.formatToParts(new Date()).map(s => {\n      if (s.type === 'literal') return s.value;\n      return displayNames.of(s.type);\n    }).join(' ');\n    return '';\n  }, [props.description, props.showFormatHelpText, formatter, displayNames]);\n}\nfunction $04e96200274b03de$export$12ce2869ce471b1f(maxVisibleMonths) {\n  let {\n    scale: scale\n  } = (0, $d7JPl$useProvider)();\n  let [visibleMonths, setVisibleMonths] = (0, $d7JPl$useState)($04e96200274b03de$var$getVisibleMonths(scale));\n  (0, $d7JPl$useLayoutEffect)(() => {\n    let onResize = () => setVisibleMonths($04e96200274b03de$var$getVisibleMonths(scale));\n    onResize();\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [scale]);\n  return Math.max(1, Math.min(visibleMonths, maxVisibleMonths, 3));\n}\nfunction $04e96200274b03de$var$getVisibleMonths(scale) {\n  if (typeof window === 'undefined') return 1;\n  let monthWidth = scale === 'large' ? 336 : 280;\n  let gap = scale === 'large' ? 30 : 24;\n  let popoverPadding = scale === 'large' ? 32 : 48;\n  return Math.floor((window.innerWidth - popoverPadding * 2) / (monthWidth + gap));\n}\nfunction $04e96200274b03de$export$71a23a36270e4bf0(ref) {\n  let domRef = (0, $d7JPl$useRef)(undefined);\n  (0, $d7JPl$useImperativeHandle)(ref, () => ({\n    ...(0, $d7JPl$createDOMRef)(domRef),\n    focus() {\n      (0, $d7JPl$createFocusManager)(domRef).focusFirst({\n        tabbable: true\n      });\n    }\n  }));\n  return domRef;\n}\nfunction $04e96200274b03de$export$31e22e3c931fc056(state) {\n  var _useLocale;\n  let locale = (_useLocale = (0, $d7JPl$useLocale)()) === null || _useLocale === void 0 ? void 0 : _useLocale.locale;\n  let currentDate = new Date();\n  let formatedDate = state.getDateFormatter(locale, {\n    shouldForceLeadingZeros: true\n  }).format(currentDate, locale);\n  let totalCharacters = formatedDate.length;\n  // The max of two is for times with only hours.\n  // As the length of a date grows we need to proportionally increase the width.\n  // We use the character count with 'ch' units and add extra padding to accomate for\n  // dates with months and time dashes, which are wider characters.\n  return totalCharacters + Math.max(Math.floor(totalCharacters / 5), 2);\n}\nexport { $04e96200274b03de$export$322f4580ccd8dde6 as useFormatHelpText, $04e96200274b03de$export$12ce2869ce471b1f as useVisibleMonths, $04e96200274b03de$export$71a23a36270e4bf0 as useFocusManagerRef, $04e96200274b03de$export$31e22e3c931fc056 as useFormattedDateWidth };","map":{"version":3,"names":["$04e96200274b03de$export$322f4580ccd8dde6","props","formatter","$d7JPl$useDateFormatter","dateStyle","displayNames","$d7JPl$useDisplayNames","$d7JPl$useMemo","description","showFormatHelpText","formatToParts","Date","map","s","type","value","of","join","$04e96200274b03de$export$12ce2869ce471b1f","maxVisibleMonths","scale","$d7JPl$useProvider","visibleMonths","setVisibleMonths","$d7JPl$useState","$04e96200274b03de$var$getVisibleMonths","$d7JPl$useLayoutEffect","onResize","window","addEventListener","removeEventListener","Math","max","min","monthWidth","gap","popoverPadding","floor","innerWidth","$04e96200274b03de$export$71a23a36270e4bf0","ref","domRef","$d7JPl$useRef","undefined","$d7JPl$useImperativeHandle","$d7JPl$createDOMRef","focus","$d7JPl$createFocusManager","focusFirst","tabbable","$04e96200274b03de$export$31e22e3c931fc056","state","_useLocale","locale","$d7JPl$useLocale","currentDate","formatedDate","getDateFormatter","shouldForceLeadingZeros","format","totalCharacters","length"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/datepicker/dist/packages/@react-spectrum/datepicker/src/utils.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {createDOMRef} from '@react-spectrum/utils';\nimport {createFocusManager} from '@react-aria/focus';\nimport {FocusableRef} from '@react-types/shared';\nimport {SpectrumDatePickerBase} from '@react-types/datepicker';\nimport {useDateFormatter, useLocale} from '@react-aria/i18n';\nimport {useDisplayNames} from '@react-aria/datepicker';\nimport {useImperativeHandle, useMemo, useRef, useState} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {useProvider} from '@react-spectrum/provider';\n\nexport function useFormatHelpText(props: Pick<SpectrumDatePickerBase<any>, 'description' | 'showFormatHelpText'>) {\n  let formatter = useDateFormatter({dateStyle: 'short'});\n  let displayNames = useDisplayNames();\n  return useMemo(() => {\n    if (props.description) {\n      return props.description;\n    }\n\n    if (props.showFormatHelpText) {\n      return formatter.formatToParts(new Date()).map(s => {\n        if (s.type === 'literal') {\n          return s.value;\n        }\n\n        return displayNames.of(s.type);\n      }).join(' ');\n    }\n\n    return '';\n  }, [props.description, props.showFormatHelpText, formatter, displayNames]);\n}\n\nexport function useVisibleMonths(maxVisibleMonths: number) {\n  let {scale} = useProvider();\n  let [visibleMonths, setVisibleMonths] = useState(getVisibleMonths(scale));\n  useLayoutEffect(() => {\n    let onResize = () => setVisibleMonths(getVisibleMonths(scale));\n    onResize();\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  }, [scale]);\n\n  return Math.max(1, Math.min(visibleMonths, maxVisibleMonths, 3));\n}\n\nfunction getVisibleMonths(scale) {\n  if (typeof window === 'undefined') {\n    return 1;\n  }\n  let monthWidth = scale === 'large' ? 336 : 280;\n  let gap = scale === 'large' ? 30 : 24;\n  let popoverPadding = scale === 'large' ? 32 : 48;\n  return Math.floor((window.innerWidth - popoverPadding * 2) / (monthWidth + gap));\n}\n\nexport function useFocusManagerRef(ref: FocusableRef<HTMLElement>) {\n  let domRef = useRef(undefined);\n  useImperativeHandle(ref, () => ({\n    ...createDOMRef(domRef),\n    focus() {\n      createFocusManager(domRef).focusFirst({tabbable: true});\n    }\n  }));\n  return domRef;\n}\n\nexport function useFormattedDateWidth(state) {\n  let locale = useLocale()?.locale;\n  let currentDate = new Date();\n  let formatedDate = state.getDateFormatter(locale, {shouldForceLeadingZeros: true}).format(currentDate, locale);\n  let totalCharacters =  formatedDate.length;\n\n  // The max of two is for times with only hours.\n  // As the length of a date grows we need to proportionally increase the width.\n  // We use the character count with 'ch' units and add extra padding to accomate for\n  // dates with months and time dashes, which are wider characters.\n  return (totalCharacters + Math.max(Math.floor(totalCharacters / 5), 2));\n}\n"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AAqBO,SAASA,0CAAkBC,KAA8E;EAC9G,IAAIC,SAAA,GAAY,IAAAC,uBAAe,EAAE;IAACC,SAAA,EAAW;EAAO;EACpD,IAAIC,YAAA,GAAe,IAAAC,sBAAc;EACjC,OAAO,IAAAC,cAAM,EAAE;IACb,IAAIN,KAAA,CAAMO,WAAW,EACnB,OAAOP,KAAA,CAAMO,WAAW;IAG1B,IAAIP,KAAA,CAAMQ,kBAAkB,EAC1B,OAAOP,SAAA,CAAUQ,aAAa,CAAC,IAAIC,IAAA,IAAQC,GAAG,CAACC,CAAA;MAC7C,IAAIA,CAAA,CAAEC,IAAI,KAAK,WACb,OAAOD,CAAA,CAAEE,KAAK;MAGhB,OAAOV,YAAA,CAAaW,EAAE,CAACH,CAAA,CAAEC,IAAI;IAC/B,GAAGG,IAAI,CAAC;IAGV,OAAO;EACT,GAAG,CAAChB,KAAA,CAAMO,WAAW,EAAEP,KAAA,CAAMQ,kBAAkB,EAAEP,SAAA,EAAWG,YAAA,CAAa;AAC3E;AAEO,SAASa,0CAAiBC,gBAAwB;EACvD,IAAI;IAAAC,KAAA,EAACA;EAAK,CAAC,GAAG,IAAAC,kBAAU;EACxB,IAAI,CAACC,aAAA,EAAeC,gBAAA,CAAiB,GAAG,IAAAC,eAAO,EAAEC,sCAAA,CAAiBL,KAAA;EAClE,IAAAM,sBAAc,EAAE;IACd,IAAIC,QAAA,GAAWA,CAAA,KAAMJ,gBAAA,CAAiBE,sCAAA,CAAiBL,KAAA;IACvDO,QAAA;IAEAC,MAAA,CAAOC,gBAAgB,CAAC,UAAUF,QAAA;IAClC,OAAO;MACLC,MAAA,CAAOE,mBAAmB,CAAC,UAAUH,QAAA;IACvC;EACF,GAAG,CAACP,KAAA,CAAM;EAEV,OAAOW,IAAA,CAAKC,GAAG,CAAC,GAAGD,IAAA,CAAKE,GAAG,CAACX,aAAA,EAAeH,gBAAA,EAAkB;AAC/D;AAEA,SAASM,uCAAiBL,KAAK;EAC7B,IAAI,OAAOQ,MAAA,KAAW,aACpB,OAAO;EAET,IAAIM,UAAA,GAAad,KAAA,KAAU,UAAU,MAAM;EAC3C,IAAIe,GAAA,GAAMf,KAAA,KAAU,UAAU,KAAK;EACnC,IAAIgB,cAAA,GAAiBhB,KAAA,KAAU,UAAU,KAAK;EAC9C,OAAOW,IAAA,CAAKM,KAAK,CAAC,CAACT,MAAA,CAAOU,UAAU,GAAGF,cAAA,GAAiB,MAAMF,UAAA,GAAaC,GAAE;AAC/E;AAEO,SAASI,0CAAmBC,GAA8B;EAC/D,IAAIC,MAAA,GAAS,IAAAC,aAAK,EAAEC,SAAA;EACpB,IAAAC,0BAAkB,EAAEJ,GAAA,EAAK,OAAO;IAC9B,GAAG,IAAAK,mBAAW,EAAEJ,MAAA,CAAO;IACvBK,MAAA;MACE,IAAAC,yBAAiB,EAAEN,MAAA,EAAQO,UAAU,CAAC;QAACC,QAAA,EAAU;MAAI;IACvD;EACF;EACA,OAAOR,MAAA;AACT;AAEO,SAASS,0CAAsBC,KAAK;MAC5BC,UAAA;EAAb,IAAIC,MAAA,IAASD,UAAA,OAAAE,gBAAQ,iBAARF,UAAA,uBAAAA,UAAA,CAAaC,MAAM;EAChC,IAAIE,WAAA,GAAc,IAAI5C,IAAA;EACtB,IAAI6C,YAAA,GAAeL,KAAA,CAAMM,gBAAgB,CAACJ,MAAA,EAAQ;IAACK,uBAAA,EAAyB;EAAI,GAAGC,MAAM,CAACJ,WAAA,EAAaF,MAAA;EACvG,IAAIO,eAAA,GAAmBJ,YAAA,CAAaK,MAAM;EAE1C;EACA;EACA;EACA;EACA,OAAQD,eAAA,GAAkB7B,IAAA,CAAKC,GAAG,CAACD,IAAA,CAAKM,KAAK,CAACuB,eAAA,GAAkB,IAAI;AACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}