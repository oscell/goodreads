{"ast":null,"code":"import \"./vars.d338152f.css\";\nimport $73onX$avatar_vars_cssmodulejs from \"./avatar_vars_css.mjs\";\nimport { useSlotProps as $73onX$useSlotProps, useStyleProps as $73onX$useStyleProps, useDOMRef as $73onX$useDOMRef, dimensionValue as $73onX$dimensionValue, classNames as $73onX$classNames } from \"@react-spectrum/utils\";\nimport { filterDOMProps as $73onX$filterDOMProps } from \"@react-aria/utils\";\nimport $73onX$react, { forwardRef as $73onX$forwardRef } from \"react\";\nimport { useProviderProps as $73onX$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $ab0b7b2186c39312$var$DEFAULT_SIZE = 'avatar-size-100';\nconst $ab0b7b2186c39312$var$SIZE_RE = /^size-\\d+/;\nfunction $ab0b7b2186c39312$var$Avatar(props, ref) {\n  props = (0, $73onX$useSlotProps)(props, 'avatar');\n  const {\n    alt = '',\n    isDisabled: isDisabled,\n    size = $ab0b7b2186c39312$var$DEFAULT_SIZE,\n    src: src,\n    ...otherProps\n  } = (0, $73onX$useProviderProps)(props);\n  const {\n    styleProps: styleProps\n  } = (0, $73onX$useStyleProps)(otherProps);\n  const domRef = (0, $73onX$useDOMRef)(ref);\n  const domProps = (0, $73onX$filterDOMProps)(otherProps);\n  // Casting `size` as `any` since `isNaN` expects a `number`, but we want it\n  // to handle `string` numbers; e.g. '300' as opposed to 300\n  const sizeValue = typeof size !== 'number' && ($ab0b7b2186c39312$var$SIZE_RE.test(size) || !isNaN(size)) ? (0, $73onX$dimensionValue)($ab0b7b2186c39312$var$DEFAULT_SIZE) // override disallowed size values\n  : (0, $73onX$dimensionValue)(size || $ab0b7b2186c39312$var$DEFAULT_SIZE);\n  return /*#__PURE__*/(0, $73onX$react).createElement(\"img\", {\n    ...styleProps,\n    ...domProps,\n    alt: alt,\n    className: (0, $73onX$classNames)((0, $parcel$interopDefault($73onX$avatar_vars_cssmodulejs)), 'spectrum-Avatar', {\n      'is-disabled': isDisabled\n    }, styleProps.className),\n    ref: domRef,\n    src: src,\n    style: {\n      ...styleProps.style,\n      ...(sizeValue && {\n        height: sizeValue,\n        width: sizeValue\n      })\n    }\n  });\n}\n/**\n * An avatar is a thumbnail representation of an entity, such as a user or an organization.\n */\nconst $ab0b7b2186c39312$export$e2255cf6045e8d47 = /*#__PURE__*/(0, $73onX$forwardRef)($ab0b7b2186c39312$var$Avatar);\nexport { $ab0b7b2186c39312$export$e2255cf6045e8d47 as Avatar };","map":{"version":3,"names":["$ab0b7b2186c39312$var$DEFAULT_SIZE","$ab0b7b2186c39312$var$SIZE_RE","$ab0b7b2186c39312$var$Avatar","props","ref","$73onX$useSlotProps","alt","isDisabled","size","src","otherProps","$73onX$useProviderProps","styleProps","$73onX$useStyleProps","domRef","$73onX$useDOMRef","domProps","$73onX$filterDOMProps","sizeValue","test","isNaN","$73onX$dimensionValue","$73onX$react","createElement","className","$73onX$classNames","$parcel$interopDefault","$73onX$avatar_vars_cssmodulejs","style","height","width","$ab0b7b2186c39312$export$e2255cf6045e8d47","$73onX$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/avatar/dist/packages/@react-spectrum/avatar/src/Avatar.tsx"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, dimensionValue, useDOMRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport React, {forwardRef} from 'react';\nimport {SpectrumAvatarProps} from '@react-types/avatar';\nimport styles from '@adobe/spectrum-css-temp/components/avatar/vars.css';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nconst DEFAULT_SIZE = 'avatar-size-100';\nconst SIZE_RE = /^size-\\d+/;\n\nfunction Avatar(props: SpectrumAvatarProps, ref: DOMRef<HTMLImageElement>) {\n  props = useSlotProps(props, 'avatar');\n  const {\n    alt = '',\n    isDisabled,\n    size = DEFAULT_SIZE,\n    src,\n    ...otherProps\n  } = useProviderProps(props);\n\n  const {styleProps} = useStyleProps(otherProps);\n  const domRef = useDOMRef(ref);\n\n  const domProps = filterDOMProps(otherProps);\n\n  // Casting `size` as `any` since `isNaN` expects a `number`, but we want it\n  // to handle `string` numbers; e.g. '300' as opposed to 300\n  const sizeValue = typeof size !== 'number' && (SIZE_RE.test(size) || !isNaN(size as any))\n    ? dimensionValue(DEFAULT_SIZE) // override disallowed size values\n    : dimensionValue(size || DEFAULT_SIZE);\n\n  return (\n    <img\n      {...styleProps}\n      {...domProps}\n      alt={alt}\n      className={classNames(\n        styles,\n        'spectrum-Avatar',\n        {\n          'is-disabled': isDisabled\n        },\n        styleProps.className)}\n      ref={domRef}\n      src={src}\n      style={{\n        ...styleProps.style,\n        ...(sizeValue && {height: sizeValue, width: sizeValue})\n      }} />\n  );\n}\n\n/**\n * An avatar is a thumbnail representation of an entity, such as a user or an organization.\n */\nconst _Avatar = forwardRef(Avatar);\nexport {_Avatar as Avatar};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;AAoBA,MAAMA,kCAAA,GAAe;AACrB,MAAMC,6BAAA,GAAU;AAEhB,SAASC,6BAAOC,KAA0B,EAAEC,GAA6B;EACvED,KAAA,GAAQ,IAAAE,mBAAW,EAAEF,KAAA,EAAO;EAC5B,MAAM;IACJG,GAAA,GAAM;IAAAC,UAAA,EACNA,UAAU;IACVC,IAAA,GAAOR,kCAAA;IAAAS,GAAA,EACPA,GAAG;IACH,GAAGC;EAAA,CACJ,GAAG,IAAAC,uBAAe,EAAER,KAAA;EAErB,MAAM;IAAAS,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEH,UAAA;EACnC,MAAMI,MAAA,GAAS,IAAAC,gBAAQ,EAAEX,GAAA;EAEzB,MAAMY,QAAA,GAAW,IAAAC,qBAAa,EAAEP,UAAA;EAEhC;EACA;EACA,MAAMQ,SAAA,GAAY,OAAOV,IAAA,KAAS,aAAaP,6BAAA,CAAQkB,IAAI,CAACX,IAAA,KAAS,CAACY,KAAA,CAAMZ,IAAA,CAAW,IACnF,IAAAa,qBAAa,EAAErB,kCAAA,EAAc;EAAA,EAC7B,IAAAqB,qBAAa,EAAEb,IAAA,IAAQR,kCAAA;EAE3B,oBACE,IAAAsB,YAAA,EAAAC,aAAA,CAAC;IACE,GAAGX,UAAU;IACb,GAAGI,QAAQ;IACZV,GAAA,EAAKA,GAAA;IACLkB,SAAA,EAAW,IAAAC,iBAAS,GAClB,GAAAC,sBAAA,CAAAC,8BAAA,CAAK,GACL,mBACA;MACE,eAAepB;IACjB,GACAK,UAAA,CAAWY,SAAS;IACtBpB,GAAA,EAAKU,MAAA;IACLL,GAAA,EAAKA,GAAA;IACLmB,KAAA,EAAO;MACL,GAAGhB,UAAA,CAAWgB,KAAK;MACnB,IAAIV,SAAA,IAAa;QAACW,MAAA,EAAQX,SAAA;QAAWY,KAAA,EAAOZ;MAAS,CAAC;IACxD;;AAEN;AAEA;;;AAGA,MAAMa,yCAAA,gBAAU,IAAAC,iBAAS,EAAE9B,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}