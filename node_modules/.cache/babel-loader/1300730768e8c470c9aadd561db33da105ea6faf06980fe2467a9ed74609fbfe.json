{"ast":null,"code":"import $kMaRF$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { filterDOMProps as $kMaRF$filterDOMProps, useId as $kMaRF$useId } from \"@react-aria/utils\";\nimport { useMemo as $kMaRF$useMemo } from \"react\";\nimport { parseColor as $kMaRF$parseColor } from \"@react-stately/color\";\nimport { useLocale as $kMaRF$useLocale, useLocalizedStringFormatter as $kMaRF$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $2993fcad7650b98d$export$9060ae606178d849(props) {\n  let {\n    color: value,\n    colorName: colorName\n  } = props;\n  let nonNullValue = value || '#fff0';\n  let color = (0, $kMaRF$useMemo)(() => typeof nonNullValue === 'string' ? (0, $kMaRF$parseColor)(nonNullValue) : nonNullValue, [nonNullValue]);\n  let {\n    locale: locale\n  } = (0, $kMaRF$useLocale)();\n  let DOMProps = (0, $kMaRF$filterDOMProps)(props, {\n    labelable: true\n  });\n  let stringFormatter = (0, $kMaRF$useLocalizedStringFormatter)((0, $parcel$interopDefault($kMaRF$intlStringsmodulejs)), '@react-aria/color');\n  let id = (0, $kMaRF$useId)(props.id);\n  if (!colorName) colorName = color.getChannelValue('alpha') === 0 ? stringFormatter.format('transparent') : color.getColorName(locale);\n  return {\n    colorSwatchProps: {\n      ...DOMProps,\n      role: 'img',\n      'aria-roledescription': stringFormatter.format('colorSwatch'),\n      'aria-label': [colorName, props['aria-label'] || ''].filter(Boolean).join(', '),\n      'aria-labelledby': props['aria-labelledby'] ? `${id} ${props['aria-labelledby']}` : undefined,\n      id: id,\n      style: {\n        backgroundColor: color.toString('css'),\n        // @ts-ignore\n        forcedColorAdjust: 'none'\n      }\n    },\n    color: color || null\n  };\n}\nexport { $2993fcad7650b98d$export$9060ae606178d849 as useColorSwatch };","map":{"version":3,"names":["$2993fcad7650b98d$export$9060ae606178d849","props","color","value","colorName","nonNullValue","$kMaRF$useMemo","$kMaRF$parseColor","locale","$kMaRF$useLocale","DOMProps","$kMaRF$filterDOMProps","labelable","stringFormatter","$kMaRF$useLocalizedStringFormatter","$parcel$interopDefault","$kMaRF$intlStringsmodulejs","id","$kMaRF$useId","getChannelValue","format","getColorName","colorSwatchProps","role","filter","Boolean","join","undefined","style","backgroundColor","toString","forcedColorAdjust"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/color/dist/packages/@react-aria/color/src/useColorSwatch.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps} from '@react-types/shared';\nimport {Color} from '@react-types/color';\nimport {filterDOMProps, useId} from '@react-aria/utils';\nimport {HTMLAttributes, useMemo} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {parseColor} from '@react-stately/color';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaColorSwatchProps extends AriaLabelingProps, DOMProps {\n  /** The color value to display in the swatch. */\n  color?: string | Color,\n  /** \n   * A localized accessible name for the color.\n   * By default, a description is generated from the color value,\n   * but this can be overridden if you have a more specific color\n   * name (e.g. Pantone colors).\n   */\n  colorName?: string\n}\n\nexport interface ColorSwatchAria {\n  /** Props for the color swatch element. */\n  colorSwatchProps: HTMLAttributes<HTMLElement>,\n  /** The parsed color value of the swatch. */\n  color: Color\n}\n\n/**\n * Provides the accessibility implementation for a color swatch component.\n * A color swatch displays a preview of a selected color.\n */\nexport function useColorSwatch(props: AriaColorSwatchProps): ColorSwatchAria {\n  let {color: value, colorName} = props;\n  let nonNullValue = value || '#fff0';\n  let color = useMemo(() => typeof nonNullValue === 'string' ? parseColor(nonNullValue) : nonNullValue, [nonNullValue]);\n  let {locale} = useLocale();\n  let DOMProps = filterDOMProps(props, {labelable: true});\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/color');\n  let id = useId(props.id);\n\n  if (!colorName) {\n    colorName = color.getChannelValue('alpha') === 0 ? stringFormatter.format('transparent') : color.getColorName(locale);\n  }\n\n  return {\n    colorSwatchProps: {\n      ...DOMProps,\n      role: 'img',\n      'aria-roledescription': stringFormatter.format('colorSwatch'),\n      'aria-label': [colorName, props['aria-label'] || ''].filter(Boolean).join(', '),\n      'aria-labelledby': props['aria-labelledby'] ? `${id} ${props['aria-labelledby']}` : undefined,\n      id,\n      style: {\n        backgroundColor: color.toString('css'),\n        // @ts-ignore\n        forcedColorAdjust: 'none'\n      }\n    },\n    color: color || null\n  };\n}\n"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AA4CO,SAASA,0CAAeC,KAA2B;EACxD,IAAI;IAACC,KAAA,EAAOC,KAAK;IAAAC,SAAA,EAAEA;EAAS,CAAC,GAAGH,KAAA;EAChC,IAAII,YAAA,GAAeF,KAAA,IAAS;EAC5B,IAAID,KAAA,GAAQ,IAAAI,cAAM,EAAE,MAAM,OAAOD,YAAA,KAAiB,WAAW,IAAAE,iBAAS,EAAEF,YAAA,IAAgBA,YAAA,EAAc,CAACA,YAAA,CAAa;EACpH,IAAI;IAAAG,MAAA,EAACA;EAAM,CAAC,GAAG,IAAAC,gBAAQ;EACvB,IAAIC,QAAA,GAAW,IAAAC,qBAAa,EAAEV,KAAA,EAAO;IAACW,SAAA,EAAW;EAAI;EACrD,IAAIC,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAChE,IAAIC,EAAA,GAAK,IAAAC,YAAI,EAAEjB,KAAA,CAAMgB,EAAE;EAEvB,IAAI,CAACb,SAAA,EACHA,SAAA,GAAYF,KAAA,CAAMiB,eAAe,CAAC,aAAa,IAAIN,eAAA,CAAgBO,MAAM,CAAC,iBAAiBlB,KAAA,CAAMmB,YAAY,CAACb,MAAA;EAGhH,OAAO;IACLc,gBAAA,EAAkB;MAChB,GAAGZ,QAAQ;MACXa,IAAA,EAAM;MACN,wBAAwBV,eAAA,CAAgBO,MAAM,CAAC;MAC/C,cAAc,CAAChB,SAAA,EAAWH,KAAK,CAAC,aAAa,IAAI,GAAG,CAACuB,MAAM,CAACC,OAAA,EAASC,IAAI,CAAC;MAC1E,mBAAmBzB,KAAK,CAAC,kBAAkB,GAAG,GAAGgB,EAAA,IAAMhB,KAAK,CAAC,kBAAkB,EAAE,GAAG0B,SAAA;UACpFV,EAAA;MACAW,KAAA,EAAO;QACLC,eAAA,EAAiB3B,KAAA,CAAM4B,QAAQ,CAAC;QAChC;QACAC,iBAAA,EAAmB;MACrB;IACF;IACA7B,KAAA,EAAOA,KAAA,IAAS;EAClB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}