{"ast":null,"code":"import $bVyMs$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./vars.a1f9fd59.css\";\nimport $bVyMs$menu_vars_cssmodulejs from \"./menu_vars_css.mjs\";\nimport { useMenuContext as $d94604d52c3e3feb$export$21c7ab35b39f78ec, useSubmenuTriggerContext as $d94604d52c3e3feb$export$dc2161044aa0b36d } from \"./context.mjs\";\nimport $bVyMs$spectrumiconsuiCheckmarkMedium from \"@spectrum-icons/ui/CheckmarkMedium\";\nimport $bVyMs$spectrumiconsworkflowChevronLeft from \"@spectrum-icons/workflow/ChevronLeft\";\nimport $bVyMs$spectrumiconsworkflowChevronRight from \"@spectrum-icons/workflow/ChevronRight\";\nimport { classNames as $bVyMs$classNames, ClearSlots as $bVyMs$ClearSlots, SlotProvider as $bVyMs$SlotProvider } from \"@react-spectrum/utils\";\nimport { FocusRing as $bVyMs$FocusRing } from \"@react-aria/focus\";\nimport { Grid as $bVyMs$Grid } from \"@react-spectrum/layout\";\nimport $bVyMs$spectrumiconsworkflowInfoOutline from \"@spectrum-icons/workflow/InfoOutline\";\nimport { useObjectRef as $bVyMs$useObjectRef, mergeRefs as $bVyMs$mergeRefs, useSlotId as $bVyMs$useSlotId } from \"@react-aria/utils\";\nimport $bVyMs$react, { useRef as $bVyMs$useRef, useMemo as $bVyMs$useMemo } from \"react\";\nimport { Text as $bVyMs$Text } from \"@react-spectrum/text\";\nimport { useLocalizedStringFormatter as $bVyMs$useLocalizedStringFormatter, useLocale as $bVyMs$useLocale } from \"@react-aria/i18n\";\nimport { useMenuItem as $bVyMs$useMenuItem } from \"@react-aria/menu\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $48fb8f5e1202c980$export$2ce376c2cc3355c8(props) {\n  let {\n    item: item,\n    state: state,\n    isVirtualized: isVirtualized\n  } = props;\n  let {\n    closeOnSelect: closeOnSelect\n  } = (0, $d94604d52c3e3feb$export$21c7ab35b39f78ec)();\n  let {\n    rendered: rendered,\n    key: key\n  } = item;\n  let stringFormatter = (0, $bVyMs$useLocalizedStringFormatter)((0, $parcel$interopDefault($bVyMs$intlStringsmodulejs)), '@react-spectrum/menu');\n  let {\n    direction: direction\n  } = (0, $bVyMs$useLocale)();\n  let submenuTriggerContext = (0, $d94604d52c3e3feb$export$dc2161044aa0b36d)();\n  let {\n    triggerRef: triggerRef,\n    ...submenuTriggerProps\n  } = submenuTriggerContext || {};\n  let isSubmenuTrigger = !!submenuTriggerContext;\n  let isUnavailable;\n  let ElementType = item.props.href ? 'a' : 'div';\n  if (isSubmenuTrigger) isUnavailable = submenuTriggerContext.isUnavailable;\n  let isDisabled = state.disabledKeys.has(key);\n  let isSelectable = !isSubmenuTrigger && state.selectionManager.selectionMode !== 'none';\n  let isSelected = isSelectable && state.selectionManager.isSelected(key);\n  let itemref = (0, $bVyMs$useRef)(null);\n  let ref = (0, $bVyMs$useObjectRef)((0, $bVyMs$useMemo)(() => (0, $bVyMs$mergeRefs)(itemref, triggerRef), [itemref, triggerRef]));\n  let {\n    menuItemProps: menuItemProps,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    keyboardShortcutProps: keyboardShortcutProps\n  } = (0, $bVyMs$useMenuItem)({\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    'aria-label': item['aria-label'],\n    key: key,\n    closeOnSelect: closeOnSelect,\n    isVirtualized: isVirtualized,\n    ...submenuTriggerProps\n  }, state, ref);\n  let endId = (0, $bVyMs$useSlotId)();\n  let endProps = {};\n  if (endId) {\n    endProps.id = endId;\n    menuItemProps['aria-describedby'] = [menuItemProps['aria-describedby'], endId].filter(Boolean).join(' ');\n  }\n  let contents = typeof rendered === 'string' ? /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$Text), null, rendered) : rendered;\n  return /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$FocusRing), {\n    focusRingClass: (0, $bVyMs$classNames)((0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $bVyMs$react).createElement(ElementType, {\n    ...menuItemProps,\n    ref: ref,\n    className: (0, $bVyMs$classNames)((0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs)), 'spectrum-Menu-item', {\n      'is-disabled': isDisabled,\n      'is-selected': isSelected,\n      'is-selectable': isSelectable,\n      'is-open': submenuTriggerProps.isOpen\n    })\n  }, /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$Grid), {\n    UNSAFE_className: (0, $bVyMs$classNames)((0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs)), 'spectrum-Menu-itemGrid')\n  }, /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$ClearSlots), null, /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$SlotProvider), {\n    slots: {\n      text: {\n        UNSAFE_className: (0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs))['spectrum-Menu-itemLabel'],\n        ...labelProps\n      },\n      end: {\n        UNSAFE_className: (0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs))['spectrum-Menu-end'],\n        ...endProps\n      },\n      icon: {\n        UNSAFE_className: (0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs))['spectrum-Menu-icon'],\n        size: 'S'\n      },\n      description: {\n        UNSAFE_className: (0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs))['spectrum-Menu-description'],\n        ...descriptionProps\n      },\n      keyboard: {\n        UNSAFE_className: (0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs))['spectrum-Menu-keyboard'],\n        ...keyboardShortcutProps\n      },\n      chevron: {\n        UNSAFE_className: (0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs))['spectrum-Menu-chevron'],\n        size: 'S'\n      }\n    }\n  }, contents, isSelected && /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$spectrumiconsuiCheckmarkMedium), {\n    slot: \"checkmark\",\n    UNSAFE_className: (0, $bVyMs$classNames)((0, $parcel$interopDefault($bVyMs$menu_vars_cssmodulejs)), 'spectrum-Menu-checkmark')\n  }), isUnavailable && /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$spectrumiconsworkflowInfoOutline), {\n    slot: \"end\",\n    size: \"XS\",\n    alignSelf: \"center\",\n    \"aria-label\": stringFormatter.format('unavailable')\n  }), isUnavailable == null && isSubmenuTrigger && (direction === 'rtl' ? /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$spectrumiconsworkflowChevronLeft), {\n    slot: \"chevron\"\n  }) : /*#__PURE__*/(0, $bVyMs$react).createElement((0, $bVyMs$spectrumiconsworkflowChevronRight), {\n    slot: \"chevron\"\n  })))))));\n}\nexport { $48fb8f5e1202c980$export$2ce376c2cc3355c8 as MenuItem };","map":{"version":3,"names":["$48fb8f5e1202c980$export$2ce376c2cc3355c8","props","item","state","isVirtualized","closeOnSelect","$d94604d52c3e3feb$export$21c7ab35b39f78ec","rendered","key","stringFormatter","$bVyMs$useLocalizedStringFormatter","$parcel$interopDefault","$bVyMs$intlStringsmodulejs","direction","$bVyMs$useLocale","submenuTriggerContext","$d94604d52c3e3feb$export$dc2161044aa0b36d","triggerRef","submenuTriggerProps","isSubmenuTrigger","isUnavailable","ElementType","href","isDisabled","disabledKeys","has","isSelectable","selectionManager","selectionMode","isSelected","itemref","$bVyMs$useRef","ref","$bVyMs$useObjectRef","$bVyMs$useMemo","$bVyMs$mergeRefs","menuItemProps","labelProps","descriptionProps","keyboardShortcutProps","$bVyMs$useMenuItem","endId","$bVyMs$useSlotId","endProps","id","filter","Boolean","join","contents","$bVyMs$react","createElement","$bVyMs$Text","$bVyMs$FocusRing","focusRingClass","$bVyMs$classNames","$bVyMs$menu_vars_cssmodulejs","className","isOpen","$bVyMs$Grid","UNSAFE_className","$bVyMs$ClearSlots","$bVyMs$SlotProvider","slots","text","end","icon","size","description","keyboard","chevron","$bVyMs$spectrumiconsuiCheckmarkMedium","slot","$bVyMs$spectrumiconsworkflowInfoOutline","alignSelf","format","$bVyMs$spectrumiconsworkflowChevronLeft","$bVyMs$spectrumiconsworkflowChevronRight"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/menu/dist/packages/@react-spectrum/menu/src/MenuItem.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport ChevronLeft from '@spectrum-icons/workflow/ChevronLeft';\nimport ChevronRight from '@spectrum-icons/workflow/ChevronRight';\nimport {classNames, ClearSlots, SlotProvider} from '@react-spectrum/utils';\nimport {DOMAttributes, Node} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {Grid} from '@react-spectrum/layout';\nimport InfoOutline from '@spectrum-icons/workflow/InfoOutline';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {mergeRefs, useObjectRef, useSlotId} from '@react-aria/utils';\nimport React, {useMemo, useRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/menu/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {TreeState} from '@react-stately/tree';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useMenuContext, useSubmenuTriggerContext} from './context';\nimport {useMenuItem} from '@react-aria/menu';\n\ninterface MenuItemProps<T> {\n  item: Node<T>,\n  state: TreeState<T>,\n  isVirtualized?: boolean\n}\n\n/** @private */\nexport function MenuItem<T>(props: MenuItemProps<T>) {\n  let {\n    item,\n    state,\n    isVirtualized\n  } = props;\n  let {\n    closeOnSelect\n  } = useMenuContext();\n  let {\n    rendered,\n    key\n  } = item;\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/menu');\n  let {direction} = useLocale();\n\n  let submenuTriggerContext = useSubmenuTriggerContext();\n  let {triggerRef, ...submenuTriggerProps} = submenuTriggerContext || {};\n  let isSubmenuTrigger = !!submenuTriggerContext;\n  let isUnavailable;\n  let ElementType: React.ElementType = item.props.href ? 'a' : 'div';\n\n  if (isSubmenuTrigger) {\n    isUnavailable = submenuTriggerContext.isUnavailable;\n  }\n\n  let isDisabled = state.disabledKeys.has(key);\n  let isSelectable = !isSubmenuTrigger && state.selectionManager.selectionMode !== 'none';\n  let isSelected = isSelectable && state.selectionManager.isSelected(key);\n  let itemref = useRef<any>(null);\n  let ref = useObjectRef(useMemo(() => mergeRefs(itemref, triggerRef), [itemref, triggerRef]));\n  let {\n    menuItemProps,\n    labelProps,\n    descriptionProps,\n    keyboardShortcutProps\n  } = useMenuItem(\n    {\n      isSelected,\n      isDisabled,\n      'aria-label': item['aria-label'],\n      key,\n      closeOnSelect,\n      isVirtualized,\n      ...submenuTriggerProps\n    },\n    state,\n    ref\n  );\n  let endId = useSlotId();\n  let endProps: DOMAttributes = {};\n  if (endId) {\n    endProps.id = endId;\n    menuItemProps['aria-describedby'] = [menuItemProps['aria-describedby'], endId].filter(Boolean).join(' ');\n  }\n\n  let contents = typeof rendered === 'string'\n    ? <Text>{rendered}</Text>\n    : rendered;\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <ElementType\n        {...menuItemProps}\n        ref={ref}\n        className={classNames(\n          styles,\n          'spectrum-Menu-item',\n          {\n            'is-disabled': isDisabled,\n            'is-selected': isSelected,\n            'is-selectable': isSelectable,\n            'is-open': submenuTriggerProps.isOpen\n          }\n        )}>\n        <Grid\n          UNSAFE_className={\n            classNames(\n              styles,\n              'spectrum-Menu-itemGrid'\n            )\n          }>\n          <ClearSlots>\n            <SlotProvider\n              slots={{\n                text: {UNSAFE_className: styles['spectrum-Menu-itemLabel'], ...labelProps},\n                end: {UNSAFE_className: styles['spectrum-Menu-end'], ...endProps},\n                icon: {UNSAFE_className: styles['spectrum-Menu-icon'], size: 'S'},\n                description: {UNSAFE_className: styles['spectrum-Menu-description'], ...descriptionProps},\n                keyboard: {UNSAFE_className: styles['spectrum-Menu-keyboard'], ...keyboardShortcutProps},\n                chevron: {UNSAFE_className: styles['spectrum-Menu-chevron'], size: 'S'}\n              }}>\n              {contents}\n              {isSelected &&\n                <CheckmarkMedium\n                  slot=\"checkmark\"\n                  UNSAFE_className={\n                    classNames(\n                      styles,\n                      'spectrum-Menu-checkmark'\n                    )\n                  } />\n              }\n              {\n                isUnavailable && <InfoOutline slot=\"end\" size=\"XS\" alignSelf=\"center\" aria-label={stringFormatter.format('unavailable')} />\n              }\n              {\n                isUnavailable == null && isSubmenuTrigger && (direction === 'rtl' ? <ChevronLeft slot=\"chevron\" /> : <ChevronRight slot=\"chevron\" />)\n              }\n            </SlotProvider>\n          </ClearSlots>\n        </Grid>\n      </ElementType>\n    </FocusRing>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}