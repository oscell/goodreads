{"ast":null,"code":"import { useState as $f8mV7$useState, useCallback as $f8mV7$useCallback } from \"react\";\nimport { useId as $f8mV7$useId, mergeProps as $f8mV7$mergeProps } from \"@react-aria/utils\";\nimport { privateValidationStateProp as $f8mV7$privateValidationStateProp } from \"@react-stately/form\";\nimport { useFocusWithin as $f8mV7$useFocusWithin, useScrollWheel as $f8mV7$useScrollWheel } from \"@react-aria/interactions\";\nimport { useFormattedTextField as $f8mV7$useFormattedTextField } from \"@react-aria/textfield\";\nimport { useSpinButton as $f8mV7$useSpinButton } from \"@react-aria/spinbutton\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f6896b05b2ecad12$export$77e32ca575a28fdf(props, state, ref) {\n  let {\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    isWheelDisabled: isWheelDisabled,\n    validationBehavior = 'aria'\n  } = props;\n  let {\n    colorValue: colorValue,\n    inputValue: inputValue,\n    increment: increment,\n    decrement: decrement,\n    incrementToMax: incrementToMax,\n    decrementToMin: decrementToMin,\n    commit: commit\n  } = state;\n  let inputId = (0, $f8mV7$useId)();\n  let {\n    spinButtonProps: spinButtonProps\n  } = (0, $f8mV7$useSpinButton)({\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    maxValue: 0xFFFFFF,\n    minValue: 0,\n    onIncrement: increment,\n    onIncrementToMax: incrementToMax,\n    onDecrement: decrement,\n    onDecrementToMin: decrementToMin,\n    value: colorValue ? colorValue.toHexInt() : undefined,\n    textValue: colorValue ? colorValue.toString('hex') : undefined\n  });\n  let [focusWithin, setFocusWithin] = (0, $f8mV7$useState)(false);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $f8mV7$useFocusWithin)({\n    isDisabled: isDisabled,\n    onFocusWithinChange: setFocusWithin\n  });\n  let onWheel = (0, $f8mV7$useCallback)(e => {\n    if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) return;\n    if (e.deltaY > 0) increment();else if (e.deltaY < 0) decrement();\n  }, [decrement, increment]);\n  // If the input isn't supposed to receive input, disable scrolling.\n  let scrollingDisabled = isWheelDisabled || isDisabled || isReadOnly || !focusWithin;\n  (0, $f8mV7$useScrollWheel)({\n    onScroll: onWheel,\n    isDisabled: scrollingDisabled\n  }, ref);\n  let onChange = value => {\n    if (state.validate(value)) state.setInputValue(value);\n  };\n  let {\n    inputProps: inputProps,\n    ...otherProps\n  } = (0, $f8mV7$useFormattedTextField)({\n    ...props,\n    id: inputId,\n    value: inputValue,\n    defaultValue: undefined,\n    validate: undefined,\n    [(0, $f8mV7$privateValidationStateProp)]: state,\n    type: 'text',\n    autoComplete: 'off',\n    onChange: onChange\n  }, state, ref);\n  inputProps = (0, $f8mV7$mergeProps)(inputProps, spinButtonProps, focusWithinProps, {\n    role: 'textbox',\n    'aria-valuemax': null,\n    'aria-valuemin': null,\n    'aria-valuenow': null,\n    'aria-valuetext': null,\n    autoCorrect: 'off',\n    spellCheck: 'false',\n    onBlur: commit\n  });\n  if (validationBehavior === 'native') inputProps['aria-required'] = undefined;\n  return {\n    inputProps: inputProps,\n    ...otherProps\n  };\n}\nexport { $f6896b05b2ecad12$export$77e32ca575a28fdf as useColorField };","map":{"version":3,"names":["$f6896b05b2ecad12$export$77e32ca575a28fdf","props","state","ref","isDisabled","isReadOnly","isRequired","isWheelDisabled","validationBehavior","colorValue","inputValue","increment","decrement","incrementToMax","decrementToMin","commit","inputId","$f8mV7$useId","spinButtonProps","$f8mV7$useSpinButton","maxValue","minValue","onIncrement","onIncrementToMax","onDecrement","onDecrementToMin","value","toHexInt","undefined","textValue","toString","focusWithin","setFocusWithin","$f8mV7$useState","focusWithinProps","$f8mV7$useFocusWithin","onFocusWithinChange","onWheel","$f8mV7$useCallback","e","Math","abs","deltaY","deltaX","scrollingDisabled","$f8mV7$useScrollWheel","onScroll","onChange","validate","setInputValue","inputProps","otherProps","$f8mV7$useFormattedTextField","id","defaultValue","$f8mV7$privateValidationStateProp","type","autoComplete","$f8mV7$mergeProps","role","autoCorrect","spellCheck","onBlur"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/color/dist/packages/@react-aria/color/src/useColorField.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaColorFieldProps} from '@react-types/color';\nimport {ColorFieldState} from '@react-stately/color';\nimport {DOMAttributes, ValidationResult} from '@react-types/shared';\nimport {\n  InputHTMLAttributes,\n  LabelHTMLAttributes,\n  RefObject,\n  useCallback,\n  useState\n} from 'react';\nimport {mergeProps, useId} from '@react-aria/utils';\nimport {privateValidationStateProp} from '@react-stately/form';\nimport {useFocusWithin, useScrollWheel} from '@react-aria/interactions';\nimport {useFormattedTextField} from '@react-aria/textfield';\nimport {useSpinButton} from '@react-aria/spinbutton';\n\nexport interface ColorFieldAria extends ValidationResult {\n  /** Props for the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Props for the text field's description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the text field's error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a color field component.\n * Color fields allow users to enter and adjust a hex color value.\n */\nexport function useColorField(\n  props: AriaColorFieldProps,\n  state: ColorFieldState,\n  ref: RefObject<HTMLInputElement | null>\n): ColorFieldAria {\n  let {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isWheelDisabled,\n    validationBehavior = 'aria'\n  } = props;\n\n  let {\n    colorValue,\n    inputValue,\n    increment,\n    decrement,\n    incrementToMax,\n    decrementToMin,\n    commit\n  } = state;\n\n  let inputId = useId();\n  let {spinButtonProps} = useSpinButton(\n    {\n      isDisabled,\n      isReadOnly,\n      isRequired,\n      maxValue: 0xFFFFFF,\n      minValue: 0,\n      onIncrement: increment,\n      onIncrementToMax: incrementToMax,\n      onDecrement: decrement,\n      onDecrementToMin: decrementToMin,\n      value: colorValue ? colorValue.toHexInt() : undefined,\n      textValue: colorValue ? colorValue.toString('hex') : undefined\n    }\n  );\n\n  let [focusWithin, setFocusWithin] = useState(false);\n  let {focusWithinProps} = useFocusWithin({isDisabled, onFocusWithinChange: setFocusWithin});\n\n  let onWheel = useCallback((e) => {\n    if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) {\n      return;\n    }\n    if (e.deltaY > 0) {\n      increment();\n    } else if (e.deltaY < 0) {\n      decrement();\n    }\n  }, [decrement, increment]);\n  // If the input isn't supposed to receive input, disable scrolling.\n  let scrollingDisabled = isWheelDisabled || isDisabled || isReadOnly || !focusWithin;\n  useScrollWheel({onScroll: onWheel, isDisabled: scrollingDisabled}, ref);\n\n  let onChange = value => {\n    if (state.validate(value)) {\n      state.setInputValue(value);\n    }\n  };\n\n  let {inputProps, ...otherProps} = useFormattedTextField({\n    ...props,\n    id: inputId,\n    value: inputValue,\n    defaultValue: undefined,\n    validate: undefined,\n    [privateValidationStateProp]: state,\n    type: 'text',\n    autoComplete: 'off',\n    onChange\n  }, state, ref);\n\n  inputProps = mergeProps(inputProps, spinButtonProps, focusWithinProps, {\n    role: 'textbox',\n    'aria-valuemax': null,\n    'aria-valuemin': null,\n    'aria-valuenow': null,\n    'aria-valuetext': null,\n    autoCorrect: 'off',\n    spellCheck: 'false',\n    onBlur: commit\n  });\n\n  if (validationBehavior === 'native') {\n    inputProps['aria-required'] = undefined;\n  }\n\n  return {\n    inputProps,\n    ...otherProps\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}