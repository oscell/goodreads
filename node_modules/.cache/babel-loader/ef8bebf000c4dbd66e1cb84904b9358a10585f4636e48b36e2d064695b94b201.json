{"ast":null,"code":"import { normalizeColor as $799cddbef784668f$export$4cde5df63f53f473, parseColor as $799cddbef784668f$export$6e865ea70d7724f } from \"./Color.mjs\";\nimport { useSliderState as $1Eavr$useSliderState } from \"@react-stately/slider\";\nimport { useControlledState as $1Eavr$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $1Eavr$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $25a25ac0d1624665$export$57bc203e1c9c6d44(props) {\n  let {\n    channel: channel,\n    colorSpace: colorSpace,\n    value: value,\n    defaultValue: defaultValue,\n    onChange: onChange,\n    locale: locale,\n    ...otherProps\n  } = props;\n  if (value == null && defaultValue == null) throw new Error('useColorSliderState requires a value or defaultValue');\n  if (value) value = (0, $799cddbef784668f$export$4cde5df63f53f473)(value);\n  if (defaultValue) defaultValue = (0, $799cddbef784668f$export$4cde5df63f53f473)(defaultValue);\n  // safe to cast value and defaultValue to Color, one of them will always be defined because if neither are, we throw an error\n  let [colorValue, setColor] = (0, $1Eavr$useControlledState)(value, defaultValue, onChange);\n  let color = (0, $1Eavr$useMemo)(() => colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [colorValue, colorSpace]);\n  let sliderState = (0, $1Eavr$useSliderState)({\n    ...color.getChannelRange(channel),\n    ...otherProps,\n    // Unused except in getThumbValueLabel, which is overridden below. null to localize the TypeScript error for ignoring.\n    // @ts-ignore\n    numberFormatter: null,\n    value: color.getChannelValue(channel),\n    onChange(v) {\n      setColor(color.withChannelValue(channel, v));\n    },\n    onChangeEnd(v) {\n      // onChange will have already been called with the right value, this is just to trigger onChangeEnd\n      if (props.onChangeEnd) props.onChangeEnd(color.withChannelValue(channel, v));\n    }\n  });\n  let {\n    step: step,\n    pageSize: pageSize\n  } = color.getChannelRange(channel);\n  return {\n    ...sliderState,\n    value: color,\n    setValue(value) {\n      setColor((0, $799cddbef784668f$export$4cde5df63f53f473)(value));\n    },\n    getDisplayColor() {\n      switch (channel) {\n        case 'hue':\n          return (0, $799cddbef784668f$export$6e865ea70d7724f)(`hsl(${color.getChannelValue('hue')}, 100%, 50%)`);\n        case 'lightness':\n        case 'brightness':\n        case 'saturation':\n        case 'red':\n        case 'green':\n        case 'blue':\n          return color.withChannelValue('alpha', 1);\n        case 'alpha':\n          return color;\n        default:\n          throw new Error('Unknown color channel: ' + channel);\n      }\n    },\n    getThumbValueLabel() {\n      return color.formatChannelValue(channel, locale);\n    },\n    step: step,\n    pageSize: pageSize,\n    isDragging: sliderState.isThumbDragging(0)\n  };\n}\nexport { $25a25ac0d1624665$export$57bc203e1c9c6d44 as useColorSliderState };","map":{"version":3,"names":["$25a25ac0d1624665$export$57bc203e1c9c6d44","props","channel","colorSpace","value","defaultValue","onChange","locale","otherProps","Error","$799cddbef784668f$export$4cde5df63f53f473","colorValue","setColor","$1Eavr$useControlledState","color","$1Eavr$useMemo","toFormat","sliderState","$1Eavr$useSliderState","getChannelRange","numberFormatter","getChannelValue","v","withChannelValue","onChangeEnd","step","pageSize","setValue","getDisplayColor","$799cddbef784668f$export$6e865ea70d7724f","getThumbValueLabel","formatChannelValue","isDragging","isThumbDragging"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/useColorSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Color, ColorSliderProps} from '@react-types/color';\nimport {normalizeColor, parseColor} from './Color';\nimport {SliderState, useSliderState} from '@react-stately/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface ColorSliderState extends SliderState {\n  /** The current color value represented by the color slider. */\n  readonly value: Color,\n  /** Sets the current color value. If a string is passed, it will be parsed to a Color. */\n  setValue(value: string | Color): void,\n  /** Returns the color that should be displayed in the slider instead of `value` or the optional parameter. */\n  getDisplayColor(): Color,\n  /** Whether the color slider is currently being dragged. */\n  readonly isDragging: boolean\n}\n\n\nexport interface ColorSliderStateOptions extends ColorSliderProps {\n  /** The locale to use for formatting the color channel value. */\n  locale: string\n}\n\n/**\n * Provides state management for a color slider component.\n * Color sliders allow users to adjust an individual channel of a color value.\n */\nexport function useColorSliderState(props: ColorSliderStateOptions): ColorSliderState {\n  let {channel, colorSpace, value, defaultValue, onChange, locale, ...otherProps} = props;\n  if (value == null && defaultValue == null) {\n    throw new Error('useColorSliderState requires a value or defaultValue');\n  }\n\n  if (value) {\n    value = normalizeColor(value);\n  }\n  if (defaultValue) {\n    defaultValue = normalizeColor(defaultValue);\n  }\n  // safe to cast value and defaultValue to Color, one of them will always be defined because if neither are, we throw an error\n  let [colorValue, setColor] = useControlledState<Color>(value as Color, defaultValue as Color, onChange);\n  let color = useMemo(() => colorSpace && colorValue ? colorValue.toFormat(colorSpace) : colorValue, [colorValue, colorSpace]);\n  let sliderState = useSliderState({\n    ...color.getChannelRange(channel),\n    ...otherProps,\n    // Unused except in getThumbValueLabel, which is overridden below. null to localize the TypeScript error for ignoring.\n    // @ts-ignore\n    numberFormatter: null,\n    value: color.getChannelValue(channel),\n    onChange(v) {\n      setColor(color.withChannelValue(channel, v));\n    },\n    onChangeEnd(v) {\n      // onChange will have already been called with the right value, this is just to trigger onChangeEnd\n      if (props.onChangeEnd) {\n        props.onChangeEnd(color.withChannelValue(channel, v));\n      }\n    }\n  });\n\n  let {step, pageSize} = color.getChannelRange(channel);\n  return {\n    ...sliderState,\n    value: color,\n    setValue(value) {\n      setColor(normalizeColor(value));\n    },\n    getDisplayColor() {\n      switch (channel) {\n        case 'hue':\n          return parseColor(`hsl(${color.getChannelValue('hue')}, 100%, 50%)`);\n        case 'lightness':\n        case 'brightness':\n        case 'saturation':\n        case 'red':\n        case 'green':\n        case 'blue':\n          return color.withChannelValue('alpha', 1);\n        case 'alpha': {\n          return color;\n        }\n        default:\n          throw new Error('Unknown color channel: ' + channel);\n      }\n    },\n    getThumbValueLabel() {\n      return color.formatChannelValue(channel, locale);\n    },\n    step,\n    pageSize,\n    isDragging: sliderState.isThumbDragging(0)\n  };\n}\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AAuCO,SAASA,0CAAoBC,KAA8B;EAChE,IAAI;IAAAC,OAAA,EAACA,OAAO;IAAAC,UAAA,EAAEA,UAAU;IAAAC,KAAA,EAAEA,KAAK;IAAAC,YAAA,EAAEA,YAAY;IAAAC,QAAA,EAAEA,QAAQ;IAAAC,MAAA,EAAEA,MAAM;IAAE,GAAGC;EAAA,CAAW,GAAGP,KAAA;EAClF,IAAIG,KAAA,IAAS,QAAQC,YAAA,IAAgB,MACnC,MAAM,IAAII,KAAA,CAAM;EAGlB,IAAIL,KAAA,EACFA,KAAA,GAAQ,IAAAM,yCAAa,EAAEN,KAAA;EAEzB,IAAIC,YAAA,EACFA,YAAA,GAAe,IAAAK,yCAAa,EAAEL,YAAA;EAEhC;EACA,IAAI,CAACM,UAAA,EAAYC,QAAA,CAAS,GAAG,IAAAC,yBAAiB,EAAST,KAAA,EAAgBC,YAAA,EAAuBC,QAAA;EAC9F,IAAIQ,KAAA,GAAQ,IAAAC,cAAM,EAAE,MAAMZ,UAAA,IAAcQ,UAAA,GAAaA,UAAA,CAAWK,QAAQ,CAACb,UAAA,IAAcQ,UAAA,EAAY,CAACA,UAAA,EAAYR,UAAA,CAAW;EAC3H,IAAIc,WAAA,GAAc,IAAAC,qBAAa,EAAE;IAC/B,GAAGJ,KAAA,CAAMK,eAAe,CAACjB,OAAA,CAAQ;IACjC,GAAGM,UAAU;IACb;IACA;IACAY,eAAA,EAAiB;IACjBhB,KAAA,EAAOU,KAAA,CAAMO,eAAe,CAACnB,OAAA;IAC7BI,SAASgB,CAAC;MACRV,QAAA,CAASE,KAAA,CAAMS,gBAAgB,CAACrB,OAAA,EAASoB,CAAA;IAC3C;IACAE,YAAYF,CAAC;MACX;MACA,IAAIrB,KAAA,CAAMuB,WAAW,EACnBvB,KAAA,CAAMuB,WAAW,CAACV,KAAA,CAAMS,gBAAgB,CAACrB,OAAA,EAASoB,CAAA;IAEtD;EACF;EAEA,IAAI;IAAAG,IAAA,EAACA,IAAI;IAAAC,QAAA,EAAEA;EAAQ,CAAC,GAAGZ,KAAA,CAAMK,eAAe,CAACjB,OAAA;EAC7C,OAAO;IACL,GAAGe,WAAW;IACdb,KAAA,EAAOU,KAAA;IACPa,SAASvB,KAAK;MACZQ,QAAA,CAAS,IAAAF,yCAAa,EAAEN,KAAA;IAC1B;IACAwB,gBAAA;MACE,QAAQ1B,OAAA;QACN,KAAK;UACH,OAAO,IAAA2B,wCAAS,EAAE,OAAOf,KAAA,CAAMO,eAAe,CAAC,oBAAoB;QACrE,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;UACH,OAAOP,KAAA,CAAMS,gBAAgB,CAAC,SAAS;QACzC,KAAK;UACH,OAAOT,KAAA;QAET;UACE,MAAM,IAAIL,KAAA,CAAM,4BAA4BP,OAAA;MAChD;IACF;IACA4B,mBAAA;MACE,OAAOhB,KAAA,CAAMiB,kBAAkB,CAAC7B,OAAA,EAASK,MAAA;IAC3C;UACAkB,IAAA;cACAC,QAAA;IACAM,UAAA,EAAYf,WAAA,CAAYgB,eAAe,CAAC;EAC1C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}