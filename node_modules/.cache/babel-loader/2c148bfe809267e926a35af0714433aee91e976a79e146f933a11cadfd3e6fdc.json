{"ast":null,"code":"import $9wJsi$react, { useState as $9wJsi$useState, useEffect as $9wJsi$useEffect, useContext as $9wJsi$useContext } from \"react\";\nimport { useIsSSR as $9wJsi$useIsSSR } from \"@react-aria/ssr\";\nconst $1051245f87c5981d$var$Context = /*#__PURE__*/(0, $9wJsi$react).createContext(null);\n$1051245f87c5981d$var$Context.displayName = 'BreakpointContext';\nfunction $1051245f87c5981d$export$8214320346cf5104(props) {\n  let {\n    children: children,\n    matchedBreakpoints: matchedBreakpoints\n  } = props;\n  return /*#__PURE__*/(0, $9wJsi$react).createElement($1051245f87c5981d$var$Context.Provider, {\n    value: {\n      matchedBreakpoints: matchedBreakpoints\n    }\n  }, children);\n}\nfunction $1051245f87c5981d$export$140ae7baa51cca23(breakpoints) {\n  let entries = Object.entries(breakpoints).sort(([, valueA], [, valueB]) => valueB - valueA);\n  let breakpointQueries = entries.map(([, value]) => `(min-width: ${value}px)`);\n  let supportsMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';\n  let getBreakpointHandler = () => {\n    let matched = [];\n    for (let i in breakpointQueries) {\n      let query = breakpointQueries[i];\n      if (window.matchMedia(query).matches) matched.push(entries[i][0]);\n    }\n    matched.push('base');\n    return matched;\n  };\n  let [breakpoint, setBreakpoint] = (0, $9wJsi$useState)(() => supportsMatchMedia ? getBreakpointHandler() : ['base']);\n  (0, $9wJsi$useEffect)(() => {\n    if (!supportsMatchMedia) return;\n    let onResize = () => {\n      const breakpointHandler = getBreakpointHandler();\n      setBreakpoint(previousBreakpointHandler => {\n        if (previousBreakpointHandler.length !== breakpointHandler.length || previousBreakpointHandler.some((breakpoint, idx) => breakpoint !== breakpointHandler[idx])) return [...breakpointHandler]; // Return a new array to force state change\n        return previousBreakpointHandler;\n      });\n    };\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [supportsMatchMedia]);\n  // If in SSR, the media query should never match. Once the page hydrates,\n  // this will update and the real value will be returned.\n  let isSSR = (0, $9wJsi$useIsSSR)();\n  return isSSR ? ['base'] : breakpoint;\n}\nfunction $1051245f87c5981d$export$199d6754bdf4e1e3() {\n  return (0, $9wJsi$useContext)($1051245f87c5981d$var$Context);\n}\nexport { $1051245f87c5981d$export$8214320346cf5104 as BreakpointProvider, $1051245f87c5981d$export$140ae7baa51cca23 as useMatchedBreakpoints, $1051245f87c5981d$export$199d6754bdf4e1e3 as useBreakpoint };","map":{"version":3,"names":["$1051245f87c5981d$var$Context","$9wJsi$react","createContext","displayName","$1051245f87c5981d$export$8214320346cf5104","props","children","matchedBreakpoints","createElement","Provider","value","$1051245f87c5981d$export$140ae7baa51cca23","breakpoints","entries","Object","sort","valueA","valueB","breakpointQueries","map","supportsMatchMedia","window","matchMedia","getBreakpointHandler","matched","i","query","matches","push","breakpoint","setBreakpoint","$9wJsi$useState","$9wJsi$useEffect","onResize","breakpointHandler","previousBreakpointHandler","length","some","idx","addEventListener","removeEventListener","isSSR","$9wJsi$useIsSSR","$1051245f87c5981d$export$199d6754bdf4e1e3","$9wJsi$useContext"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/utils/dist/packages/@react-spectrum/utils/src/BreakpointProvider.tsx"],"sourcesContent":["import React, {ReactNode, useContext, useEffect, useState} from 'react';\nimport {useIsSSR} from '@react-aria/ssr';\n\ninterface Breakpoints {\n  S?: number,\n  M?: number,\n  L?: number,\n  [custom: string]: number | undefined\n}\n\ninterface BreakpointContext {\n  matchedBreakpoints: string[]\n}\n\nconst Context = React.createContext<BreakpointContext>(null);\nContext.displayName = 'BreakpointContext';\n\ninterface BreakpointProviderProps {\n  children?: ReactNode,\n  matchedBreakpoints: string[]\n}\n\nexport function BreakpointProvider(props: BreakpointProviderProps) {\n  let {\n    children,\n    matchedBreakpoints\n  } = props;\n  return (\n    <Context.Provider\n      value={{matchedBreakpoints}} >\n      {children}\n    </Context.Provider>\n  );\n}\n\nexport function useMatchedBreakpoints(breakpoints: Breakpoints): string[] {\n  let entries = Object.entries(breakpoints).sort(([, valueA], [, valueB]) => valueB - valueA);\n  let breakpointQueries = entries.map(([, value]) => `(min-width: ${value}px)`);\n\n  let supportsMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';\n  let getBreakpointHandler = () => {\n    let matched = [];\n    for (let i in breakpointQueries) {\n      let query = breakpointQueries[i];\n      if (window.matchMedia(query).matches) {\n        matched.push(entries[i][0]);\n      }\n    }\n    matched.push('base');\n    return matched;\n  };\n\n  let [breakpoint, setBreakpoint] = useState(() =>\n    supportsMatchMedia\n      ? getBreakpointHandler()\n      : ['base']\n  );\n\n  useEffect(() => {\n    if (!supportsMatchMedia) {\n      return;\n    }\n\n    let onResize = () => {\n      const breakpointHandler = getBreakpointHandler();\n\n      setBreakpoint(previousBreakpointHandler => {\n        if (previousBreakpointHandler.length !== breakpointHandler.length ||\n          previousBreakpointHandler.some((breakpoint, idx) => breakpoint !== breakpointHandler[idx])) {\n          return [...breakpointHandler]; // Return a new array to force state change\n        }\n\n        return previousBreakpointHandler;\n      });\n    };\n\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('resize', onResize);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [supportsMatchMedia]);\n\n  // If in SSR, the media query should never match. Once the page hydrates,\n  // this will update and the real value will be returned.\n  let isSSR = useIsSSR();\n  return isSSR ? ['base'] : breakpoint;\n}\n\nexport function useBreakpoint(): BreakpointContext {\n  return useContext(Context);\n}\n"],"mappings":";;AAcA,MAAMA,6BAAA,gBAAU,IAAAC,YAAI,EAAEC,aAAa,CAAoB;AACvDF,6BAAA,CAAQG,WAAW,GAAG;AAOf,SAASC,0CAAmBC,KAA8B;EAC/D,IAAI;IAAAC,QAAA,EACFA,QAAQ;IAAAC,kBAAA,EACRA;EAAkB,CACnB,GAAGF,KAAA;EACJ,oBACE,IAAAJ,YAAA,EAAAO,aAAA,CAACR,6BAAA,CAAQS,QAAQ;IACfC,KAAA,EAAO;0BAACH;IAAkB;KACzBD,QAAA;AAGP;AAEO,SAASK,0CAAsBC,WAAwB;EAC5D,IAAIC,OAAA,GAAUC,MAAA,CAAOD,OAAO,CAACD,WAAA,EAAaG,IAAI,CAAC,CAAC,GAAGC,MAAA,CAAO,EAAE,GAAGC,MAAA,CAAO,KAAKA,MAAA,GAASD,MAAA;EACpF,IAAIE,iBAAA,GAAoBL,OAAA,CAAQM,GAAG,CAAC,CAAC,GAAGT,KAAA,CAAM,KAAK,eAAeA,KAAA,KAAU;EAE5E,IAAIU,kBAAA,GAAqB,OAAOC,MAAA,KAAW,eAAe,OAAOA,MAAA,CAAOC,UAAU,KAAK;EACvF,IAAIC,oBAAA,GAAuBA,CAAA;IACzB,IAAIC,OAAA,GAAU,EAAE;IAChB,KAAK,IAAIC,CAAA,IAAKP,iBAAA,EAAmB;MAC/B,IAAIQ,KAAA,GAAQR,iBAAiB,CAACO,CAAA,CAAE;MAChC,IAAIJ,MAAA,CAAOC,UAAU,CAACI,KAAA,EAAOC,OAAO,EAClCH,OAAA,CAAQI,IAAI,CAACf,OAAO,CAACY,CAAA,CAAE,CAAC,EAAE;IAE9B;IACAD,OAAA,CAAQI,IAAI,CAAC;IACb,OAAOJ,OAAA;EACT;EAEA,IAAI,CAACK,UAAA,EAAYC,aAAA,CAAc,GAAG,IAAAC,eAAO,EAAE,MACzCX,kBAAA,GACIG,oBAAA,KACA,CAAC,OAAO;EAGd,IAAAS,gBAAQ,EAAE;IACR,IAAI,CAACZ,kBAAA,EACH;IAGF,IAAIa,QAAA,GAAWA,CAAA;MACb,MAAMC,iBAAA,GAAoBX,oBAAA;MAE1BO,aAAA,CAAcK,yBAAA;QACZ,IAAIA,yBAAA,CAA0BC,MAAM,KAAKF,iBAAA,CAAkBE,MAAM,IAC/DD,yBAAA,CAA0BE,IAAI,CAAC,CAACR,UAAA,EAAYS,GAAA,KAAQT,UAAA,KAAeK,iBAAiB,CAACI,GAAA,CAAI,GACzF,OAAO,C,GAAIJ,iBAAA,CAAkB,EAAE;QAGjC,OAAOC,yBAAA;MACT;IACF;IAEAd,MAAA,CAAOkB,gBAAgB,CAAC,UAAUN,QAAA;IAClC,OAAO;MACLZ,MAAA,CAAOmB,mBAAmB,CAAC,UAAUP,QAAA;IACvC;IACF;EACA,GAAG,CAACb,kBAAA,CAAmB;EAEvB;EACA;EACA,IAAIqB,KAAA,GAAQ,IAAAC,eAAO;EACnB,OAAOD,KAAA,GAAQ,CAAC,OAAO,GAAGZ,UAAA;AAC5B;AAEO,SAASc,0CAAA;EACd,OAAO,IAAAC,iBAAS,EAAE5C,6BAAA;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}