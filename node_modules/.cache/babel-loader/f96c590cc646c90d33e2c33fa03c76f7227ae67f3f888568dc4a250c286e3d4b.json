{"ast":null,"code":"var _jsxFileName = \"/Users/oscar.meunier/Documents/Personal/goodreads/src/components/Filters/RangeSlider/RangeSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useRange } from 'react-instantsearch';\nimport { RangeSlider as SpectrumRangeSlider } from '@adobe/react-spectrum';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function RangeSlider(props) {\n  _s();\n  const {\n    start,\n    range,\n    canRefine,\n    refine\n  } = useRange(props);\n  const {\n    min,\n    max\n  } = range;\n  const [value, setValue] = useState({\n    start: min,\n    end: max\n  });\n  const from = Math.max(min, Number.isFinite(start[0]) ? start[0] : min);\n  const to = Math.min(max, Number.isFinite(start[1]) ? start[1] : max);\n  useEffect(() => {\n    setValue({\n      start: from,\n      end: to\n    });\n    console.log(to);\n  }, [from, to]);\n\n  // New: Create an array of points based on the range\n  const points = Array.from({\n    length: max - min + 1\n  }, (_, i) => min + i);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"customeRefinementList\",\n    children: [/*#__PURE__*/_jsxDEV(SpectrumRangeSlider, {\n      label: \"Ratings\",\n      minValue: min,\n      maxValue: max,\n      value: value,\n      onChange: setValue,\n      onChangeEnd: ({\n        start,\n        end\n      }) => refine([start, end]),\n      isDisabled: !canRefine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"points\",\n      children: points.map(point => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"point\",\n        children: point\n      }, point, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(RangeSlider, \"yK0WxQUFkQTK1kDJPFi8dKAFAXM=\", false, function () {\n  return [useRange];\n});\n_c = RangeSlider;\nvar _c;\n$RefreshReg$(_c, \"RangeSlider\");","map":{"version":3,"names":["React","useState","useEffect","useRange","RangeSlider","SpectrumRangeSlider","jsxDEV","_jsxDEV","props","_s","start","range","canRefine","refine","min","max","value","setValue","end","from","Math","Number","isFinite","to","console","log","points","Array","length","_","i","className","children","label","minValue","maxValue","onChange","onChangeEnd","isDisabled","fileName","_jsxFileName","lineNumber","columnNumber","map","point","_c","$RefreshReg$"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/src/components/Filters/RangeSlider/RangeSlider.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useRange } from 'react-instantsearch';\nimport { RangeSlider as SpectrumRangeSlider } from '@adobe/react-spectrum';\n\nexport function RangeSlider(props) {\n  const { start, range, canRefine, refine } = useRange(props);\n  const { min, max } = range;\n  const [value, setValue] = useState({ start: min, end: max });\n\n  const from = Math.max(min, Number.isFinite(start[0]) ? start[0] : min);\n  const to = Math.min(max, Number.isFinite(start[1]) ? start[1] : max);\n\n  useEffect(() => {\n    setValue({ start: from, end: to });\n    console.log(to)\n  }, [from, to]);\n\n  // New: Create an array of points based on the range\n  const points = Array.from({ length: max - min + 1 }, (_, i) => min + i);\n\n  return (\n    <div className=\"customeRefinementList\">\n      <SpectrumRangeSlider\n        label=\"Ratings\"\n        minValue={min}\n        maxValue={max}\n        value={value}\n        onChange={setValue}\n        onChangeEnd={({ start, end }) => refine([start, end])}\n        isDisabled={!canRefine}\n      />\n      {/* New: Render points along the range slider */}\n      <div className=\"points\">\n        {points.map(point => (\n          <span key={point} className=\"point\">{point}</span>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,WAAW,IAAIC,mBAAmB,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3E,OAAO,SAASH,WAAWA,CAACI,KAAK,EAAE;EAAAC,EAAA;EACjC,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC,SAAS;IAAEC;EAAO,CAAC,GAAGV,QAAQ,CAACK,KAAK,CAAC;EAC3D,MAAM;IAAEM,GAAG;IAAEC;EAAI,CAAC,GAAGJ,KAAK;EAC1B,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC;IAAES,KAAK,EAAEI,GAAG;IAAEI,GAAG,EAAEH;EAAI,CAAC,CAAC;EAE5D,MAAMI,IAAI,GAAGC,IAAI,CAACL,GAAG,CAACD,GAAG,EAAEO,MAAM,CAACC,QAAQ,CAACZ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGI,GAAG,CAAC;EACtE,MAAMS,EAAE,GAAGH,IAAI,CAACN,GAAG,CAACC,GAAG,EAAEM,MAAM,CAACC,QAAQ,CAACZ,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGK,GAAG,CAAC;EAEpEb,SAAS,CAAC,MAAM;IACde,QAAQ,CAAC;MAAEP,KAAK,EAAES,IAAI;MAAED,GAAG,EAAEK;IAAG,CAAC,CAAC;IAClCC,OAAO,CAACC,GAAG,CAACF,EAAE,CAAC;EACjB,CAAC,EAAE,CAACJ,IAAI,EAAEI,EAAE,CAAC,CAAC;;EAEd;EACA,MAAMG,MAAM,GAAGC,KAAK,CAACR,IAAI,CAAC;IAAES,MAAM,EAAEb,GAAG,GAAGD,GAAG,GAAG;EAAE,CAAC,EAAE,CAACe,CAAC,EAAEC,CAAC,KAAKhB,GAAG,GAAGgB,CAAC,CAAC;EAEvE,oBACEvB,OAAA;IAAKwB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCzB,OAAA,CAACF,mBAAmB;MAClB4B,KAAK,EAAC,SAAS;MACfC,QAAQ,EAAEpB,GAAI;MACdqB,QAAQ,EAAEpB,GAAI;MACdC,KAAK,EAAEA,KAAM;MACboB,QAAQ,EAAEnB,QAAS;MACnBoB,WAAW,EAAEA,CAAC;QAAE3B,KAAK;QAAEQ;MAAI,CAAC,KAAKL,MAAM,CAAC,CAACH,KAAK,EAAEQ,GAAG,CAAC,CAAE;MACtDoB,UAAU,EAAE,CAAC1B;IAAU;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAEFnC,OAAA;MAAKwB,SAAS,EAAC,QAAQ;MAAAC,QAAA,EACpBN,MAAM,CAACiB,GAAG,CAACC,KAAK,iBACfrC,OAAA;QAAkBwB,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAEY;MAAK,GAA/BA,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiC,CAClD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjC,EAAA,CAnCeL,WAAW;EAAA,QACmBD,QAAQ;AAAA;AAAA0C,EAAA,GADtCzC,WAAW;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}