{"ast":null,"code":"import { readFromDataTransfer as $7252cd45fc48c07c$export$d9e760437831f8b3, writeToDataTransfer as $7252cd45fc48c07c$export$f9c1490890ddd063 } from \"./utils.mjs\";\nimport { useEffectEvent as $9Tt78$useEffectEvent, chain as $9Tt78$chain } from \"@react-aria/utils\";\nimport { useRef as $9Tt78$useRef, useEffect as $9Tt78$useEffect } from \"react\";\nimport { useFocus as $9Tt78$useFocus } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $9fcc7f0d70d084ee$var$globalEvents = new Map();\nfunction $9fcc7f0d70d084ee$var$addGlobalEventListener(event, fn) {\n  let eventData = $9fcc7f0d70d084ee$var$globalEvents.get(event);\n  if (!eventData) {\n    let handlers = new Set();\n    let listener = e => {\n      for (let handler of handlers) handler(e);\n    };\n    eventData = {\n      listener: listener,\n      handlers: handlers\n    };\n    $9fcc7f0d70d084ee$var$globalEvents.set(event, eventData);\n    document.addEventListener(event, listener);\n  }\n  eventData.handlers.add(fn);\n  return () => {\n    eventData.handlers.delete(fn);\n    if (eventData.handlers.size === 0) {\n      document.removeEventListener(event, eventData.listener);\n      $9fcc7f0d70d084ee$var$globalEvents.delete(event);\n    }\n  };\n}\nfunction $9fcc7f0d70d084ee$export$2314ca2a3e892862(options) {\n  let {\n    isDisabled: isDisabled\n  } = options;\n  let isFocusedRef = (0, $9Tt78$useRef)(false);\n  let {\n    focusProps: focusProps\n  } = (0, $9Tt78$useFocus)({\n    onFocusChange: isFocused => {\n      isFocusedRef.current = isFocused;\n    }\n  });\n  let onBeforeCopy = (0, $9Tt78$useEffectEvent)(e => {\n    // Enable the \"Copy\" menu item in Safari if this element is focused and copying is supported.\n    if (isFocusedRef.current && options.getItems) e.preventDefault();\n  });\n  let onCopy = (0, $9Tt78$useEffectEvent)(e => {\n    var _options_onCopy;\n    if (!isFocusedRef.current || !options.getItems) return;\n    e.preventDefault();\n    (0, $7252cd45fc48c07c$export$f9c1490890ddd063)(e.clipboardData, options.getItems());\n    (_options_onCopy = options.onCopy) === null || _options_onCopy === void 0 ? void 0 : _options_onCopy.call(options);\n  });\n  let onBeforeCut = (0, $9Tt78$useEffectEvent)(e => {\n    if (isFocusedRef.current && options.onCut && options.getItems) e.preventDefault();\n  });\n  let onCut = (0, $9Tt78$useEffectEvent)(e => {\n    if (!isFocusedRef.current || !options.onCut || !options.getItems) return;\n    e.preventDefault();\n    (0, $7252cd45fc48c07c$export$f9c1490890ddd063)(e.clipboardData, options.getItems());\n    options.onCut();\n  });\n  let onBeforePaste = (0, $9Tt78$useEffectEvent)(e => {\n    // Unfortunately, e.clipboardData.types is not available in this event so we always\n    // have to enable the Paste menu item even if the type of data is unsupported.\n    if (isFocusedRef.current && options.onPaste) e.preventDefault();\n  });\n  let onPaste = (0, $9Tt78$useEffectEvent)(e => {\n    if (!isFocusedRef.current || !options.onPaste) return;\n    e.preventDefault();\n    let items = (0, $7252cd45fc48c07c$export$d9e760437831f8b3)(e.clipboardData);\n    options.onPaste(items);\n  });\n  (0, $9Tt78$useEffect)(() => {\n    if (isDisabled) return;\n    return (0, $9Tt78$chain)($9fcc7f0d70d084ee$var$addGlobalEventListener('beforecopy', onBeforeCopy), $9fcc7f0d70d084ee$var$addGlobalEventListener('copy', onCopy), $9fcc7f0d70d084ee$var$addGlobalEventListener('beforecut', onBeforeCut), $9fcc7f0d70d084ee$var$addGlobalEventListener('cut', onCut), $9fcc7f0d70d084ee$var$addGlobalEventListener('beforepaste', onBeforePaste), $9fcc7f0d70d084ee$var$addGlobalEventListener('paste', onPaste));\n  }, [isDisabled, onBeforeCopy, onCopy, onBeforeCut, onCut, onBeforePaste, onPaste]);\n  return {\n    clipboardProps: focusProps\n  };\n}\nexport { $9fcc7f0d70d084ee$export$2314ca2a3e892862 as useClipboard };","map":{"version":3,"names":["$9fcc7f0d70d084ee$var$globalEvents","Map","$9fcc7f0d70d084ee$var$addGlobalEventListener","event","fn","eventData","get","handlers","Set","listener","e","handler","set","document","addEventListener","add","delete","size","removeEventListener","$9fcc7f0d70d084ee$export$2314ca2a3e892862","options","isDisabled","isFocusedRef","$9Tt78$useRef","focusProps","$9Tt78$useFocus","onFocusChange","isFocused","current","onBeforeCopy","$9Tt78$useEffectEvent","getItems","preventDefault","onCopy","_options_onCopy","$7252cd45fc48c07c$export$f9c1490890ddd063","clipboardData","call","onBeforeCut","onCut","onBeforePaste","onPaste","items","$7252cd45fc48c07c$export$d9e760437831f8b3","$9Tt78$useEffect","$9Tt78$chain","clipboardProps"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-aria/dnd/dist/packages/@react-aria/dnd/src/useClipboard.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, useEffectEvent} from '@react-aria/utils';\nimport {DOMAttributes, DragItem, DropItem} from '@react-types/shared';\nimport {readFromDataTransfer, writeToDataTransfer} from './utils';\nimport {useEffect, useRef} from 'react';\nimport {useFocus} from '@react-aria/interactions';\n\nexport interface ClipboardProps {\n  /** A function that returns the items to copy. */\n  getItems?: () => DragItem[],\n  /** Handler that is called when the user triggers a copy interaction. */\n  onCopy?: () => void,\n  /** Handler that is called when the user triggers a cut interaction. */\n  onCut?: () => void,\n  /** Handler that is called when the user triggers a paste interaction. */\n  onPaste?: (items: DropItem[]) => void,\n  /** Whether the clipboard is disabled. */\n  isDisabled?: boolean\n}\n\nexport interface ClipboardResult {\n  /** Props for the element that will handle clipboard events. */\n  clipboardProps: DOMAttributes\n}\n\nconst globalEvents = new Map();\nfunction addGlobalEventListener(event, fn) {\n  let eventData = globalEvents.get(event);\n  if (!eventData) {\n    let handlers = new Set<(e: Event) => void>();\n    let listener = (e) => {\n      for (let handler of handlers) {\n        handler(e);\n      }\n    };\n\n    eventData = {listener, handlers};\n    globalEvents.set(event, eventData);\n\n    document.addEventListener(event, listener);\n  }\n\n  eventData.handlers.add(fn);\n  return () => {\n    eventData.handlers.delete(fn);\n    if (eventData.handlers.size === 0) {\n      document.removeEventListener(event, eventData.listener);\n      globalEvents.delete(event);\n    }\n  };\n}\n\n/**\n * Handles clipboard interactions for a focusable element. Supports items of multiple\n * data types, and integrates with the operating system native clipboard.\n */\nexport function useClipboard(options: ClipboardProps): ClipboardResult {\n  let {isDisabled} = options;\n  let isFocusedRef = useRef(false);\n  let {focusProps} = useFocus({\n    onFocusChange: (isFocused) => {\n      isFocusedRef.current = isFocused;\n    }\n  });\n\n  let onBeforeCopy = useEffectEvent((e: ClipboardEvent) => {\n    // Enable the \"Copy\" menu item in Safari if this element is focused and copying is supported.\n    if (isFocusedRef.current && options.getItems) {\n      e.preventDefault();\n    }\n  });\n\n  let onCopy = useEffectEvent((e: ClipboardEvent) => {\n    if (!isFocusedRef.current || !options.getItems) {\n      return;\n    }\n\n    e.preventDefault();\n    writeToDataTransfer(e.clipboardData, options.getItems());\n    options.onCopy?.();\n  });\n\n  let onBeforeCut = useEffectEvent((e: ClipboardEvent) => {\n    if (isFocusedRef.current && options.onCut && options.getItems) {\n      e.preventDefault();\n    }\n  });\n\n  let onCut = useEffectEvent((e: ClipboardEvent) => {\n    if (!isFocusedRef.current || !options.onCut || !options.getItems) {\n      return;\n    }\n\n    e.preventDefault();\n    writeToDataTransfer(e.clipboardData, options.getItems());\n    options.onCut();\n  });\n\n  let onBeforePaste = useEffectEvent((e: ClipboardEvent) => {\n    // Unfortunately, e.clipboardData.types is not available in this event so we always\n    // have to enable the Paste menu item even if the type of data is unsupported.\n    if (isFocusedRef.current && options.onPaste) {\n      e.preventDefault();\n    }\n  });\n\n  let onPaste = useEffectEvent((e: ClipboardEvent) => {\n    if (!isFocusedRef.current || !options.onPaste) {\n      return;\n    }\n\n    e.preventDefault();\n    let items = readFromDataTransfer(e.clipboardData);\n    options.onPaste(items);\n  });\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n    return chain(\n      addGlobalEventListener('beforecopy', onBeforeCopy),\n      addGlobalEventListener('copy', onCopy),\n      addGlobalEventListener('beforecut', onBeforeCut),\n      addGlobalEventListener('cut', onCut),\n      addGlobalEventListener('beforepaste', onBeforePaste),\n      addGlobalEventListener('paste', onPaste)\n    );\n  }, [isDisabled, onBeforeCopy, onCopy, onBeforeCut, onCut, onBeforePaste, onPaste]);\n\n  return {\n    clipboardProps: focusProps\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}