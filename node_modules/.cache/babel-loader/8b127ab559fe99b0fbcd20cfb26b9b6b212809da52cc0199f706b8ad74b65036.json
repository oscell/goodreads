{"ast":null,"code":"import \"./vars.6caec7fe.css\";\nimport $kfV1G$button_vars_cssmodulejs from \"./button_vars_css.mjs\";\nimport { useSlotProps as $kfV1G$useSlotProps, classNames as $kfV1G$classNames, useFocusableRef as $kfV1G$useFocusableRef, useStyleProps as $kfV1G$useStyleProps, ClearSlots as $kfV1G$ClearSlots, SlotProvider as $kfV1G$SlotProvider } from \"@react-spectrum/utils\";\nimport $kfV1G$spectrumiconsuiCornerTriangle from \"@spectrum-icons/ui/CornerTriangle\";\nimport { FocusRing as $kfV1G$FocusRing } from \"@react-aria/focus\";\nimport { mergeProps as $kfV1G$mergeProps } from \"@react-aria/utils\";\nimport $kfV1G$react from \"react\";\nimport { Text as $kfV1G$Text } from \"@react-spectrum/text\";\nimport { useButton as $kfV1G$useButton } from \"@react-aria/button\";\nimport { useHover as $kfV1G$useHover } from \"@react-aria/interactions\";\nimport { useProviderProps as $kfV1G$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $042ad0b3a4a55b33$var$ActionButton(props, ref) {\n  props = (0, $kfV1G$useProviderProps)(props);\n  props = (0, $kfV1G$useSlotProps)(props, 'actionButton');\n  let textProps = (0, $kfV1G$useSlotProps)({\n    UNSAFE_className: (0, $kfV1G$classNames)((0, $parcel$interopDefault($kfV1G$button_vars_cssmodulejs)), 'spectrum-ActionButton-label')\n  }, 'text');\n  let {\n    isQuiet: isQuiet,\n    isDisabled: isDisabled,\n    staticColor: staticColor,\n    children: children,\n    autoFocus: autoFocus,\n    holdAffordance:\n    // @ts-ignore (private)\n    holdAffordance,\n    hideButtonText:\n    // @ts-ignore (private)\n    hideButtonText,\n    ...otherProps\n  } = props;\n  let domRef = (0, $kfV1G$useFocusableRef)(ref);\n  let {\n    buttonProps: buttonProps,\n    isPressed: isPressed\n  } = (0, $kfV1G$useButton)(props, domRef);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $kfV1G$useHover)({\n    isDisabled: isDisabled\n  });\n  let {\n    styleProps: styleProps\n  } = (0, $kfV1G$useStyleProps)(otherProps);\n  let isTextOnly = (0, $kfV1G$react).Children.toArray(props.children).every(c => ! /*#__PURE__*/(0, $kfV1G$react).isValidElement(c));\n  return /*#__PURE__*/(0, $kfV1G$react).createElement((0, $kfV1G$FocusRing), {\n    focusRingClass: (0, $kfV1G$classNames)((0, $parcel$interopDefault($kfV1G$button_vars_cssmodulejs)), 'focus-ring'),\n    autoFocus: autoFocus\n  }, /*#__PURE__*/(0, $kfV1G$react).createElement(\"button\", {\n    ...styleProps,\n    ...(0, $kfV1G$mergeProps)(buttonProps, hoverProps),\n    ref: domRef,\n    className: (0, $kfV1G$classNames)((0, $parcel$interopDefault($kfV1G$button_vars_cssmodulejs)), 'spectrum-ActionButton', {\n      'spectrum-ActionButton--quiet': isQuiet,\n      'spectrum-ActionButton--staticColor': !!staticColor,\n      'spectrum-ActionButton--staticWhite': staticColor === 'white',\n      'spectrum-ActionButton--staticBlack': staticColor === 'black',\n      'is-active': isPressed,\n      'is-disabled': isDisabled,\n      'is-hovered': isHovered\n    }, styleProps.className)\n  }, holdAffordance && /*#__PURE__*/(0, $kfV1G$react).createElement((0, $kfV1G$spectrumiconsuiCornerTriangle), {\n    UNSAFE_className: (0, $kfV1G$classNames)((0, $parcel$interopDefault($kfV1G$button_vars_cssmodulejs)), 'spectrum-ActionButton-hold')\n  }), /*#__PURE__*/(0, $kfV1G$react).createElement((0, $kfV1G$ClearSlots), null, /*#__PURE__*/(0, $kfV1G$react).createElement((0, $kfV1G$SlotProvider), {\n    slots: {\n      icon: {\n        size: 'S',\n        UNSAFE_className: (0, $kfV1G$classNames)((0, $parcel$interopDefault($kfV1G$button_vars_cssmodulejs)), 'spectrum-Icon', {\n          'spectrum-ActionGroup-itemIcon': hideButtonText\n        })\n      },\n      text: {\n        ...textProps\n      }\n    }\n  }, typeof children === 'string' || isTextOnly ? /*#__PURE__*/(0, $kfV1G$react).createElement((0, $kfV1G$Text), null, children) : children))));\n}\n/**\n * ActionButtons allow users to perform an action.\n * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.\n */\nlet $042ad0b3a4a55b33$export$cfc7921d29ef7b80 = /*#__PURE__*/(0, $kfV1G$react).forwardRef($042ad0b3a4a55b33$var$ActionButton);\nexport { $042ad0b3a4a55b33$export$cfc7921d29ef7b80 as ActionButton };","map":{"version":3,"names":["$042ad0b3a4a55b33$var$ActionButton","props","ref","$kfV1G$useProviderProps","$kfV1G$useSlotProps","textProps","UNSAFE_className","$kfV1G$classNames","$parcel$interopDefault","$kfV1G$button_vars_cssmodulejs","isQuiet","isDisabled","staticColor","children","autoFocus","holdAffordance","hideButtonText","otherProps","domRef","$kfV1G$useFocusableRef","buttonProps","isPressed","$kfV1G$useButton","hoverProps","isHovered","$kfV1G$useHover","styleProps","$kfV1G$useStyleProps","isTextOnly","$kfV1G$react","Children","toArray","every","c","isValidElement","createElement","$kfV1G$FocusRing","focusRingClass","$kfV1G$mergeProps","className","$kfV1G$spectrumiconsuiCornerTriangle","$kfV1G$ClearSlots","$kfV1G$SlotProvider","slots","icon","size","text","$kfV1G$Text","$042ad0b3a4a55b33$export$cfc7921d29ef7b80","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/button/dist/packages/@react-spectrum/button/src/ActionButton.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, ClearSlots, SlotProvider, useFocusableRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport CornerTriangle from '@spectrum-icons/ui/CornerTriangle';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport {mergeProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumActionButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ActionButton(props: SpectrumActionButtonProps, ref: FocusableRef<HTMLButtonElement>) {\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'actionButton');\n  let textProps = useSlotProps({UNSAFE_className: classNames(styles, 'spectrum-ActionButton-label')}, 'text');\n\n  let {\n    isQuiet,\n    isDisabled,\n    staticColor,\n    children,\n    autoFocus,\n    // @ts-ignore (private)\n    holdAffordance,\n    // @ts-ignore (private)\n    hideButtonText,\n    ...otherProps\n  } = props;\n\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let {styleProps} = useStyleProps(otherProps);\n  let isTextOnly = React.Children.toArray(props.children).every(c => !React.isValidElement(c));\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <button\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps)}\n        ref={domRef}\n        className={\n          classNames(\n            styles,\n            'spectrum-ActionButton',\n            {\n              'spectrum-ActionButton--quiet': isQuiet,\n              'spectrum-ActionButton--staticColor': !!staticColor,\n              'spectrum-ActionButton--staticWhite': staticColor === 'white',\n              'spectrum-ActionButton--staticBlack': staticColor === 'black',\n              'is-active': isPressed,\n              'is-disabled': isDisabled,\n              'is-hovered': isHovered\n            },\n            styleProps.className\n          )\n        }>\n        {holdAffordance &&\n          <CornerTriangle UNSAFE_className={classNames(styles, 'spectrum-ActionButton-hold')} />\n        }\n        <ClearSlots>\n          <SlotProvider\n            slots={{\n              icon: {\n                size: 'S',\n                UNSAFE_className: classNames(\n                  styles,\n                  'spectrum-Icon',\n                  {\n                    'spectrum-ActionGroup-itemIcon': hideButtonText\n                  }\n                )\n              },\n              text: {\n                ...textProps\n              }\n            }}>\n            {typeof children === 'string' || isTextOnly\n              ? <Text>{children}</Text>\n              : children}\n          </SlotProvider>\n        </ClearSlots>\n      </button>\n    </FocusRing>\n  );\n}\n\n/**\n * ActionButtons allow users to perform an action.\n * They’re used for similar, task-based options within a workflow, and are ideal for interfaces where buttons aren’t meant to draw a lot of attention.\n */\nlet _ActionButton = React.forwardRef(ActionButton);\nexport {_ActionButton as ActionButton};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}