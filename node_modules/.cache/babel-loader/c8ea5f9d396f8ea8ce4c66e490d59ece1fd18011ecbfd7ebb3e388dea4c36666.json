{"ast":null,"code":"import { ButtonContext as $d2b4bc8c273e7be6$export$24d547caef80ccd1 } from \"./Button.mjs\";\nimport { CheckboxContext as $4e85f108e88277b8$export$b085522c77523c51 } from \"./RSPContexts.mjs\";\nimport { CollectionRendererContext as $7135fc7d473fd974$export$4feb769f8ddf26c5, DefaultCollectionRenderer as $7135fc7d473fd974$export$a164736487e3f0ae } from \"./Collection.mjs\";\nimport { DEFAULT_SLOT as $64fa3d84918910a7$export$c62b8e45d58ddad9, Provider as $64fa3d84918910a7$export$2881499e37b75b9a, useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3 } from \"./utils.mjs\";\nimport { DragAndDropContext as $612b8eb6cb90e02d$export$d188a835a7bc5783, DropIndicatorContext as $612b8eb6cb90e02d$export$f55761759794cf55, useDndPersistedKeys as $612b8eb6cb90e02d$export$d1e8e3fbb7461f6, useRenderDropIndicator as $612b8eb6cb90e02d$export$971707d8a129a1f7 } from \"./DragAndDrop.mjs\";\nimport $dbSRa$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { CollectionNode as $dbSRa$CollectionNode, BaseCollection as $dbSRa$BaseCollection, Collection as $dbSRa$Collection, CollectionBuilder as $dbSRa$CollectionBuilder, createBranchComponent as $dbSRa$createBranchComponent, useCachedChildren as $dbSRa$useCachedChildren, createLeafComponent as $dbSRa$createLeafComponent } from \"@react-aria/collections\";\nimport { buildHeaderRows as $dbSRa$buildHeaderRows } from \"@react-stately/table\";\nimport { useTableColumnResizeState as $dbSRa$useTableColumnResizeState, useMultipleSelectionState as $dbSRa$useMultipleSelectionState, useTableState as $dbSRa$useTableState } from \"react-stately\";\nimport { useTable as $dbSRa$useTable, ListKeyboardDelegate as $dbSRa$ListKeyboardDelegate, useFocusRing as $dbSRa$useFocusRing, FocusScope as $dbSRa$FocusScope, mergeProps as $dbSRa$mergeProps, useTableRowGroup as $dbSRa$useTableRowGroup, useHover as $dbSRa$useHover, useTableHeaderRow as $dbSRa$useTableHeaderRow, useTableSelectAllCheckbox as $dbSRa$useTableSelectAllCheckbox, useTableColumnHeader as $dbSRa$useTableColumnHeader, useLocalizedStringFormatter as $dbSRa$useLocalizedStringFormatter, useTableColumnResize as $dbSRa$useTableColumnResize, useLocale as $dbSRa$useLocale, useTableRow as $dbSRa$useTableRow, useTableSelectionCheckbox as $dbSRa$useTableSelectionCheckbox, useVisuallyHidden as $dbSRa$useVisuallyHidden, useTableCell as $dbSRa$useTableCell } from \"react-aria\";\nimport { useObjectRef as $dbSRa$useObjectRef, useLayoutEffect as $dbSRa$useLayoutEffect, isScrollable as $dbSRa$isScrollable, useResizeObserver as $dbSRa$useResizeObserver, filterDOMProps as $dbSRa$filterDOMProps, mergeRefs as $dbSRa$mergeRefs } from \"@react-aria/utils\";\nimport $dbSRa$react, { createContext as $dbSRa$createContext, useRef as $dbSRa$useRef, useState as $dbSRa$useState, useMemo as $dbSRa$useMemo, forwardRef as $dbSRa$forwardRef, useContext as $dbSRa$useContext, useEffect as $dbSRa$useEffect, useCallback as $dbSRa$useCallback } from \"react\";\nimport $dbSRa$reactdom from \"react-dom\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nclass $1910c06f0ca9905e$var$TableCollection extends (0, $dbSRa$BaseCollection) {\n  addNode(node) {\n    super.addNode(node);\n    this.columnsDirty || (this.columnsDirty = node.type === 'column');\n    if (node.type === 'tableheader') this.head = node;\n    if (node.type === 'tablebody') this.body = node;\n  }\n  commit(firstKey, lastKey, isSSR = false) {\n    this.updateColumns(isSSR);\n    super.commit(firstKey, lastKey, isSSR);\n    this.rows = [...this.getChildren(this.body.key)];\n  }\n  updateColumns(isSSR) {\n    if (!this.columnsDirty) return;\n    this.rowHeaderColumnKeys = new Set();\n    this.columns = [];\n    let columnKeyMap = new Map();\n    let visit = node => {\n      switch (node.type) {\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            node.index = this.columns.length;\n            this.columns.push(node);\n            if (node.props.isRowHeader) this.rowHeaderColumnKeys.add(node.key);\n          }\n          break;\n      }\n      for (let child of this.getChildren(node.key)) visit(child);\n    };\n    for (let node of this.getChildren(this.head.key)) visit(node);\n    this.headerRows = (0, $dbSRa$buildHeaderRows)(columnKeyMap, this.columns);\n    this.columnsDirty = false;\n    if (this.rowHeaderColumnKeys.size === 0 && this.columns.length > 0 && !isSSR) throw new Error('A table must have at least one Column with the isRowHeader prop set to true');\n  }\n  get columnCount() {\n    return this.columns.length;\n  }\n  *[Symbol.iterator]() {\n    // Wait until the collection is initialized.\n    if (this.head.key === -1) return;\n    yield this.head;\n    yield this.body;\n  }\n  get size() {\n    return this.rows.length;\n  }\n  getFirstKey() {\n    return this.body.firstChildKey;\n  }\n  getLastKey() {\n    return this.body.lastChildKey;\n  }\n  getKeyAfter(key) {\n    let node = this.getItem(key);\n    var _node_nextKey;\n    if ((node === null || node === void 0 ? void 0 : node.type) === 'column') return (_node_nextKey = node.nextKey) !== null && _node_nextKey !== void 0 ? _node_nextKey : null;\n    return super.getKeyAfter(key);\n  }\n  getKeyBefore(key) {\n    var _this_getItem;\n    let node = this.getItem(key);\n    var _node_prevKey;\n    if ((node === null || node === void 0 ? void 0 : node.type) === 'column') return (_node_prevKey = node.prevKey) !== null && _node_prevKey !== void 0 ? _node_prevKey : null;\n    let k = super.getKeyBefore(key);\n    if (k != null && ((_this_getItem = this.getItem(k)) === null || _this_getItem === void 0 ? void 0 : _this_getItem.type) === 'tablebody') return null;\n    return k;\n  }\n  getChildren(key) {\n    if (!this.getItem(key)) for (let row of this.headerRows) {\n      if (row.key === key) return row.childNodes;\n    }\n    return super.getChildren(key);\n  }\n  clone() {\n    let collection = super.clone();\n    collection.headerRows = this.headerRows;\n    collection.columns = this.columns;\n    collection.rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    collection.head = this.head;\n    collection.body = this.body;\n    return collection;\n  }\n  getTextValue(key) {\n    let row = this.getItem(key);\n    if (!row) return '';\n    // If the row has a textValue, use that.\n    if (row.textValue) return row.textValue;\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    let text = [];\n    for (let cell of this.getChildren(key)) {\n      let column = this.columns[cell.index];\n      if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);\n      if (text.length === rowHeaderColumnKeys.size) break;\n    }\n    return text.join(' ');\n  }\n  constructor(...args) {\n    super(...args);\n    this.headerRows = [];\n    this.columns = [];\n    this.rows = [];\n    this.rowHeaderColumnKeys = new Set();\n    this.head = new (0, $dbSRa$CollectionNode)('tableheader', -1);\n    this.body = new (0, $dbSRa$CollectionNode)('tablebody', -2);\n    this.columnsDirty = true;\n  }\n}\nconst $1910c06f0ca9905e$var$ResizableTableContainerContext = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nfunction $1910c06f0ca9905e$var$ResizableTableContainer(props, ref) {\n  let containerRef = (0, $dbSRa$useObjectRef)(ref);\n  let tableRef = (0, $dbSRa$useRef)(null);\n  let scrollRef = (0, $dbSRa$useRef)(null);\n  let [width, setWidth] = (0, $dbSRa$useState)(0);\n  (0, $dbSRa$useLayoutEffect)(() => {\n    // Walk up the DOM from the Table to the ResizableTableContainer and stop\n    // when we reach the first scrollable element. This is what we'll measure\n    // to determine column widths (important due to width of scrollbars).\n    // This will usually be the ResizableTableContainer for native tables, and\n    // the Table itself for virtualized tables.\n    let table = tableRef.current;\n    while (table && table !== containerRef.current && !(0, $dbSRa$isScrollable)(table)) table = table.parentElement;\n    scrollRef.current = table;\n  }, [containerRef]);\n  (0, $dbSRa$useResizeObserver)({\n    ref: scrollRef,\n    box: 'border-box',\n    onResize() {\n      var _scrollRef_current;\n      var _scrollRef_current_clientWidth;\n      setWidth((_scrollRef_current_clientWidth = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.clientWidth) !== null && _scrollRef_current_clientWidth !== void 0 ? _scrollRef_current_clientWidth : 0);\n    }\n  });\n  (0, $dbSRa$useLayoutEffect)(() => {\n    var _scrollRef_current;\n    var _scrollRef_current_clientWidth;\n    setWidth((_scrollRef_current_clientWidth = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.clientWidth) !== null && _scrollRef_current_clientWidth !== void 0 ? _scrollRef_current_clientWidth : 0);\n  }, []);\n  let ctx = (0, $dbSRa$useMemo)(() => ({\n    tableRef: tableRef,\n    scrollRef: scrollRef,\n    tableWidth: width,\n    useTableColumnResizeState: $dbSRa$useTableColumnResizeState,\n    onResizeStart: props.onResizeStart,\n    onResize: props.onResize,\n    onResizeEnd: props.onResizeEnd\n  }), [tableRef, width, props.onResizeStart, props.onResize, props.onResizeEnd]);\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", {\n    ...(0, $dbSRa$filterDOMProps)(props),\n    ref: containerRef,\n    className: props.className || 'react-aria-ResizableTableContainer',\n    style: props.style,\n    onScroll: props.onScroll\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$ResizableTableContainerContext.Provider, {\n    value: ctx\n  }, props.children));\n}\nconst $1910c06f0ca9905e$export$7063e69b8a954175 = /*#__PURE__*/(0, $dbSRa$forwardRef)($1910c06f0ca9905e$var$ResizableTableContainer);\nconst $1910c06f0ca9905e$export$93e4b0b2cc49b648 = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nconst $1910c06f0ca9905e$export$38de1cb0526c21fb = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nconst $1910c06f0ca9905e$export$a2680a798823803c = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nfunction $1910c06f0ca9905e$var$Table(props, ref) {\n  var _props_dragAndDropHooks;\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $1910c06f0ca9905e$export$93e4b0b2cc49b648);\n  // Separate selection state so we have access to it from collection components via useTableOptions.\n  let selectionState = (0, $dbSRa$useMultipleSelectionState)(props);\n  let {\n    selectionBehavior: selectionBehavior,\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection\n  } = selectionState;\n  let hasDragHooks = !!((_props_dragAndDropHooks = props.dragAndDropHooks) === null || _props_dragAndDropHooks === void 0 ? void 0 : _props_dragAndDropHooks.useDraggableCollectionState);\n  let ctx = (0, $dbSRa$useMemo)(() => ({\n    selectionBehavior: selectionMode === 'none' ? null : selectionBehavior,\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    allowsDragging: hasDragHooks\n  }), [selectionBehavior, selectionMode, disallowEmptySelection, hasDragHooks]);\n  let content = /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableOptionsContext.Provider, {\n    value: ctx\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$Collection), props));\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$CollectionBuilder), {\n    content: content,\n    createCollection: () => new $1910c06f0ca9905e$var$TableCollection()\n  }, collection => /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableInner, {\n    props: props,\n    forwardedRef: ref,\n    selectionState: selectionState,\n    collection: collection\n  }));\n}\nfunction $1910c06f0ca9905e$var$TableInner({\n  props: props,\n  forwardedRef: ref,\n  selectionState: selectionState,\n  collection: collection\n}) {\n  let tableContainerContext = (0, $dbSRa$useContext)($1910c06f0ca9905e$var$ResizableTableContainerContext);\n  ref = (0, $dbSRa$useObjectRef)((0, $dbSRa$useMemo)(() => (0, $dbSRa$mergeRefs)(ref, tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.tableRef), [ref, tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.tableRef]));\n  let state = (0, $dbSRa$useTableState)({\n    ...props,\n    collection: collection,\n    children: undefined,\n    UNSAFE_selectionState: selectionState\n  });\n  let {\n    isVirtualized: isVirtualized,\n    layoutDelegate: layoutDelegate,\n    dropTargetDelegate: ctxDropTargetDelegate,\n    CollectionRoot: CollectionRoot\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    dragAndDropHooks: dragAndDropHooks\n  } = props;\n  let {\n    gridProps: gridProps\n  } = (0, $dbSRa$useTable)({\n    ...props,\n    layoutDelegate: layoutDelegate,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let selectionManager = state.selectionManager;\n  let hasDragHooks = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);\n  let hasDropHooks = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState);\n  let dragHooksProvided = (0, $dbSRa$useRef)(hasDragHooks);\n  let dropHooksProvided = (0, $dbSRa$useRef)(hasDropHooks);\n  (0, $dbSRa$useEffect)(() => {\n    if (dragHooksProvided.current !== hasDragHooks) console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    if (dropHooksProvided.current !== hasDropHooks) console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n  }, [hasDragHooks, hasDropHooks]);\n  let dragState = undefined;\n  let dropState = undefined;\n  let droppableCollection = undefined;\n  let isRootDropTarget = false;\n  let dragPreview = null;\n  let preview = (0, $dbSRa$useRef)(null);\n  if (hasDragHooks && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState({\n      collection: collection,\n      selectionManager: selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection({}, dragState, ref);\n    let DragPreview = dragAndDropHooks.DragPreview;\n    dragPreview = dragAndDropHooks.renderDragPreview ? /*#__PURE__*/(0, $dbSRa$react).createElement(DragPreview, {\n      ref: preview\n    }, dragAndDropHooks.renderDragPreview) : null;\n  }\n  if (hasDropHooks && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState({\n      collection: collection,\n      selectionManager: selectionManager\n    });\n    let keyboardDelegate = new (0, $dbSRa$ListKeyboardDelegate)({\n      collection: collection,\n      disabledKeys: selectionManager.disabledKeys,\n      disabledBehavior: selectionManager.disabledBehavior,\n      ref: ref,\n      layoutDelegate: layoutDelegate\n    });\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection.rows, ref);\n    droppableCollection = dragAndDropHooks.useDroppableCollection({\n      keyboardDelegate: keyboardDelegate,\n      dropTargetDelegate: dropTargetDelegate\n    }, dropState, ref);\n    isRootDropTarget = dropState.isDropTarget({\n      type: 'root'\n    });\n  }\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $dbSRa$useFocusRing)();\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-Table',\n    values: {\n      isDropTarget: isRootDropTarget,\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      state: state\n    }\n  });\n  let isListDraggable = !!(hasDragHooks && !(dragState === null || dragState === void 0 ? void 0 : dragState.isDisabled));\n  let style = renderProps.style;\n  let layoutState = null;\n  if (tableContainerContext) {\n    layoutState = tableContainerContext.useTableColumnResizeState({\n      tableWidth: tableContainerContext.tableWidth\n    }, state);\n    if (!isVirtualized) style = {\n      ...style,\n      tableLayout: 'fixed',\n      width: 'fit-content'\n    };\n  }\n  let ElementType = $1910c06f0ca9905e$var$useElementType('table');\n  var _tableContainerContext_scrollRef;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[$1910c06f0ca9905e$export$38de1cb0526c21fb, state], [$1910c06f0ca9905e$export$a2680a798823803c, layoutState], [(0, $612b8eb6cb90e02d$export$d188a835a7bc5783), {\n      dragAndDropHooks: dragAndDropHooks,\n      dragState: dragState,\n      dropState: dropState\n    }], [(0, $612b8eb6cb90e02d$export$f55761759794cf55), {\n      render: $1910c06f0ca9905e$var$TableDropIndicatorWrapper\n    }]]\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$FocusScope), null, /*#__PURE__*/(0, $dbSRa$react).createElement(ElementType, {\n    ...(0, $dbSRa$filterDOMProps)(props),\n    ...renderProps,\n    ...(0, $dbSRa$mergeProps)(gridProps, focusProps, droppableCollection === null || droppableCollection === void 0 ? void 0 : droppableCollection.collectionProps),\n    style: style,\n    ref: ref,\n    slot: props.slot || undefined,\n    onScroll: props.onScroll,\n    \"data-allows-dragging\": isListDraggable || undefined,\n    \"data-drop-target\": isRootDropTarget || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionRoot, {\n    collection: collection,\n    scrollRef: (_tableContainerContext_scrollRef = tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.scrollRef) !== null && _tableContainerContext_scrollRef !== void 0 ? _tableContainerContext_scrollRef : ref,\n    persistedKeys: (0, $612b8eb6cb90e02d$export$d1e8e3fbb7461f6)(selectionManager, dragAndDropHooks, dropState)\n  }))), dragPreview);\n}\n/**\n * A table displays data in rows and columns and enables a user to navigate its contents via directional navigation keys,\n * and optionally supports row selection and sorting.\n */\nconst $1910c06f0ca9905e$export$54ec01a60f47d33d = /*#__PURE__*/(0, $dbSRa$forwardRef)($1910c06f0ca9905e$var$Table);\nfunction $1910c06f0ca9905e$var$useElementType(element) {\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  return isVirtualized ? 'div' : element;\n}\nconst $1910c06f0ca9905e$var$TableOptionsContext = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nfunction $1910c06f0ca9905e$export$fddc468cd8cb4db9() {\n  return (0, $dbSRa$useContext)($1910c06f0ca9905e$var$TableOptionsContext);\n}\nconst $1910c06f0ca9905e$export$f850895b287ef28e = /*#__PURE__*/(0, $dbSRa$createBranchComponent)('tableheader', (props, ref) => {\n  let collection = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb).collection;\n  let headerRows = (0, $dbSRa$useCachedChildren)({\n    items: collection.headerRows,\n    children: (0, $dbSRa$useCallback)(item => {\n      switch (item.type) {\n        case 'headerrow':\n          return /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableHeaderRow, {\n            item: item\n          });\n        default:\n          throw new Error('Unsupported node type in TableHeader: ' + item.type);\n      }\n    }, [])\n  });\n  let THead = $1910c06f0ca9905e$var$useElementType('thead');\n  let {\n    rowGroupProps: rowGroupProps\n  } = (0, $dbSRa$useTableRowGroup)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({\n    onHoverStart: props.onHoverStart,\n    onHoverChange: props.onHoverChange,\n    onHoverEnd: props.onHoverEnd\n  });\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-TableHeader',\n    values: {\n      isHovered: isHovered\n    }\n  });\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(THead, {\n    ...(0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowGroupProps, hoverProps),\n    ...renderProps,\n    ref: ref,\n    \"data-hovered\": isHovered || undefined\n  }, headerRows);\n}, props => /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$Collection), {\n  dependencies: props.dependencies,\n  items: props.columns\n}, props.children));\nfunction $1910c06f0ca9905e$var$TableHeaderRow({\n  item: item\n}) {\n  let ref = (0, $dbSRa$useRef)(null);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized,\n    CollectionBranch: CollectionBranch\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    rowProps: rowProps\n  } = (0, $dbSRa$useTableHeaderRow)({\n    node: item,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $dbSRa$useTableSelectAllCheckbox)(state);\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    ...rowProps,\n    ref: ref\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $4e85f108e88277b8$export$b085522c77523c51), {\n      slots: {\n        selection: checkboxProps\n      }\n    }]]\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionBranch, {\n    collection: state.collection,\n    parent: item\n  })));\n}\nconst $1910c06f0ca9905e$export$816b5d811295e6bc = /*#__PURE__*/(0, $dbSRa$createLeafComponent)('column', (props, forwardedRef, column) => {\n  var _state_sortDescriptor, _state_sortDescriptor1;\n  let ref = (0, $dbSRa$useObjectRef)(forwardedRef);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    columnHeaderProps: columnHeaderProps\n  } = (0, $dbSRa$useTableColumnHeader)({\n    node: column,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $dbSRa$useFocusRing)();\n  let layoutState = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$a2680a798823803c);\n  let isResizing = false;\n  if (layoutState) isResizing = layoutState.resizingColumn === column.key;else {\n    for (let prop in ['width', 'defaultWidth', 'minWidth', 'maxWidth']) if (prop in column.props) console.warn(`The ${prop} prop on a <Column> only applies when a <Table> is wrapped in a <ResizableTableContainer>. If you aren't using column resizing, you can set the width of a column with CSS.`);\n  }\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({\n    isDisabled: !props.allowsSorting\n  });\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    id: undefined,\n    children: column.rendered,\n    defaultClassName: 'react-aria-Column',\n    values: {\n      isHovered: isHovered,\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      allowsSorting: column.props.allowsSorting,\n      sortDirection: ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === column.key ? state.sortDescriptor.direction : undefined,\n      isResizing: isResizing,\n      startResize: () => {\n        if (layoutState) {\n          layoutState.startResize(column.key);\n          state.setKeyboardNavigationDisabled(true);\n        } else throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n      },\n      sort: direction => {\n        state.sort(column.key, direction);\n      }\n    }\n  });\n  let style = renderProps.style;\n  if (layoutState) style = {\n    ...style,\n    width: layoutState.getColumnWidth(column.key)\n  };\n  let TH = $1910c06f0ca9905e$var$useElementType('th');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TH, {\n    ...(0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), columnHeaderProps, focusProps, hoverProps),\n    ...renderProps,\n    style: style,\n    colSpan: column.colspan,\n    ref: ref,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-resizing\": isResizing || undefined,\n    \"data-allows-sorting\": column.props.allowsSorting || undefined,\n    \"data-sort-direction\": ((_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.column) === column.key ? state.sortDescriptor.direction : undefined\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[$1910c06f0ca9905e$var$ColumnResizerContext, {\n      column: column,\n      triggerRef: ref\n    }], [(0, $7135fc7d473fd974$export$4feb769f8ddf26c5), (0, $7135fc7d473fd974$export$a164736487e3f0ae)]]\n  }, renderProps.children));\n});\nconst $1910c06f0ca9905e$var$ColumnResizerContext = /*#__PURE__*/(0, $dbSRa$createContext)(null);\nfunction $1910c06f0ca9905e$var$ColumnResizer(props, ref) {\n  let layoutState = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$a2680a798823803c);\n  if (!layoutState) throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n  let stringFormatter = (0, $dbSRa$useLocalizedStringFormatter)((0, $parcel$interopDefault($dbSRa$intlStringsmodulejs)), 'react-aria-components');\n  let {\n    onResizeStart: onResizeStart,\n    onResize: onResize,\n    onResizeEnd: onResizeEnd\n  } = (0, $dbSRa$useContext)($1910c06f0ca9905e$var$ResizableTableContainerContext);\n  let {\n    column: column,\n    triggerRef: triggerRef\n  } = (0, $dbSRa$useContext)($1910c06f0ca9905e$var$ColumnResizerContext);\n  let inputRef = (0, $dbSRa$useRef)(null);\n  let {\n    resizerProps: resizerProps,\n    inputProps: inputProps,\n    isResizing: isResizing\n  } = (0, $dbSRa$useTableColumnResize)({\n    column: column,\n    'aria-label': props['aria-label'] || stringFormatter.format('tableResizer'),\n    onResizeStart: onResizeStart,\n    onResize: onResize,\n    onResizeEnd: onResizeEnd,\n    triggerRef: triggerRef\n  }, layoutState, inputRef);\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $dbSRa$useFocusRing)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)(props);\n  let isEResizable = layoutState.getColumnMinWidth(column.key) >= layoutState.getColumnWidth(column.key);\n  let isWResizable = layoutState.getColumnMaxWidth(column.key) <= layoutState.getColumnWidth(column.key);\n  let {\n    direction: direction\n  } = (0, $dbSRa$useLocale)();\n  let resizableDirection = 'both';\n  if (isEResizable) resizableDirection = direction === 'rtl' ? 'right' : 'left';else if (isWResizable) resizableDirection = direction === 'rtl' ? 'left' : 'right';else resizableDirection = 'both';\n  let objectRef = (0, $dbSRa$useObjectRef)(ref);\n  let [cursor, setCursor] = (0, $dbSRa$useState)('');\n  (0, $dbSRa$useEffect)(() => {\n    if (!objectRef.current) return;\n    let style = window.getComputedStyle(objectRef.current);\n    setCursor(style.cursor);\n  }, [objectRef, resizableDirection]);\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    defaultClassName: 'react-aria-ColumnResizer',\n    values: {\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      isResizing: isResizing,\n      isHovered: isHovered,\n      resizableDirection: resizableDirection\n    }\n  });\n  let [isMouseDown, setMouseDown] = (0, $dbSRa$useState)(false);\n  let onPointerDown = e => {\n    if (e.pointerType === 'mouse') setMouseDown(true);\n  };\n  if (!isResizing && isMouseDown) setMouseDown(false);\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", {\n    ref: objectRef,\n    role: \"presentation\",\n    ...(0, $dbSRa$filterDOMProps)(props),\n    ...renderProps,\n    ...(0, $dbSRa$mergeProps)(resizerProps, {\n      onPointerDown: onPointerDown\n    }, hoverProps),\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-resizing\": isResizing || undefined,\n    \"data-resizable-direction\": resizableDirection\n  }, renderProps.children, /*#__PURE__*/(0, $dbSRa$react).createElement(\"input\", {\n    ref: inputRef,\n    ...(0, $dbSRa$mergeProps)(inputProps, focusProps)\n  }), isResizing && isMouseDown && /*#__PURE__*/(0, $dbSRa$reactdom).createPortal(/*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", {\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      cursor: cursor\n    }\n  }), document.body));\n}\nconst $1910c06f0ca9905e$export$ee689e97a7664bfd = /*#__PURE__*/(0, $dbSRa$forwardRef)($1910c06f0ca9905e$var$ColumnResizer);\nconst $1910c06f0ca9905e$export$76ccd210b9029917 = /*#__PURE__*/(0, $dbSRa$createBranchComponent)('tablebody', (props, ref) => {\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let collection = state.collection;\n  let {\n    CollectionBranch: CollectionBranch\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let isDroppable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState) && !(dropState === null || dropState === void 0 ? void 0 : dropState.isDisabled);\n  var _dropState_isDropTarget;\n  let isRootDropTarget = isDroppable && !!dropState && ((_dropState_isDropTarget = dropState.isDropTarget({\n    type: 'root'\n  })) !== null && _dropState_isDropTarget !== void 0 ? _dropState_isDropTarget : false);\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: collection.size === 0\n  };\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    id: undefined,\n    children: undefined,\n    defaultClassName: 'react-aria-TableBody',\n    values: renderValues\n  });\n  let emptyState;\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  let numColumns = collection.columnCount;\n  if (collection.size === 0 && props.renderEmptyState && state) {\n    let rowProps = {};\n    let rowHeaderProps = {};\n    let style = {};\n    if (isVirtualized) {\n      rowProps['aria-rowindex'] = collection.headerRows.length + 1;\n      rowHeaderProps['aria-colspan'] = numColumns;\n      style = {\n        display: 'contents'\n      };\n    } else rowHeaderProps['colSpan'] = numColumns;\n    emptyState = /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n      role: \"row\",\n      ...rowProps,\n      style: style\n    }, /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n      role: \"rowheader\",\n      ...rowHeaderProps,\n      style: style\n    }, props.renderEmptyState(renderValues)));\n  }\n  let {\n    rowGroupProps: rowGroupProps\n  } = (0, $dbSRa$useTableRowGroup)();\n  let TBody = $1910c06f0ca9905e$var$useElementType('tbody');\n  // TODO: TableBody doesn't support being the scrollable body of the table yet, to revisit if needed. Would need to\n  // call useLoadMore here and walk up the DOM to the nearest scrollable element to set scrollRef\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TBody, {\n    ...(0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowGroupProps),\n    ...renderProps,\n    ref: ref,\n    \"data-empty\": collection.size === 0 || undefined\n  }, isDroppable && /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$RootDropIndicator, null), /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionBranch, {\n    collection: collection,\n    parent: collection.body,\n    renderDropIndicator: (0, $612b8eb6cb90e02d$export$971707d8a129a1f7)(dragAndDropHooks, dropState)\n  }), emptyState);\n});\nconst $1910c06f0ca9905e$export$b59bdbef9ce70de2 = /*#__PURE__*/(0, $dbSRa$createBranchComponent)('item', (props, forwardedRef, item) => {\n  let ref = (0, $dbSRa$useObjectRef)(forwardedRef);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dragState: dragState,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let {\n    isVirtualized: isVirtualized,\n    CollectionBranch: CollectionBranch\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    rowProps: rowProps,\n    ...states\n  } = (0, $dbSRa$useTableRow)({\n    node: item,\n    shouldSelectOnPressUp: !!dragState,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $dbSRa$useFocusRing)();\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = (0, $dbSRa$useFocusRing)({\n    within: true\n  });\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({\n    isDisabled: !states.allowsSelection && !states.hasAction,\n    onHoverStart: props.onHoverStart,\n    onHoverChange: props.onHoverChange,\n    onHoverEnd: props.onHoverEnd\n  });\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $dbSRa$useTableSelectionCheckbox)({\n    key: item.key\n  }, state);\n  let draggableItem = undefined;\n  if (dragState && dragAndDropHooks) draggableItem = dragAndDropHooks.useDraggableItem({\n    key: item.key,\n    hasDragButton: true\n  }, dragState);\n  let dropIndicator = undefined;\n  let dropIndicatorRef = (0, $dbSRa$useRef)(null);\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $dbSRa$useVisuallyHidden)();\n  if (dropState && dragAndDropHooks) dropIndicator = dragAndDropHooks.useDropIndicator({\n    target: {\n      type: 'item',\n      key: item.key,\n      dropPosition: 'on'\n    }\n  }, dropState, dropIndicatorRef);\n  let dragButtonRef = (0, $dbSRa$useRef)(null);\n  (0, $dbSRa$useEffect)(() => {\n    if (dragState && !dragButtonRef.current) console.warn('Draggable items in a Table must contain a <Button slot=\"drag\"> element so that keyboard and screen reader users can drag them.');\n    // eslint-disable-next-line\n  }, []);\n  let isDragging = dragState && dragState.isDragging(item.key);\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {\n    children: _,\n    ...restProps\n  } = props;\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...restProps,\n    id: undefined,\n    defaultClassName: 'react-aria-Row',\n    values: {\n      ...states,\n      isHovered: isHovered,\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      selectionMode: state.selectionManager.selectionMode,\n      selectionBehavior: state.selectionManager.selectionBehavior,\n      isDragging: isDragging,\n      isDropTarget: dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget,\n      isFocusVisibleWithin: isFocusVisibleWithin\n    }\n  });\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$react).Fragment, null, dropIndicator && !dropIndicator.isHidden && /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    role: \"row\",\n    style: {\n      height: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    role: \"gridcell\",\n    colSpan: state.collection.columnCount,\n    style: {\n      padding: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", {\n    role: \"button\",\n    ...visuallyHiddenProps,\n    ...dropIndicator.dropIndicatorProps,\n    ref: dropIndicatorRef\n  }))), /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    ...(0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowProps, focusProps, hoverProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps, focusWithinProps),\n    ...renderProps,\n    ref: ref,\n    \"data-disabled\": states.isDisabled || undefined,\n    \"data-selected\": states.isSelected || undefined,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": states.isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-pressed\": states.isPressed || undefined,\n    \"data-dragging\": isDragging || undefined,\n    \"data-drop-target\": (dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget) || undefined,\n    \"data-selection-mode\": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode,\n    \"data-focus-visible-within\": isFocusVisibleWithin || undefined\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $4e85f108e88277b8$export$b085522c77523c51), {\n      slots: {\n        selection: checkboxProps\n      }\n    }], [(0, $d2b4bc8c273e7be6$export$24d547caef80ccd1), {\n      slots: {\n        [(0, $64fa3d84918910a7$export$c62b8e45d58ddad9)]: {},\n        drag: {\n          ...(draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragButtonProps),\n          ref: dragButtonRef,\n          style: {\n            pointerEvents: 'none'\n          }\n        }\n      }\n    }]]\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(CollectionBranch, {\n    collection: state.collection,\n    parent: item\n  }))));\n}, props => {\n  if (props.id == null && typeof props.children === 'function') console.warn('No id detected for the Row element. The Row element requires a id to be provided to it when the cells are rendered dynamically.');\n  let dependencies = [props.value].concat(props.dependencies);\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$Collection), {\n    dependencies: dependencies,\n    items: props.columns,\n    idScope: props.id\n  }, props.children);\n});\nconst $1910c06f0ca9905e$export$f6f0c3fe4ec306ea = /*#__PURE__*/(0, $dbSRa$createLeafComponent)('cell', (props, forwardedRef, cell) => {\n  let ref = (0, $dbSRa$useObjectRef)(forwardedRef);\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    dragState: dragState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  // @ts-ignore\n  cell.column = state.collection.columns[cell.index];\n  let {\n    gridCellProps: gridCellProps,\n    isPressed: isPressed\n  } = (0, $dbSRa$useTableCell)({\n    node: cell,\n    shouldSelectOnPressUp: !!dragState,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $dbSRa$useFocusRing)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $dbSRa$useHover)({});\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    id: undefined,\n    defaultClassName: 'react-aria-Cell',\n    values: {\n      isFocused: isFocused,\n      isFocusVisible: isFocusVisible,\n      isPressed: isPressed,\n      isHovered: isHovered\n    }\n  });\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    ...(0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), gridCellProps, focusProps, hoverProps),\n    ...renderProps,\n    ref: ref,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-pressed\": isPressed || undefined\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement((0, $7135fc7d473fd974$export$4feb769f8ddf26c5).Provider, {\n    value: (0, $7135fc7d473fd974$export$a164736487e3f0ae)\n  }, renderProps.children));\n});\nfunction $1910c06f0ca9905e$var$TableDropIndicatorWrapper(props, ref) {\n  ref = (0, $dbSRa$useObjectRef)(ref);\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let buttonRef = (0, $dbSRa$useRef)(null);\n  let {\n    dropIndicatorProps: dropIndicatorProps,\n    isHidden: isHidden,\n    isDropTarget: isDropTarget\n  } = dragAndDropHooks.useDropIndicator(props, dropState, buttonRef);\n  if (isHidden) return null;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement($1910c06f0ca9905e$var$TableDropIndicatorForwardRef, {\n    ...props,\n    dropIndicatorProps: dropIndicatorProps,\n    isDropTarget: isDropTarget,\n    buttonRef: buttonRef,\n    ref: ref\n  });\n}\nfunction $1910c06f0ca9905e$var$TableDropIndicator(props, ref) {\n  let {\n    dropIndicatorProps: dropIndicatorProps,\n    isDropTarget: isDropTarget,\n    buttonRef: buttonRef,\n    ...otherProps\n  } = props;\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $dbSRa$useVisuallyHidden)();\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...otherProps,\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget: isDropTarget\n    }\n  });\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    ...(0, $dbSRa$filterDOMProps)(props),\n    ...renderProps,\n    role: \"row\",\n    ref: ref,\n    \"data-drop-target\": isDropTarget || undefined\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    role: \"gridcell\",\n    colSpan: state.collection.columnCount,\n    style: {\n      padding: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", {\n    ...visuallyHiddenProps,\n    role: \"button\",\n    ...dropIndicatorProps,\n    ref: buttonRef\n  }), renderProps.children));\n}\nconst $1910c06f0ca9905e$var$TableDropIndicatorForwardRef = /*#__PURE__*/(0, $dbSRa$forwardRef)($1910c06f0ca9905e$var$TableDropIndicator);\nfunction $1910c06f0ca9905e$var$RootDropIndicator() {\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $dbSRa$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let ref = (0, $dbSRa$useRef)(null);\n  let {\n    dropIndicatorProps: dropIndicatorProps\n  } = dragAndDropHooks.useDropIndicator({\n    target: {\n      type: 'root'\n    }\n  }, dropState, ref);\n  let isDropTarget = dropState.isDropTarget({\n    type: 'root'\n  });\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $dbSRa$useVisuallyHidden)();\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  if (!isDropTarget && dropIndicatorProps['aria-hidden']) return null;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    role: \"row\",\n    \"aria-hidden\": dropIndicatorProps['aria-hidden'],\n    style: {\n      height: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    role: \"gridcell\",\n    colSpan: state.collection.columnCount,\n    style: {\n      padding: 0\n    }\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(\"div\", {\n    role: \"button\",\n    ...visuallyHiddenProps,\n    ...dropIndicatorProps,\n    ref: ref\n  })));\n}\nconst $1910c06f0ca9905e$export$f241c45dcdfa4093 = (0, $dbSRa$createLeafComponent)('loader', function TableLoadingIndicator(props, ref, item) {\n  let state = (0, $dbSRa$useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $dbSRa$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let numColumns = state.collection.columns.length;\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-TableLoadingIndicator',\n    values: null\n  });\n  let TR = $1910c06f0ca9905e$var$useElementType('tr');\n  let TD = $1910c06f0ca9905e$var$useElementType('td');\n  let rowProps = {};\n  let rowHeaderProps = {};\n  let style = {};\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = state.collection.headerRows.length + state.collection.size;\n    rowHeaderProps['aria-colspan'] = numColumns;\n    style = {\n      display: 'contents'\n    };\n  } else rowHeaderProps['colSpan'] = numColumns;\n  return /*#__PURE__*/(0, $dbSRa$react).createElement((0, $dbSRa$react).Fragment, null, /*#__PURE__*/(0, $dbSRa$react).createElement(TR, {\n    role: \"row\",\n    ref: ref,\n    ...(0, $dbSRa$mergeProps)((0, $dbSRa$filterDOMProps)(props), rowProps),\n    ...renderProps\n  }, /*#__PURE__*/(0, $dbSRa$react).createElement(TD, {\n    role: \"rowheader\",\n    ...rowHeaderProps,\n    style: style\n  }, renderProps.children)));\n});\nexport { $1910c06f0ca9905e$export$7063e69b8a954175 as ResizableTableContainer, $1910c06f0ca9905e$export$93e4b0b2cc49b648 as TableContext, $1910c06f0ca9905e$export$38de1cb0526c21fb as TableStateContext, $1910c06f0ca9905e$export$a2680a798823803c as TableColumnResizeStateContext, $1910c06f0ca9905e$export$54ec01a60f47d33d as Table, $1910c06f0ca9905e$export$fddc468cd8cb4db9 as useTableOptions, $1910c06f0ca9905e$export$f850895b287ef28e as TableHeader, $1910c06f0ca9905e$export$816b5d811295e6bc as Column, $1910c06f0ca9905e$export$ee689e97a7664bfd as ColumnResizer, $1910c06f0ca9905e$export$76ccd210b9029917 as TableBody, $1910c06f0ca9905e$export$b59bdbef9ce70de2 as Row, $1910c06f0ca9905e$export$f6f0c3fe4ec306ea as Cell, $1910c06f0ca9905e$export$f241c45dcdfa4093 as UNSTABLE_TableLoadingIndicator };","map":{"version":3,"names":["$1910c06f0ca9905e$var$TableCollection","$dbSRa$BaseCollection","addNode","node","columnsDirty","type","head","body","commit","firstKey","lastKey","isSSR","updateColumns","rows","getChildren","key","rowHeaderColumnKeys","Set","columns","columnKeyMap","Map","visit","set","hasChildNodes","index","length","push","props","isRowHeader","add","child","headerRows","$dbSRa$buildHeaderRows","size","Error","columnCount","Symbol","iterator","getFirstKey","firstChildKey","getLastKey","lastChildKey","getKeyAfter","getItem","_node_nextKey","nextKey","getKeyBefore","_this_getItem","_node_prevKey","prevKey","k","row","childNodes","clone","collection","getTextValue","textValue","text","cell","column","has","join","$dbSRa$CollectionNode","$1910c06f0ca9905e$var$ResizableTableContainerContext","$dbSRa$createContext","$1910c06f0ca9905e$var$ResizableTableContainer","ref","containerRef","$dbSRa$useObjectRef","tableRef","$dbSRa$useRef","scrollRef","width","setWidth","$dbSRa$useState","$dbSRa$useLayoutEffect","table","current","$dbSRa$isScrollable","parentElement","$dbSRa$useResizeObserver","box","onResize","_scrollRef_current","_scrollRef_current_clientWidth","clientWidth","ctx","$dbSRa$useMemo","tableWidth","$dbSRa$useTableColumnResizeState","onResizeStart","onResizeEnd","$dbSRa$react","createElement","$dbSRa$filterDOMProps","className","style","onScroll","Provider","value","children","$1910c06f0ca9905e$export$7063e69b8a954175","$dbSRa$forwardRef","$1910c06f0ca9905e$export$93e4b0b2cc49b648","$1910c06f0ca9905e$export$38de1cb0526c21fb","$1910c06f0ca9905e$export$a2680a798823803c","$1910c06f0ca9905e$var$Table","_props_dragAndDropHooks","$64fa3d84918910a7$export$29f1550f4b0d4415","selectionState","$dbSRa$useMultipleSelectionState","selectionBehavior","selectionMode","disallowEmptySelection","hasDragHooks","dragAndDropHooks","useDraggableCollectionState","allowsDragging","content","$1910c06f0ca9905e$var$TableOptionsContext","$dbSRa$Collection","$dbSRa$CollectionBuilder","createCollection","$1910c06f0ca9905e$var$TableInner","forwardedRef","tableContainerContext","$dbSRa$useContext","$dbSRa$mergeRefs","state","$dbSRa$useTableState","undefined","UNSAFE_selectionState","isVirtualized","layoutDelegate","dropTargetDelegate","ctxDropTargetDelegate","CollectionRoot","$7135fc7d473fd974$export$4feb769f8ddf26c5","gridProps","$dbSRa$useTable","selectionManager","hasDropHooks","useDroppableCollectionState","dragHooksProvided","dropHooksProvided","$dbSRa$useEffect","console","warn","dragState","dropState","droppableCollection","isRootDropTarget","dragPreview","preview","renderDragPreview","useDraggableCollection","DragPreview","keyboardDelegate","$dbSRa$ListKeyboardDelegate","disabledKeys","disabledBehavior","ListDropTargetDelegate","useDroppableCollection","isDropTarget","focusProps","isFocused","isFocusVisible","$dbSRa$useFocusRing","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","defaultClassName","values","isListDraggable","isDisabled","layoutState","useTableColumnResizeState","tableLayout","ElementType","$1910c06f0ca9905e$var$useElementType","_tableContainerContext_scrollRef","$64fa3d84918910a7$export$2881499e37b75b9a","$612b8eb6cb90e02d$export$d188a835a7bc5783","$612b8eb6cb90e02d$export$f55761759794cf55","render","$1910c06f0ca9905e$var$TableDropIndicatorWrapper","$dbSRa$FocusScope","$dbSRa$mergeProps","collectionProps","slot","persistedKeys","$612b8eb6cb90e02d$export$d1e8e3fbb7461f6","$1910c06f0ca9905e$export$54ec01a60f47d33d","element","$1910c06f0ca9905e$export$fddc468cd8cb4db9","$1910c06f0ca9905e$export$f850895b287ef28e","$dbSRa$createBranchComponent","$dbSRa$useCachedChildren","items","$dbSRa$useCallback","item","$1910c06f0ca9905e$var$TableHeaderRow","THead","rowGroupProps","$dbSRa$useTableRowGroup","hoverProps","isHovered","$dbSRa$useHover","onHoverStart","onHoverChange","onHoverEnd","dependencies","CollectionBranch","rowProps","$dbSRa$useTableHeaderRow","checkboxProps","$dbSRa$useTableSelectAllCheckbox","TR","$4e85f108e88277b8$export$b085522c77523c51","slots","selection","parent","$1910c06f0ca9905e$export$816b5d811295e6bc","$dbSRa$createLeafComponent","_state_sortDescriptor","_state_sortDescriptor1","columnHeaderProps","$dbSRa$useTableColumnHeader","isResizing","resizingColumn","prop","allowsSorting","id","rendered","sortDirection","sortDescriptor","direction","startResize","setKeyboardNavigationDisabled","sort","getColumnWidth","TH","colSpan","colspan","$1910c06f0ca9905e$var$ColumnResizerContext","triggerRef","$7135fc7d473fd974$export$a164736487e3f0ae","$1910c06f0ca9905e$var$ColumnResizer","stringFormatter","$dbSRa$useLocalizedStringFormatter","$parcel$interopDefault","$dbSRa$intlStringsmodulejs","inputRef","resizerProps","inputProps","$dbSRa$useTableColumnResize","format","isEResizable","getColumnMinWidth","isWResizable","getColumnMaxWidth","$dbSRa$useLocale","resizableDirection","objectRef","cursor","setCursor","window","getComputedStyle","isMouseDown","setMouseDown","onPointerDown","e","pointerType","role","$dbSRa$reactdom","createPortal","position","top","left","bottom","right","document","$1910c06f0ca9905e$export$ee689e97a7664bfd","$1910c06f0ca9905e$export$76ccd210b9029917","isDroppable","_dropState_isDropTarget","renderValues","isEmpty","emptyState","TD","numColumns","renderEmptyState","rowHeaderProps","display","TBody","$1910c06f0ca9905e$var$RootDropIndicator","renderDropIndicator","$612b8eb6cb90e02d$export$971707d8a129a1f7","$1910c06f0ca9905e$export$b59bdbef9ce70de2","states","$dbSRa$useTableRow","shouldSelectOnPressUp","isFocusVisibleWithin","focusWithinProps","within","allowsSelection","hasAction","$dbSRa$useTableSelectionCheckbox","draggableItem","useDraggableItem","hasDragButton","dropIndicator","dropIndicatorRef","visuallyHiddenProps","$dbSRa$useVisuallyHidden","useDropIndicator","target","dropPosition","dragButtonRef","isDragging","_","restProps","Fragment","isHidden","height","padding","dropIndicatorProps","dragProps","isSelected","isPressed","$d2b4bc8c273e7be6$export$24d547caef80ccd1","$64fa3d84918910a7$export$c62b8e45d58ddad9","drag","dragButtonProps","pointerEvents","concat","idScope","$1910c06f0ca9905e$export$f6f0c3fe4ec306ea","gridCellProps","$dbSRa$useTableCell","buttonRef","$1910c06f0ca9905e$var$TableDropIndicatorForwardRef","$1910c06f0ca9905e$var$TableDropIndicator","otherProps","$1910c06f0ca9905e$export$f241c45dcdfa4093","TableLoadingIndicator"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/Table.tsx"],"sourcesContent":["import {AriaLabelingProps, HoverEvents, Key, LinkDOMProps, RefObject} from '@react-types/shared';\nimport {BaseCollection, Collection, CollectionBuilder, CollectionNode, createBranchComponent, createLeafComponent, useCachedChildren} from '@react-aria/collections';\nimport {buildHeaderRows, TableColumnResizeState} from '@react-stately/table';\nimport {ButtonContext} from './Button';\nimport {CheckboxContext} from './RSPContexts';\nimport {CollectionProps, CollectionRendererContext, DefaultCollectionRenderer, ItemRenderProps} from './Collection';\nimport {ColumnSize, ColumnStaticSize, TableCollection as ITableCollection, TableProps as SharedTableProps} from '@react-types/table';\nimport {ContextValue, DEFAULT_SLOT, DOMProps, Provider, RenderProps, ScrollableProps, SlotProps, StyleProps, StyleRenderProps, useContextProps, useRenderProps} from './utils';\nimport {DisabledBehavior, DraggableCollectionState, DroppableCollectionState, MultipleSelectionState, Node, SelectionBehavior, SelectionMode, SortDirection, TableState, useMultipleSelectionState, useTableColumnResizeState, useTableState} from 'react-stately';\nimport {DragAndDropContext, DropIndicatorContext, DropIndicatorProps, useDndPersistedKeys, useRenderDropIndicator} from './DragAndDrop';\nimport {DragAndDropHooks} from './useDragAndDrop';\nimport {DraggableItemResult, DragPreviewRenderer, DropIndicatorAria, DroppableCollectionResult, FocusScope, ListKeyboardDelegate, mergeProps, useFocusRing, useHover, useLocale, useLocalizedStringFormatter, useTable, useTableCell, useTableColumnHeader, useTableColumnResize, useTableHeaderRow, useTableRow, useTableRowGroup, useTableSelectAllCheckbox, useTableSelectionCheckbox, useVisuallyHidden} from 'react-aria';\nimport {filterDOMProps, isScrollable, mergeRefs, useLayoutEffect, useObjectRef, useResizeObserver} from '@react-aria/utils';\nimport {GridNode} from '@react-types/grid';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport React, {createContext, ForwardedRef, forwardRef, JSX, ReactElement, ReactNode, useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\n\nclass TableCollection<T> extends BaseCollection<T> implements ITableCollection<T> {\n  headerRows: GridNode<T>[] = [];\n  columns: GridNode<T>[] = [];\n  rows: GridNode<T>[] = [];\n  rowHeaderColumnKeys: Set<Key> = new Set();\n  head: CollectionNode<T> = new CollectionNode('tableheader', -1);\n  body: CollectionNode<T> = new CollectionNode('tablebody', -2);\n  columnsDirty = true;\n\n  addNode(node: CollectionNode<T>) {\n    super.addNode(node);\n\n    this.columnsDirty ||= node.type === 'column';\n    if (node.type === 'tableheader') {\n      this.head = node;\n    }\n\n    if (node.type === 'tablebody') {\n      this.body = node;\n    }\n  }\n\n  commit(firstKey: Key, lastKey: Key, isSSR = false) {\n    this.updateColumns(isSSR);\n    super.commit(firstKey, lastKey, isSSR);\n    this.rows = [...this.getChildren(this.body.key)];\n  }\n\n  private updateColumns(isSSR: boolean) {\n    if (!this.columnsDirty) {\n      return;\n    }\n\n    this.rowHeaderColumnKeys = new Set();\n    this.columns = [];\n\n    let columnKeyMap = new Map();\n    let visit = (node: Node<T>) => {\n      switch (node.type) {\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            node.index = this.columns.length;\n            this.columns.push(node);\n\n            if (node.props.isRowHeader) {\n              this.rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n      }\n      for (let child of this.getChildren(node.key)) {\n        visit(child);\n      }\n    };\n\n    for (let node of this.getChildren(this.head.key)) {\n      visit(node);\n    }\n\n    this.headerRows = buildHeaderRows(columnKeyMap, this.columns);\n    this.columnsDirty = false;\n    if (this.rowHeaderColumnKeys.size === 0 && this.columns.length > 0 && !isSSR) {\n      throw new Error('A table must have at least one Column with the isRowHeader prop set to true');\n    }\n  }\n\n  get columnCount() {\n    return this.columns.length;\n  }\n\n  *[Symbol.iterator]() {\n    // Wait until the collection is initialized.\n    if (this.head.key === -1) {\n      return;\n    }\n    yield this.head;\n    yield this.body;\n  }\n\n  get size() {\n    return this.rows.length;\n  }\n\n  getFirstKey() {\n    return this.body.firstChildKey;\n  }\n\n  getLastKey() {\n    return this.body.lastChildKey;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.getItem(key);\n    if (node?.type === 'column') {\n      return node.nextKey ?? null;\n    }\n\n    return super.getKeyAfter(key);\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.getItem(key);\n    if (node?.type === 'column') {\n      return node.prevKey ?? null;\n    }\n\n    let k = super.getKeyBefore(key);\n    if (k != null && this.getItem(k)?.type === 'tablebody') {\n      return null;\n    }\n\n    return k;\n  }\n\n  getChildren(key: Key): Iterable<Node<T>> {\n    if (!this.getItem(key)) {\n      for (let row of this.headerRows) {\n        if (row.key === key) {\n          return row.childNodes;\n        }\n      }\n    }\n\n    return super.getChildren(key);\n  }\n\n  clone() {\n    let collection = super.clone();\n    collection.headerRows = this.headerRows;\n    collection.columns = this.columns;\n    collection.rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    collection.head = this.head;\n    collection.body = this.body;\n    return collection;\n  }\n\n  getTextValue(key: Key): string {\n    let row = this.getItem(key);\n    if (!row) {\n      return '';\n    }\n\n    // If the row has a textValue, use that.\n    if (row.textValue) {\n      return row.textValue;\n    }\n\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    let text: string[] = [];\n    for (let cell of this.getChildren(key)) {\n      let column = this.columns[cell.index!];\n      if (rowHeaderColumnKeys.has(column.key) && cell.textValue) {\n        text.push(cell.textValue);\n      }\n\n      if (text.length === rowHeaderColumnKeys.size) {\n        break;\n      }\n    }\n\n    return text.join(' ');\n  }\n}\n\ninterface ResizableTableContainerContextValue {\n  tableWidth: number,\n  tableRef: RefObject<HTMLTableElement | null>,\n  scrollRef: RefObject<HTMLElement | null>,\n  // Dependency inject useTableColumnResizeState so it doesn't affect bundle size unless you're using ResizableTableContainer.\n  useTableColumnResizeState: typeof useTableColumnResizeState,\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void\n}\n\nconst ResizableTableContainerContext = createContext<ResizableTableContainerContextValue | null>(null);\n\nexport interface ResizableTableContainerProps extends DOMProps, ScrollableProps<HTMLDivElement> {\n  /**\n   * Handler that is called when a user starts a column resize.\n   */\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called when a user performs a column resize.\n   * Can be used with the width property on columns to put the column widths into\n   * a controlled state.\n   */\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called after a user performs a column resize.\n   * Can be used to store the widths of columns for another future session.\n   */\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void\n}\n\nfunction ResizableTableContainer(props: ResizableTableContainerProps, ref: ForwardedRef<HTMLDivElement>) {\n  let containerRef = useObjectRef(ref);\n  let tableRef = useRef<HTMLTableElement>(null);\n  let scrollRef = useRef<HTMLElement | null>(null);\n  let [width, setWidth] = useState(0);\n\n  useLayoutEffect(() => {\n    // Walk up the DOM from the Table to the ResizableTableContainer and stop\n    // when we reach the first scrollable element. This is what we'll measure\n    // to determine column widths (important due to width of scrollbars).\n    // This will usually be the ResizableTableContainer for native tables, and\n    // the Table itself for virtualized tables.\n    let table = tableRef.current as HTMLElement | null;\n    while (table && table !== containerRef.current && !isScrollable(table)) {\n      table = table.parentElement;\n    }\n    scrollRef.current = table;\n  }, [containerRef]);\n\n  useResizeObserver({\n    ref: scrollRef,\n    box: 'border-box',\n    onResize() {\n      setWidth(scrollRef.current?.clientWidth ?? 0);\n    }\n  });\n\n  useLayoutEffect(() => {\n    setWidth(scrollRef.current?.clientWidth ?? 0);\n  }, []);\n\n  let ctx = useMemo(() => ({\n    tableRef,\n    scrollRef,\n    tableWidth: width,\n    useTableColumnResizeState,\n    onResizeStart: props.onResizeStart,\n    onResize: props.onResize,\n    onResizeEnd: props.onResizeEnd\n  }), [tableRef, width, props.onResizeStart, props.onResize, props.onResizeEnd]);\n\n  return (\n    <div\n      {...filterDOMProps(props as any)}\n      ref={containerRef}\n      className={props.className || 'react-aria-ResizableTableContainer'}\n      style={props.style}\n      onScroll={props.onScroll}>\n      <ResizableTableContainerContext.Provider value={ctx}>\n        {props.children}\n      </ResizableTableContainerContext.Provider>\n    </div>\n  );\n}\n\nconst _ResizableTableContainer = forwardRef(ResizableTableContainer);\nexport {_ResizableTableContainer as ResizableTableContainer};\n\nexport const TableContext = createContext<ContextValue<TableProps, HTMLTableElement>>(null);\nexport const TableStateContext = createContext<TableState<any> | null>(null);\nexport const TableColumnResizeStateContext = createContext<TableColumnResizeState<unknown> | null>(null);\n\nexport interface TableRenderProps {\n  /**\n   * Whether the table is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the table is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the table is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean,\n  /**\n   * State of the table.\n   */\n  state: TableState<unknown>\n}\n\nexport interface TableProps extends Omit<SharedTableProps<any>, 'children'>, StyleRenderProps<TableRenderProps>, SlotProps, AriaLabelingProps, ScrollableProps<HTMLTableElement> {\n  /** The elements that make up the table. Includes the TableHeader, TableBody, Columns, and Rows. */\n  children?: ReactNode,\n  /**\n   * How multiple selection should behave in the collection.\n   * @default \"toggle\"\n   */\n  selectionBehavior?: SelectionBehavior,\n  /**\n   * Whether `disabledKeys` applies to all interactions, or only selection.\n   * @default \"selection\"\n   */\n  disabledBehavior?: DisabledBehavior,\n  /** Handler that is called when a user performs an action on the row. */\n  onRowAction?: (key: Key) => void,\n  /** The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the Table. */\n  dragAndDropHooks?: DragAndDropHooks\n}\n\nfunction Table(props: TableProps, ref: ForwardedRef<HTMLTableElement>) {\n  [props, ref] = useContextProps(props, ref, TableContext);\n\n  // Separate selection state so we have access to it from collection components via useTableOptions.\n  let selectionState = useMultipleSelectionState(props);\n  let {selectionBehavior, selectionMode, disallowEmptySelection} = selectionState;\n  let hasDragHooks = !!props.dragAndDropHooks?.useDraggableCollectionState;\n  let ctx = useMemo(() => ({\n    selectionBehavior: selectionMode === 'none' ? null : selectionBehavior,\n    selectionMode,\n    disallowEmptySelection,\n    allowsDragging: hasDragHooks\n  }), [selectionBehavior, selectionMode, disallowEmptySelection, hasDragHooks]);\n\n  let content = (\n    <TableOptionsContext.Provider value={ctx}>\n      <Collection {...props} />\n    </TableOptionsContext.Provider>\n  );\n\n  return (\n    <CollectionBuilder content={content} createCollection={() => new TableCollection<any>()}>\n      {collection => <TableInner props={props} forwardedRef={ref} selectionState={selectionState} collection={collection} />}\n    </CollectionBuilder>\n  );\n}\n\ninterface TableInnerProps {\n  props: TableProps,\n  forwardedRef: ForwardedRef<HTMLTableElement>,\n  selectionState: MultipleSelectionState,\n  collection: ITableCollection<Node<object>>\n}\n\n\nfunction TableInner({props, forwardedRef: ref, selectionState, collection}: TableInnerProps) {\n  let tableContainerContext = useContext(ResizableTableContainerContext);\n  ref = useObjectRef(useMemo(() => mergeRefs(ref, tableContainerContext?.tableRef), [ref, tableContainerContext?.tableRef]));\n  let state = useTableState({\n    ...props,\n    collection,\n    children: undefined,\n    UNSAFE_selectionState: selectionState\n  });\n\n  let {isVirtualized, layoutDelegate, dropTargetDelegate: ctxDropTargetDelegate, CollectionRoot} = useContext(CollectionRendererContext);\n  let {dragAndDropHooks} = props;\n  let {gridProps} = useTable({\n    ...props,\n    layoutDelegate,\n    isVirtualized\n  }, state, ref);\n  let selectionManager = state.selectionManager;\n  let hasDragHooks = !!dragAndDropHooks?.useDraggableCollectionState;\n  let hasDropHooks = !!dragAndDropHooks?.useDroppableCollectionState;\n  let dragHooksProvided = useRef(hasDragHooks);\n  let dropHooksProvided = useRef(hasDropHooks);\n  useEffect(() => {\n    if (dragHooksProvided.current !== hasDragHooks) {\n      console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if (dropHooksProvided.current !== hasDropHooks) {\n      console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n  }, [hasDragHooks, hasDropHooks]);\n\n  let dragState: DraggableCollectionState | undefined = undefined;\n  let dropState: DroppableCollectionState | undefined = undefined;\n  let droppableCollection: DroppableCollectionResult | undefined = undefined;\n  let isRootDropTarget = false;\n  let dragPreview: JSX.Element | null = null;\n  let preview = useRef<DragPreviewRenderer>(null);\n\n  if (hasDragHooks && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState!({\n      collection,\n      selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection!({}, dragState, ref);\n\n    let DragPreview = dragAndDropHooks.DragPreview!;\n    dragPreview = dragAndDropHooks.renderDragPreview\n      ? <DragPreview ref={preview}>{dragAndDropHooks.renderDragPreview}</DragPreview>\n      : null;\n  }\n\n  if (hasDropHooks && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState!({\n      collection,\n      selectionManager\n    });\n\n    let keyboardDelegate = new ListKeyboardDelegate({\n      collection,\n      disabledKeys: selectionManager.disabledKeys,\n      disabledBehavior: selectionManager.disabledBehavior,\n      ref,\n      layoutDelegate\n    });\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection.rows, ref);\n    droppableCollection = dragAndDropHooks.useDroppableCollection!({\n      keyboardDelegate,\n      dropTargetDelegate\n    }, dropState, ref);\n\n    isRootDropTarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let renderProps = useRenderProps({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-Table',\n    values: {\n      isDropTarget: isRootDropTarget,\n      isFocused,\n      isFocusVisible,\n      state\n    }\n  });\n\n  let isListDraggable = !!(hasDragHooks && !dragState?.isDisabled);\n\n  let style = renderProps.style;\n  let layoutState: TableColumnResizeState<unknown> | null = null;\n  if (tableContainerContext) {\n    layoutState = tableContainerContext.useTableColumnResizeState({\n      tableWidth: tableContainerContext.tableWidth\n    }, state);\n    if (!isVirtualized) {\n      style = {\n        ...style,\n        tableLayout: 'fixed',\n        width: 'fit-content'\n      };\n    }\n  }\n\n  let ElementType = useElementType('table');\n\n  return (\n    <Provider\n      values={[\n        [TableStateContext, state],\n        [TableColumnResizeStateContext, layoutState],\n        [DragAndDropContext, {dragAndDropHooks, dragState, dropState}],\n        [DropIndicatorContext, {render: TableDropIndicatorWrapper}]\n      ]}>\n      <FocusScope>\n        <ElementType\n          {...filterDOMProps(props)}\n          {...renderProps}\n          {...mergeProps(gridProps, focusProps, droppableCollection?.collectionProps)}\n          style={style}\n          ref={ref}\n          slot={props.slot || undefined}\n          onScroll={props.onScroll}\n          data-allows-dragging={isListDraggable || undefined}\n          data-drop-target={isRootDropTarget || undefined}\n          data-focused={isFocused || undefined}\n          data-focus-visible={isFocusVisible || undefined}>\n          <CollectionRoot\n            collection={collection}\n            scrollRef={tableContainerContext?.scrollRef ?? ref}\n            persistedKeys={useDndPersistedKeys(selectionManager, dragAndDropHooks, dropState)} />\n        </ElementType>\n      </FocusScope>\n      {dragPreview}\n    </Provider>\n  );\n}\n\n/**\n * A table displays data in rows and columns and enables a user to navigate its contents via directional navigation keys,\n * and optionally supports row selection and sorting.\n */\nconst _Table = forwardRef(Table);\nexport {_Table as Table};\n\nfunction useElementType<E extends keyof JSX.IntrinsicElements>(element: E): E | 'div' {\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  return isVirtualized ? 'div' : element;\n}\n\nexport interface TableOptionsContextValue {\n  /** The type of selection that is allowed in the table. */\n  selectionMode: SelectionMode,\n  /** The selection behavior for the table. If selectionMode is `\"none\"`, this will be `null`. */\n  selectionBehavior: SelectionBehavior | null,\n  /** Whether the table allows empty selection. */\n  disallowEmptySelection: boolean,\n  /** Whether the table allows rows to be dragged. */\n  allowsDragging: boolean\n}\n\nconst TableOptionsContext = createContext<TableOptionsContextValue | null>(null);\n\n/**\n * Returns options from the parent `<Table>` component.\n */\nexport function useTableOptions(): TableOptionsContextValue {\n  return useContext(TableOptionsContext)!;\n}\n\nexport interface TableHeaderRenderProps {\n  /**\n   * Whether the table header is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean\n}\n\nexport interface TableHeaderProps<T> extends StyleRenderProps<TableHeaderRenderProps>, HoverEvents {\n  /** A list of table columns. */\n  columns?: T[],\n  /** A list of `Column(s)` or a function. If the latter, a list of columns must be provided using the `columns` prop. */\n  children?: ReactNode | ((item: T) => ReactElement),\n  /** Values that should invalidate the column cache when using dynamic collections. */\n  dependencies?: any[]\n}\n\n/**\n * A header within a `<Table>`, containing the table columns.\n */\nexport const TableHeader =  /*#__PURE__*/ createBranchComponent(\n  'tableheader',\n  <T extends object>(props: TableHeaderProps<T>, ref: ForwardedRef<HTMLTableSectionElement>) => {\n    let collection = useContext(TableStateContext)!.collection as TableCollection<unknown>;\n    let headerRows = useCachedChildren({\n      items: collection.headerRows,\n      children: useCallback((item: Node<unknown>) => {\n        switch (item.type) {\n          case 'headerrow':\n            return <TableHeaderRow item={item} />;\n          default:\n            throw new Error('Unsupported node type in TableHeader: ' + item.type);\n        }\n      }, [])\n    });\n\n    let THead = useElementType('thead');\n    let {rowGroupProps} = useTableRowGroup();\n    let {hoverProps, isHovered} = useHover({\n      onHoverStart: props.onHoverStart,\n      onHoverChange: props.onHoverChange,\n      onHoverEnd: props.onHoverEnd\n    });\n\n    let renderProps = useRenderProps({\n      className: props.className,\n      style: props.style,\n      defaultClassName: 'react-aria-TableHeader',\n      values: {\n        isHovered\n      }\n    });\n\n    return (\n      <THead\n        {...mergeProps(filterDOMProps(props as any), rowGroupProps, hoverProps)}\n        {...renderProps}\n        ref={ref}\n        data-hovered={isHovered || undefined}>\n        {headerRows}\n      </THead>\n    );\n  },\n  props => (\n    <Collection dependencies={props.dependencies} items={props.columns}>\n      {props.children}\n    </Collection>\n  )\n);\n\nfunction TableHeaderRow({item}: {item: GridNode<any>}) {\n  let ref = useRef<HTMLTableRowElement>(null);\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized, CollectionBranch} = useContext(CollectionRendererContext);\n  let {rowProps} = useTableHeaderRow({node: item, isVirtualized}, state, ref);\n  let {checkboxProps} = useTableSelectAllCheckbox(state);\n  let TR = useElementType('tr');\n\n  return (\n    <TR {...rowProps} ref={ref}>\n      <Provider\n        values={[\n          [CheckboxContext, {\n            slots: {\n              selection: checkboxProps\n            }\n          }]\n        ]}>\n        <CollectionBranch collection={state.collection} parent={item} />\n      </Provider>\n    </TR>\n  );\n}\n\nexport interface ColumnRenderProps {\n  /**\n   * Whether the item is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the item is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the item is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the column allows sorting.\n   * @selector [data-allows-sorting]\n   */\n  allowsSorting: boolean,\n  /**\n   * The current sort direction.\n   * @selector [data-sort-direction=\"ascending | descending\"]\n   */\n  sortDirection: SortDirection | undefined,\n  /**\n   * Whether the column is currently being resized.\n   * @selector [data-resizing]\n   */\n  isResizing: boolean,\n  /**\n   * Triggers sorting for this column in the given direction.\n   */\n  sort(direction: SortDirection): void,\n  /**\n   * Starts column resizing if the table is contained in a `<ResizableTableContainer>` element.\n   */\n  startResize(): void\n}\n\nexport interface ColumnProps extends RenderProps<ColumnRenderProps> {\n  /** The unique id of the column. */\n  id?: Key,\n  /** Whether the column allows sorting. */\n  allowsSorting?: boolean,\n  /** Whether a column is a [row header](https://www.w3.org/TR/wai-aria-1.1/#rowheader) and should be announced by assistive technology during row navigation. */\n  isRowHeader?: boolean,\n  /** A string representation of the column's contents, used for accessibility announcements. */\n  textValue?: string,\n  /** The width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  width?: ColumnSize | null,\n  /** The default width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  defaultWidth?: ColumnSize | null,\n  /** The minimum width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  minWidth?: ColumnStaticSize | null,\n  /** The maximum width of the column. This prop only applies when the `<Table>` is wrapped in a `<ResizableTableContainer>`. */\n  maxWidth?: ColumnStaticSize | null\n}\n\n/**\n * A column within a `<Table>`.\n */\nexport const Column = /*#__PURE__*/ createLeafComponent('column', (props: ColumnProps, forwardedRef: ForwardedRef<HTMLTableCellElement>, column: GridNode<unknown>) => {\n  let ref = useObjectRef<HTMLTableHeaderCellElement>(forwardedRef);\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  let {columnHeaderProps} = useTableColumnHeader(\n    {node: column, isVirtualized},\n    state,\n    ref\n  );\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n\n  let layoutState = useContext(TableColumnResizeStateContext);\n  let isResizing = false;\n  if (layoutState) {\n    isResizing = layoutState.resizingColumn === column.key;\n  } else {\n    for (let prop in ['width', 'defaultWidth', 'minWidth', 'maxWidth']) {\n      if (prop in column.props) {\n        console.warn(`The ${prop} prop on a <Column> only applies when a <Table> is wrapped in a <ResizableTableContainer>. If you aren't using column resizing, you can set the width of a column with CSS.`);\n      }\n    }\n  }\n\n  let {hoverProps, isHovered} = useHover({isDisabled: !props.allowsSorting});\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: column.rendered,\n    defaultClassName: 'react-aria-Column',\n    values: {\n      isHovered,\n      isFocused,\n      isFocusVisible,\n      allowsSorting: column.props.allowsSorting,\n      sortDirection: state.sortDescriptor?.column === column.key\n        ? state.sortDescriptor.direction\n        : undefined,\n      isResizing,\n      startResize: () => {\n        if (layoutState) {\n          layoutState.startResize(column.key);\n          state.setKeyboardNavigationDisabled(true);\n        } else {\n          throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n        }\n      },\n      sort: (direction) => {\n        state.sort(column.key, direction);\n      }\n    }\n  });\n\n  let style = renderProps.style;\n  if (layoutState) {\n    style = {...style, width: layoutState.getColumnWidth(column.key)};\n  }\n\n  let TH = useElementType('th');\n\n  return (\n    <TH\n      {...mergeProps(filterDOMProps(props as any), columnHeaderProps, focusProps, hoverProps)}\n      {...renderProps}\n      style={style}\n      colSpan={column.colspan}\n      ref={ref}\n      data-hovered={isHovered || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-resizing={isResizing || undefined}\n      data-allows-sorting={column.props.allowsSorting || undefined}\n      data-sort-direction={state.sortDescriptor?.column === column.key ? state.sortDescriptor.direction : undefined}>\n      <Provider\n        values={[\n          [ColumnResizerContext, {column, triggerRef: ref}],\n          [CollectionRendererContext, DefaultCollectionRenderer]\n        ]}>\n        {renderProps.children}\n      </Provider>\n    </TH>\n  );\n});\n\nexport interface ColumnResizerRenderProps {\n  /**\n   * Whether the resizer is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean,\n  /**\n   * Whether the resizer is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the resizer is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the resizer is currently being resized.\n   * @selector [data-resizing]\n   */\n  isResizing: boolean,\n  /**\n   * The direction that the column is currently resizable.\n   * @selector [data-resizable-direction=\"right | left | both\"]\n   */\n  resizableDirection: 'right' | 'left' | 'both'\n}\n\nexport interface ColumnResizerProps extends HoverEvents, RenderProps<ColumnResizerRenderProps> {\n  /** A custom accessibility label for the resizer. */\n  'aria-label'?: string\n}\n\ninterface ColumnResizerContextValue {\n  column: GridNode<unknown>,\n  triggerRef: RefObject<HTMLDivElement | null>\n}\n\nconst ColumnResizerContext = createContext<ColumnResizerContextValue | null>(null);\n\nfunction ColumnResizer(props: ColumnResizerProps, ref: ForwardedRef<HTMLDivElement>) {\n  let layoutState = useContext(TableColumnResizeStateContext);\n  if (!layoutState) {\n    throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');\n  }\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, 'react-aria-components');\n\n  let {onResizeStart, onResize, onResizeEnd} = useContext(ResizableTableContainerContext)!;\n  let {column, triggerRef} = useContext(ColumnResizerContext)!;\n  let inputRef = useRef<HTMLInputElement>(null);\n  let {resizerProps, inputProps, isResizing} = useTableColumnResize(\n    {\n      column,\n      'aria-label': props['aria-label'] || stringFormatter.format('tableResizer'),\n      onResizeStart,\n      onResize,\n      onResizeEnd,\n      triggerRef\n    },\n    layoutState,\n    inputRef\n  );\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let {hoverProps, isHovered} = useHover(props);\n\n  let isEResizable = layoutState.getColumnMinWidth(column.key) >= layoutState.getColumnWidth(column.key);\n  let isWResizable = layoutState.getColumnMaxWidth(column.key) <= layoutState.getColumnWidth(column.key);\n  let {direction} = useLocale();\n  let resizableDirection: ColumnResizerRenderProps['resizableDirection'] = 'both';\n  if (isEResizable) {\n    resizableDirection = direction === 'rtl' ? 'right' : 'left';\n  } else if (isWResizable) {\n    resizableDirection = direction === 'rtl' ? 'left' : 'right';\n  } else {\n    resizableDirection = 'both';\n  }\n\n  let objectRef = useObjectRef(ref);\n  let [cursor, setCursor] = useState('');\n  useEffect(() => {\n    if (!objectRef.current) {\n      return;\n    }\n    let style = window.getComputedStyle(objectRef.current);\n    setCursor(style.cursor);\n  }, [objectRef, resizableDirection]);\n\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-ColumnResizer',\n    values: {\n      isFocused,\n      isFocusVisible,\n      isResizing,\n      isHovered,\n      resizableDirection\n    }\n  });\n\n  let [isMouseDown, setMouseDown] = useState(false);\n  let onPointerDown = (e: PointerEvent) => {\n    if (e.pointerType === 'mouse') {\n      setMouseDown(true);\n    }\n  };\n\n  if (!isResizing && isMouseDown) {\n    setMouseDown(false);\n  }\n\n  return (\n    <div\n      ref={objectRef}\n      role=\"presentation\"\n      {...filterDOMProps(props as any)}\n      {...renderProps}\n      {...mergeProps(resizerProps, {onPointerDown}, hoverProps)}\n      data-hovered={isHovered || undefined}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-resizing={isResizing || undefined}\n      data-resizable-direction={resizableDirection}>\n      {renderProps.children}\n      <input\n        ref={inputRef}\n        {...mergeProps(inputProps, focusProps)} />\n      {isResizing && isMouseDown && ReactDOM.createPortal(<div style={{position: 'fixed', top: 0, left: 0, bottom: 0, right: 0, cursor}} />, document.body)}\n    </div>\n  );\n}\n\nconst _ColumnResizer = forwardRef(ColumnResizer);\nexport {_ColumnResizer as ColumnResizer};\n\nexport interface TableBodyRenderProps {\n  /**\n   * Whether the table body has no rows and should display its empty state.\n   * @selector [data-empty]\n   */\n  isEmpty: boolean,\n  /**\n   * Whether the Table is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean\n}\n\nexport interface TableBodyProps<T> extends CollectionProps<T>, StyleRenderProps<TableBodyRenderProps> {\n  /** Provides content to display when there are no rows in the table. */\n  renderEmptyState?: (props: TableBodyRenderProps) => ReactNode\n}\n/**\n * The body of a `<Table>`, containing the table rows.\n */\nexport const TableBody = /*#__PURE__*/ createBranchComponent('tablebody', <T extends object>(props: TableBodyProps<T>, ref: ForwardedRef<HTMLTableSectionElement>) => {\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  let collection = state.collection;\n  let {CollectionBranch} = useContext(CollectionRendererContext);\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext);\n  let isDroppable = !!dragAndDropHooks?.useDroppableCollectionState && !dropState?.isDisabled;\n  let isRootDropTarget = isDroppable && !!dropState && (dropState.isDropTarget({type: 'root'}) ?? false);\n\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: collection.size === 0\n  };\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: undefined,\n    defaultClassName: 'react-aria-TableBody',\n    values: renderValues\n  });\n\n  let emptyState;\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n  let numColumns = collection.columnCount;\n  if (collection.size === 0 && props.renderEmptyState && state) {\n    let rowProps = {};\n    let rowHeaderProps = {};\n    let style = {};\n    if (isVirtualized) {\n      rowProps['aria-rowindex'] = collection.headerRows.length + 1;\n      rowHeaderProps['aria-colspan'] = numColumns;\n      style = {display: 'contents'};\n    } else {\n      rowHeaderProps['colSpan'] = numColumns;\n    }\n\n    emptyState = (\n      <TR role=\"row\" {...rowProps} style={style}>\n        <TD role=\"rowheader\" {...rowHeaderProps} style={style}>\n          {props.renderEmptyState(renderValues)}\n        </TD>\n      </TR>\n    );\n  }\n\n  let {rowGroupProps} = useTableRowGroup();\n  let TBody = useElementType('tbody');\n\n  // TODO: TableBody doesn't support being the scrollable body of the table yet, to revisit if needed. Would need to\n  // call useLoadMore here and walk up the DOM to the nearest scrollable element to set scrollRef\n  return (\n    <TBody\n      {...mergeProps(filterDOMProps(props as any), rowGroupProps)}\n      {...renderProps}\n      ref={ref}\n      data-empty={collection.size === 0 || undefined}>\n      {isDroppable && <RootDropIndicator />}\n      <CollectionBranch\n        collection={collection}\n        parent={collection.body}\n        renderDropIndicator={useRenderDropIndicator(dragAndDropHooks, dropState)} />\n      {emptyState}\n    </TBody>\n  );\n});\n\nexport interface RowRenderProps extends ItemRenderProps {\n  /** Whether the row's children have keyboard focus. */\n  isFocusVisibleWithin: boolean\n}\n\nexport interface RowProps<T> extends StyleRenderProps<RowRenderProps>, LinkDOMProps, HoverEvents {\n  /** The unique id of the row. */\n  id?: Key,\n  /** A list of columns used when dynamically rendering cells. */\n  columns?: Iterable<T>,\n  /** The cells within the row. Supports static items or a function for dynamic rendering. */\n  children?: ReactNode | ((item: T) => ReactElement),\n  /** The object value that this row represents. When using dynamic collections, this is set automatically. */\n  value?: T,\n  /** Values that should invalidate the cell cache when using dynamic collections. */\n  dependencies?: any[],\n  /** A string representation of the row's contents, used for features like typeahead. */\n  textValue?: string,\n  /** Whether the row is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the row. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\n/**\n * A row within a `<Table>`.\n */\nexport const Row = /*#__PURE__*/ createBranchComponent(\n  'item',\n  <T extends object>(props: RowProps<T>, forwardedRef: ForwardedRef<HTMLTableRowElement>, item: GridNode<T>) => {\n    let ref = useObjectRef<HTMLTableRowElement>(forwardedRef);\n    let state = useContext(TableStateContext)!;\n    let {dragAndDropHooks, dragState, dropState} = useContext(DragAndDropContext);\n    let {isVirtualized, CollectionBranch} = useContext(CollectionRendererContext);\n    let {rowProps, ...states} = useTableRow(\n      {\n        node: item,\n        shouldSelectOnPressUp: !!dragState,\n        isVirtualized\n      },\n      state,\n      ref\n    );\n    let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n    let {\n      isFocusVisible: isFocusVisibleWithin,\n      focusProps: focusWithinProps\n    } = useFocusRing({within: true});\n    let {hoverProps, isHovered} = useHover({\n      isDisabled: !states.allowsSelection && !states.hasAction,\n      onHoverStart: props.onHoverStart,\n      onHoverChange: props.onHoverChange,\n      onHoverEnd: props.onHoverEnd\n    });\n\n    let {checkboxProps} = useTableSelectionCheckbox(\n      {key: item.key},\n      state\n    );\n\n    let draggableItem: DraggableItemResult | undefined = undefined;\n    if (dragState && dragAndDropHooks) {\n      draggableItem = dragAndDropHooks.useDraggableItem!({key: item.key, hasDragButton: true}, dragState);\n    }\n\n    let dropIndicator: DropIndicatorAria | undefined = undefined;\n    let dropIndicatorRef = useRef<HTMLDivElement>(null);\n    let {visuallyHiddenProps} = useVisuallyHidden();\n    if (dropState && dragAndDropHooks) {\n      dropIndicator = dragAndDropHooks.useDropIndicator!({\n        target: {type: 'item', key: item.key, dropPosition: 'on'}\n      }, dropState, dropIndicatorRef);\n    }\n\n    let dragButtonRef = useRef<HTMLButtonElement>(null);\n    useEffect(() => {\n      if (dragState && !dragButtonRef.current) {\n        console.warn('Draggable items in a Table must contain a <Button slot=\"drag\"> element so that keyboard and screen reader users can drag them.');\n      }\n    // eslint-disable-next-line\n    }, []);\n\n    let isDragging = dragState && dragState.isDragging(item.key);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let {children: _, ...restProps} = props;\n    let renderProps = useRenderProps({\n      ...restProps,\n      id: undefined,\n      defaultClassName: 'react-aria-Row',\n      values: {\n        ...states,\n        isHovered,\n        isFocused,\n        isFocusVisible,\n        selectionMode: state.selectionManager.selectionMode,\n        selectionBehavior: state.selectionManager.selectionBehavior,\n        isDragging,\n        isDropTarget: dropIndicator?.isDropTarget,\n        isFocusVisibleWithin\n      }\n    });\n\n    let TR = useElementType('tr');\n    let TD = useElementType('td');\n\n    return (\n      <>\n        {dropIndicator && !dropIndicator.isHidden && (\n          <TR role=\"row\" style={{height: 0}}>\n            <TD role=\"gridcell\" colSpan={state.collection.columnCount} style={{padding: 0}}>\n              <div role=\"button\" {...visuallyHiddenProps} {...dropIndicator.dropIndicatorProps} ref={dropIndicatorRef} />\n            </TD>\n          </TR>\n        )}\n        <TR\n          {...mergeProps(filterDOMProps(props as any), rowProps, focusProps, hoverProps, draggableItem?.dragProps, focusWithinProps)}\n          {...renderProps}\n          ref={ref}\n          data-disabled={states.isDisabled || undefined}\n          data-selected={states.isSelected || undefined}\n          data-hovered={isHovered || undefined}\n          data-focused={states.isFocused || undefined}\n          data-focus-visible={isFocusVisible || undefined}\n          data-pressed={states.isPressed || undefined}\n          data-dragging={isDragging || undefined}\n          data-drop-target={dropIndicator?.isDropTarget || undefined}\n          data-selection-mode={state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode}\n          data-focus-visible-within={isFocusVisibleWithin || undefined}>\n          <Provider\n            values={[\n              [CheckboxContext, {\n                slots: {\n                  selection: checkboxProps\n                }\n              }],\n              [ButtonContext, {\n                slots: {\n                  [DEFAULT_SLOT]: {},\n                  drag: {\n                    ...draggableItem?.dragButtonProps,\n                    ref: dragButtonRef,\n                    style: {\n                      pointerEvents: 'none'\n                    }\n                  }\n                }\n              }]\n            ]}>\n            <CollectionBranch collection={state.collection} parent={item} />\n          </Provider>\n        </TR>\n      </>\n    );\n  },\n  props => {\n    if (props.id == null && typeof props.children === 'function') {\n      console.warn('No id detected for the Row element. The Row element requires a id to be provided to it when the cells are rendered dynamically.');\n    }\n\n    let dependencies = [props.value].concat(props.dependencies);\n    return (\n      <Collection dependencies={dependencies} items={props.columns} idScope={props.id}>\n        {props.children}\n      </Collection>\n    );\n  }\n);\n\nexport interface CellRenderProps {\n  /**\n   * Whether the cell is currently in a pressed state.\n   * @selector [data-pressed]\n   */\n  isPressed: boolean,\n  /**\n   * Whether the cell is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the cell is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the cell is currently hovered with a mouse.\n   * @selector [data-hovered]\n   */\n  isHovered: boolean\n}\n\nexport interface CellProps extends RenderProps<CellRenderProps> {\n  /** The unique id of the cell. */\n  id?: Key,\n  /** A string representation of the cell's contents, used for features like typeahead. */\n  textValue?: string\n}\n\n/**\n * A cell within a table row.\n */\nexport const Cell = /*#__PURE__*/ createLeafComponent('cell', (props: CellProps, forwardedRef: ForwardedRef<HTMLTableCellElement>, cell: GridNode<unknown>) => {\n  let ref = useObjectRef<HTMLTableCellElement>(forwardedRef);\n  let state = useContext(TableStateContext)!;\n  let {dragState} = useContext(DragAndDropContext);\n  let {isVirtualized} = useContext(CollectionRendererContext);\n\n  // @ts-ignore\n  cell.column = state.collection.columns[cell.index];\n\n  let {gridCellProps, isPressed} = useTableCell({\n    node: cell,\n    shouldSelectOnPressUp: !!dragState,\n    isVirtualized\n  }, state, ref);\n  let {isFocused, isFocusVisible, focusProps} = useFocusRing();\n  let {hoverProps, isHovered} = useHover({});\n\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    defaultClassName: 'react-aria-Cell',\n    values: {\n      isFocused,\n      isFocusVisible,\n      isPressed,\n      isHovered\n    }\n  });\n\n  let TD = useElementType('td');\n\n  return (\n    <TD\n      {...mergeProps(filterDOMProps(props as any), gridCellProps, focusProps, hoverProps)}\n      {...renderProps}\n      ref={ref}\n      data-focused={isFocused || undefined}\n      data-focus-visible={isFocusVisible || undefined}\n      data-pressed={isPressed || undefined}>\n      <CollectionRendererContext.Provider value={DefaultCollectionRenderer}>\n        {renderProps.children}\n      </CollectionRendererContext.Provider>\n    </TD>\n  );\n});\n\nfunction TableDropIndicatorWrapper(props: DropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  ref = useObjectRef(ref);\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext)!;\n  let buttonRef = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps, isHidden, isDropTarget} = dragAndDropHooks!.useDropIndicator!(\n    props,\n    dropState!,\n    buttonRef\n  );\n\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <TableDropIndicatorForwardRef {...props} dropIndicatorProps={dropIndicatorProps} isDropTarget={isDropTarget} buttonRef={buttonRef} ref={ref} />\n  );\n}\n\ninterface TableDropIndicatorProps extends DropIndicatorProps {\n  dropIndicatorProps: React.HTMLAttributes<HTMLElement>,\n  isDropTarget: boolean,\n  buttonRef: RefObject<HTMLDivElement | null>\n}\n\nfunction TableDropIndicator(props: TableDropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  let {\n    dropIndicatorProps,\n    isDropTarget,\n    buttonRef,\n    ...otherProps\n  } = props;\n\n  let state = useContext(TableStateContext)!;\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  let renderProps = useRenderProps({\n    ...otherProps,\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget\n    }\n  });\n\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n\n  return (\n    <TR\n      {...filterDOMProps(props as any)}\n      {...renderProps}\n      role=\"row\"\n      ref={ref as RefObject<HTMLTableRowElement | null>}\n      data-drop-target={isDropTarget || undefined}>\n      <TD\n        role=\"gridcell\"\n        colSpan={state.collection.columnCount}\n        style={{padding: 0}}>\n        <div {...visuallyHiddenProps} role=\"button\" {...dropIndicatorProps} ref={buttonRef} />\n        {renderProps.children}\n      </TD>\n    </TR>\n  );\n}\n\nconst TableDropIndicatorForwardRef = forwardRef(TableDropIndicator);\n\nfunction RootDropIndicator() {\n  let state = useContext(TableStateContext)!;\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext);\n  let ref = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps} = dragAndDropHooks!.useDropIndicator!({\n    target: {type: 'root'}\n  }, dropState!, ref);\n  let isDropTarget = dropState!.isDropTarget({type: 'root'});\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n\n  if (!isDropTarget && dropIndicatorProps['aria-hidden']) {\n    return null;\n  }\n\n  return (\n    <TR\n      role=\"row\"\n      aria-hidden={dropIndicatorProps['aria-hidden']}\n      style={{height: 0}}>\n      <TD\n        role=\"gridcell\"\n        colSpan={state.collection.columnCount}\n        style={{padding: 0}}>\n        <div role=\"button\" {...visuallyHiddenProps} {...dropIndicatorProps} ref={ref} />\n      </TD>\n    </TR>\n  );\n}\n\nexport interface TableLoadingIndicatorProps extends StyleProps {\n  children?: ReactNode\n}\n\nexport const UNSTABLE_TableLoadingIndicator = createLeafComponent('loader', function TableLoadingIndicator<T extends object>(props: TableLoadingIndicatorProps, ref: ForwardedRef<HTMLTableRowElement>, item: Node<T>) {\n  let state = useContext(TableStateContext)!;\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  let numColumns = state.collection.columns.length;\n\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-TableLoadingIndicator',\n    values: null\n  });\n  let TR = useElementType('tr');\n  let TD = useElementType('td');\n  let rowProps = {};\n  let rowHeaderProps = {};\n  let style = {};\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = state.collection.headerRows.length + state.collection.size ;\n    rowHeaderProps['aria-colspan'] = numColumns;\n    style = {display: 'contents'};\n  } else {\n    rowHeaderProps['colSpan'] = numColumns;\n  }\n\n  return (\n    <>\n      <TR\n        role=\"row\"\n        ref={ref}\n        {...mergeProps(filterDOMProps(props as any), rowProps)}\n        {...renderProps}>\n        <TD role=\"rowheader\" {...rowHeaderProps} style={style}>\n          {renderProps.children}\n        </TD>\n      </TR>\n    </>\n  );\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}