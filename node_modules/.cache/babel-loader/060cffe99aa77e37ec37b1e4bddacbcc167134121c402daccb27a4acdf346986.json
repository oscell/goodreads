{"ast":null,"code":"import $ho3NY$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useGridListItem as $ho3NY$useGridListItem } from \"@react-aria/gridlist\";\nimport { isAndroid as $ho3NY$isAndroid } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $ho3NY$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $0cbbe9a595ac1615$export$8001083cb3f61028(props, state, ref) {\n  let {\n    node: node\n  } = props;\n  let gridListAria = (0, $ho3NY$useGridListItem)(props, state, ref);\n  let isExpanded = gridListAria.rowProps['aria-expanded'] === true;\n  let stringFormatter = (0, $ho3NY$useLocalizedStringFormatter)((0, $parcel$interopDefault($ho3NY$intlStringsmodulejs)), '@react-aria/tree');\n  let expandButtonProps = {\n    onPress: () => {\n      if (!gridListAria.isDisabled) {\n        state.toggleKey(node.key);\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(node.key);\n      }\n    },\n    'aria-label': isExpanded ? stringFormatter.format('collapse') : stringFormatter.format('expand'),\n    tabIndex: (0, $ho3NY$isAndroid)() ? -1 : null,\n    'data-react-aria-prevent-focus': true\n  };\n  // TODO: should it return a state specifically for isExpanded? Or is aria attribute sufficient?\n  return {\n    ...gridListAria,\n    expandButtonProps: expandButtonProps\n  };\n}\nexport { $0cbbe9a595ac1615$export$8001083cb3f61028 as useTreeGridListItem };","map":{"version":3,"names":["$0cbbe9a595ac1615$export$8001083cb3f61028","props","state","ref","node","gridListAria","$ho3NY$useGridListItem","isExpanded","rowProps","stringFormatter","$ho3NY$useLocalizedStringFormatter","$parcel$interopDefault","$ho3NY$intlStringsmodulejs","expandButtonProps","onPress","isDisabled","toggleKey","key","selectionManager","setFocused","setFocusedKey","format","tabIndex","$ho3NY$isAndroid"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/tree/dist/packages/@react-aria/tree/src/useTreeGridListItem.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaGridListItemOptions, GridListItemAria, useGridListItem} from '@react-aria/gridlist';\nimport {DOMAttributes, FocusableElement, Node, RefObject} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {isAndroid} from '@react-aria/utils';\nimport {TreeState} from '@react-stately/tree';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaTreeGridListItemOptions extends Omit<AriaGridListItemOptions, 'isVirtualized'> {\n  /** An object representing the treegrid item. Contains all the relevant information that makes up the treegrid row. */\n  node: Node<unknown>\n}\n\nexport interface TreeGridListItemAria extends GridListItemAria {\n  /** Props for the tree grid row element. */\n  rowProps: DOMAttributes,\n  /** Props for the tree grid cell element within the tree grid list row. */\n  gridCellProps: DOMAttributes,\n  /** Props for the tree grid row description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the tree grid row expand button. */\n  expandButtonProps: AriaButtonProps\n}\n\n/**\n * Provides the behavior and accessibility implementation for a row in a tree grid list.\n * @param props - Props for the row.\n * @param state - State of the parent list, as returned by `useTreeState`.\n * @param ref - The ref attached to the row element.\n */\nexport function useTreeGridListItem<T>(props: AriaTreeGridListItemOptions, state: TreeState<T>, ref: RefObject<FocusableElement | null>): TreeGridListItemAria {\n  let {node} = props;\n  let gridListAria = useGridListItem(props, state, ref);\n  let isExpanded = gridListAria.rowProps['aria-expanded'] === true;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/tree');\n\n  let expandButtonProps = {\n    onPress: () => {\n      if (!gridListAria.isDisabled) {\n        state.toggleKey(node.key);\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(node.key);\n      }\n    },\n    'aria-label': isExpanded ? stringFormatter.format('collapse') : stringFormatter.format('expand'),\n    tabIndex: isAndroid() ? -1 : null,\n    'data-react-aria-prevent-focus': true\n  };\n\n  // TODO: should it return a state specifically for isExpanded? Or is aria attribute sufficient?\n  return {\n    ...gridListAria,\n    expandButtonProps\n  };\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;AA2CO,SAASA,0CAAuBC,KAAkC,EAAEC,KAAmB,EAAEC,GAAuC;EACrI,IAAI;IAAAC,IAAA,EAACA;EAAI,CAAC,GAAGH,KAAA;EACb,IAAII,YAAA,GAAe,IAAAC,sBAAc,EAAEL,KAAA,EAAOC,KAAA,EAAOC,GAAA;EACjD,IAAII,UAAA,GAAaF,YAAA,CAAaG,QAAQ,CAAC,gBAAgB,KAAK;EAC5D,IAAIC,eAAA,GAAkB,IAAAC,kCAA0B,GAAE,GAAAC,sBAAA,CAAAC,0BAAA,CAAW,GAAG;EAEhE,IAAIC,iBAAA,GAAoB;IACtBC,OAAA,EAASA,CAAA;MACP,IAAI,CAACT,YAAA,CAAaU,UAAU,EAAE;QAC5Bb,KAAA,CAAMc,SAAS,CAACZ,IAAA,CAAKa,GAAG;QACxBf,KAAA,CAAMgB,gBAAgB,CAACC,UAAU,CAAC;QAClCjB,KAAA,CAAMgB,gBAAgB,CAACE,aAAa,CAAChB,IAAA,CAAKa,GAAG;MAC/C;IACF;IACA,cAAcV,UAAA,GAAaE,eAAA,CAAgBY,MAAM,CAAC,cAAcZ,eAAA,CAAgBY,MAAM,CAAC;IACvFC,QAAA,EAAU,IAAAC,gBAAQ,MAAM,KAAK;IAC7B,iCAAiC;EACnC;EAEA;EACA,OAAO;IACL,GAAGlB,YAAY;uBACfQ;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}