{"ast":null,"code":"import { calculateColumnSizes as $6818b1c4fc67028d$export$55d50dc687385491, getMaxWidth as $6818b1c4fc67028d$export$59185c62a7544aa0, getMinWidth as $6818b1c4fc67028d$export$f556054ce4358701 } from \"./TableUtils.mjs\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $a9e7ae544a4e41dd$export$7ff77a162970b30e {\n  /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */splitColumnsIntoControlledAndUncontrolled(columns) {\n    return columns.reduce((acc, col) => {\n      if (col.props.width != null) acc[0].set(col.key, col);else acc[1].set(col.key, col);\n      return acc;\n    }, [new Map(), new Map()]);\n  }\n  /** Takes uncontrolled and controlled widths and joins them into a single Map. */\n  recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {\n    return new Map(columns.map(col => {\n      if (uncontrolledColumns.has(col.key)) return [col.key, uncontrolledWidths.get(col.key)];else return [col.key, controlledColumns.get(col.key).props.width];\n    }));\n  }\n  /** Used to make an initial Map of the uncontrolled widths based on default widths. */\n  getInitialUncontrolledWidths(uncontrolledColumns) {\n    return new Map(Array.from(uncontrolledColumns).map(([key, col]) => {\n      var _this_getDefaultWidth, _this;\n      var _col_props_defaultWidth, _ref;\n      return [key, (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = this).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : '1fr'];\n    }));\n  }\n  getColumnWidth(key) {\n    var _this_columnWidths_get;\n    return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;\n  }\n  getColumnMinWidth(key) {\n    var _this_columnMinWidths_get;\n    return (_this_columnMinWidths_get = this.columnMinWidths.get(key)) !== null && _this_columnMinWidths_get !== void 0 ? _this_columnMinWidths_get : 0;\n  }\n  getColumnMaxWidth(key) {\n    var _this_columnMaxWidths_get;\n    return (_this_columnMaxWidths_get = this.columnMaxWidths.get(key)) !== null && _this_columnMaxWidths_get !== void 0 ? _this_columnMaxWidths_get : 0;\n  }\n  resizeColumnWidth(collection, uncontrolledWidths, col, width) {\n    let prevColumnWidths = this.columnWidths;\n    let freeze = true;\n    let newWidths = new Map();\n    width = Math.max(this.getColumnMinWidth(col), Math.min(this.getColumnMaxWidth(col), Math.floor(width)));\n    collection.columns.forEach(column => {\n      var _column_props_width;\n      if (column.key === col) {\n        newWidths.set(column.key, width);\n        freeze = false;\n      } else if (freeze)\n        // freeze columns to the left to their previous pixel value\n        newWidths.set(column.key, prevColumnWidths.get(column.key));else newWidths.set(column.key, (_column_props_width = column.props.width) !== null && _column_props_width !== void 0 ? _column_props_width : uncontrolledWidths.get(column.key));\n    });\n    return newWidths;\n  }\n  buildColumnWidths(tableWidth, collection, widths) {\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n    // initial layout or table/window resizing\n    let columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map(col => ({\n      ...col.props,\n      key: col.key\n    })), widths, i => this.getDefaultWidth(collection.columns[i]), i => this.getDefaultMinWidth(collection.columns[i]));\n    // columns going in will be the same order as the columns coming out\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      let column = collection.columns[index];\n      this.columnWidths.set(key, width);\n      var _column_props_minWidth;\n      this.columnMinWidths.set(key, (0, $6818b1c4fc67028d$export$f556054ce4358701)((_column_props_minWidth = column.props.minWidth) !== null && _column_props_minWidth !== void 0 ? _column_props_minWidth : this.getDefaultMinWidth(column), tableWidth));\n      this.columnMaxWidths.set(key, (0, $6818b1c4fc67028d$export$59185c62a7544aa0)(column.props.maxWidth, tableWidth));\n    });\n    return this.columnWidths;\n  }\n  constructor(options) {\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n    var _options_getDefaultWidth;\n    this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : () => '1fr';\n    var _options_getDefaultMinWidth;\n    this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : () => 75;\n  }\n}\nexport { $a9e7ae544a4e41dd$export$7ff77a162970b30e as TableColumnLayout };","map":{"version":3,"names":["$a9e7ae544a4e41dd$export$7ff77a162970b30e","splitColumnsIntoControlledAndUncontrolled","columns","reduce","acc","col","props","width","set","key","Map","recombineColumns","uncontrolledWidths","uncontrolledColumns","controlledColumns","map","has","get","getInitialUncontrolledWidths","Array","from","_this_getDefaultWidth","_this","_col_props_defaultWidth","_ref","defaultWidth","getDefaultWidth","call","getColumnWidth","_this_columnWidths_get","columnWidths","getColumnMinWidth","_this_columnMinWidths_get","columnMinWidths","getColumnMaxWidth","_this_columnMaxWidths_get","columnMaxWidths","resizeColumnWidth","collection","prevColumnWidths","freeze","newWidths","Math","max","min","floor","forEach","column","_column_props_width","buildColumnWidths","tableWidth","widths","$6818b1c4fc67028d$export$55d50dc687385491","i","getDefaultMinWidth","index","_column_props_minWidth","$6818b1c4fc67028d$export$f556054ce4358701","minWidth","$6818b1c4fc67028d$export$59185c62a7544aa0","maxWidth","constructor","options","_options_getDefaultWidth","_options_getDefaultMinWidth"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-stately/table/dist/packages/@react-stately/table/src/TableColumnLayout.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  calculateColumnSizes,\n  getMaxWidth,\n  getMinWidth\n} from './TableUtils';\nimport {ColumnSize, TableCollection} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\n\nexport interface TableColumnLayoutOptions<T> {\n  getDefaultWidth?: (column: GridNode<T>) => ColumnSize | null | undefined,\n  getDefaultMinWidth?: (column: GridNode<T>) => ColumnSize | null | undefined\n}\n\nexport class TableColumnLayout<T> {\n  getDefaultWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  getDefaultMinWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  columnWidths: Map<Key, number> = new Map();\n  columnMinWidths: Map<Key, number> = new Map();\n  columnMaxWidths: Map<Key, number> = new Map();\n\n  constructor(options: TableColumnLayoutOptions<T>) {\n    this.getDefaultWidth = options?.getDefaultWidth ?? (() => '1fr');\n    this.getDefaultMinWidth = options?.getDefaultMinWidth ?? (() => 75);\n  }\n\n  /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */\n  splitColumnsIntoControlledAndUncontrolled(columns: Array<GridNode<T>>): [Map<Key, GridNode<T>>, Map<Key, GridNode<T>>] {\n    return columns.reduce((acc, col) => {\n      if (col.props.width != null) {\n        acc[0].set(col.key, col);\n      } else {\n        acc[1].set(col.key, col);\n      }\n      return acc;\n    }, [new Map(), new Map()]);\n  }\n\n  /** Takes uncontrolled and controlled widths and joins them into a single Map. */\n  recombineColumns(columns: Array<GridNode<T>>, uncontrolledWidths: Map<Key, ColumnSize>, uncontrolledColumns: Map<Key, GridNode<T>>, controlledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(columns.map(col => {\n      if (uncontrolledColumns.has(col.key)) {\n        return [col.key, uncontrolledWidths.get(col.key)];\n      } else {\n        return [col.key, controlledColumns.get(col.key).props.width];\n      }\n    }));\n  }\n\n  /** Used to make an initial Map of the uncontrolled widths based on default widths. */\n  getInitialUncontrolledWidths(uncontrolledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(Array.from(uncontrolledColumns).map(([key, col]) =>\n      [key, col.props.defaultWidth ?? this.getDefaultWidth?.(col) ?? '1fr']\n    ));\n  }\n\n  getColumnWidth(key: Key): number {\n    return this.columnWidths.get(key) ?? 0;\n  }\n\n  getColumnMinWidth(key: Key): number {\n    return this.columnMinWidths.get(key) ?? 0;\n  }\n\n  getColumnMaxWidth(key: Key): number {\n    return this.columnMaxWidths.get(key) ?? 0;\n  }\n\n  resizeColumnWidth(collection: TableCollection<T>, uncontrolledWidths: Map<Key, ColumnSize>, col: Key, width: number): Map<Key, ColumnSize> {\n    let prevColumnWidths = this.columnWidths;\n    let freeze = true;\n    let newWidths = new Map<Key, ColumnSize>();\n\n    width = Math.max(this.getColumnMinWidth(col), Math.min(this.getColumnMaxWidth(col), Math.floor(width)));\n\n    collection.columns.forEach(column => {\n      if (column.key === col) {\n        newWidths.set(column.key, width);\n        freeze = false;\n      } else if (freeze) {\n        // freeze columns to the left to their previous pixel value\n        newWidths.set(column.key, prevColumnWidths.get(column.key));\n      } else {\n        newWidths.set(column.key, column.props.width ?? uncontrolledWidths.get(column.key));\n      }\n    });\n\n    return newWidths;\n  }\n\n  buildColumnWidths(tableWidth: number, collection: TableCollection<T>, widths: Map<Key, ColumnSize>) {\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n\n    // initial layout or table/window resizing\n    let columnWidths = calculateColumnSizes(\n      tableWidth,\n      collection.columns.map(col => ({...col.props, key: col.key})),\n      widths,\n      (i) => this.getDefaultWidth(collection.columns[i]),\n      (i) => this.getDefaultMinWidth(collection.columns[i])\n    );\n\n    // columns going in will be the same order as the columns coming out\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      let column = collection.columns[index];\n      this.columnWidths.set(key, width);\n      this.columnMinWidths.set(key, getMinWidth(column.props.minWidth ?? this.getDefaultMinWidth(column), tableWidth));\n      this.columnMaxWidths.set(key, getMaxWidth(column.props.maxWidth, tableWidth));\n    });\n    return this.columnWidths;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}