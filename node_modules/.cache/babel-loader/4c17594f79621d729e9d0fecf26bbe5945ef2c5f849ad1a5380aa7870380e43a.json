{"ast":null,"code":"import { TextFieldBase as $599adb75312e6492$export$d22444a338b6e3c2 } from \"./TextFieldBase.mjs\";\nimport { useLayoutEffect as $hi3T0$useLayoutEffect, chain as $hi3T0$chain } from \"@react-aria/utils\";\nimport $hi3T0$react, { useRef as $hi3T0$useRef, useCallback as $hi3T0$useCallback } from \"react\";\nimport { useControlledState as $hi3T0$useControlledState } from \"@react-stately/utils\";\nimport { useFormProps as $hi3T0$useFormProps } from \"@react-spectrum/form\";\nimport { useProviderProps as $hi3T0$useProviderProps } from \"@react-spectrum/provider\";\nimport { useTextField as $hi3T0$useTextField } from \"@react-aria/textfield\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $cc187bf91f8eea73$var$TextArea(props, ref) {\n  props = (0, $hi3T0$useProviderProps)(props);\n  props = (0, $hi3T0$useFormProps)(props);\n  let {\n    isDisabled = false,\n    isQuiet = false,\n    isReadOnly = false,\n    isRequired = false,\n    onChange: onChange,\n    ...otherProps\n  } = props;\n  var _props_defaultValue;\n  // not in stately because this is so we know when to re-measure, which is a spectrum design\n  let [inputValue, setInputValue] = (0, $hi3T0$useControlledState)(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : '', () => {});\n  let inputRef = (0, $hi3T0$useRef)(null);\n  let onHeightChange = (0, $hi3T0$useCallback)(() => {\n    // Quiet textareas always grow based on their text content.\n    // Standard textareas also grow by default, unless an explicit height is set.\n    if ((isQuiet || !props.height) && inputRef.current) {\n      let input = inputRef.current;\n      let prevAlignment = input.style.alignSelf;\n      let prevOverflow = input.style.overflow;\n      // Firefox scroll position is lost when overflow: 'hidden' is applied so we skip applying it.\n      // The measure/applied height is also incorrect/reset if we turn on and off\n      // overflow: hidden in Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1787062\n      let isFirefox = 'MozAppearance' in input.style;\n      if (!isFirefox) input.style.overflow = 'hidden';\n      input.style.alignSelf = 'start';\n      input.style.height = 'auto';\n      // offsetHeight - clientHeight accounts for the border/padding.\n      input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;\n      input.style.overflow = prevOverflow;\n      input.style.alignSelf = prevAlignment;\n    }\n  }, [isQuiet, inputRef, props.height]);\n  (0, $hi3T0$useLayoutEffect)(() => {\n    if (inputRef.current) onHeightChange();\n  }, [onHeightChange, inputValue, inputRef]);\n  if (props.placeholder) console.warn('Placeholders are deprecated due to accessibility issues. Please use help text instead. See the docs for details: https://react-spectrum.adobe.com/react-spectrum/TextArea.html#help-text');\n  let result = (0, $hi3T0$useTextField)({\n    ...props,\n    onChange: (0, $hi3T0$chain)(onChange, setInputValue),\n    inputElementType: 'textarea'\n  }, inputRef);\n  return /*#__PURE__*/(0, $hi3T0$react).createElement((0, $599adb75312e6492$export$d22444a338b6e3c2), {\n    ...otherProps,\n    ref: ref,\n    inputRef: inputRef,\n    ...result,\n    multiLine: true,\n    isDisabled: isDisabled,\n    isQuiet: isQuiet,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired\n  });\n}\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\nlet $cc187bf91f8eea73$export$f5c9f3c2c4054eec = /*#__PURE__*/(0, $hi3T0$react).forwardRef($cc187bf91f8eea73$var$TextArea);\nexport { $cc187bf91f8eea73$export$f5c9f3c2c4054eec as TextArea };","map":{"version":3,"names":["$cc187bf91f8eea73$var$TextArea","props","ref","$hi3T0$useProviderProps","$hi3T0$useFormProps","isDisabled","isQuiet","isReadOnly","isRequired","onChange","otherProps","_props_defaultValue","inputValue","setInputValue","$hi3T0$useControlledState","value","defaultValue","inputRef","$hi3T0$useRef","onHeightChange","$hi3T0$useCallback","height","current","input","prevAlignment","style","alignSelf","prevOverflow","overflow","isFirefox","scrollHeight","offsetHeight","clientHeight","$hi3T0$useLayoutEffect","placeholder","console","warn","result","$hi3T0$useTextField","$hi3T0$chain","inputElementType","$hi3T0$react","createElement","$599adb75312e6492$export$d22444a338b6e3c2","multiLine","$cc187bf91f8eea73$export$f5c9f3c2c4054eec","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/textfield/dist/packages/@react-spectrum/textfield/src/TextArea.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, useLayoutEffect} from '@react-aria/utils';\nimport React, {Ref, useCallback, useRef} from 'react';\nimport {SpectrumTextAreaProps, TextFieldRef} from '@react-types/textfield';\nimport {TextFieldBase} from './TextFieldBase';\nimport {useControlledState} from '@react-stately/utils';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useTextField} from '@react-aria/textfield';\n\nfunction TextArea(props: SpectrumTextAreaProps, ref: Ref<TextFieldRef<HTMLTextAreaElement>>) {\n  props = useProviderProps(props);\n  props = useFormProps(props);\n  let {\n    isDisabled = false,\n    isQuiet = false,\n    isReadOnly = false,\n    isRequired = false,\n    onChange,\n    ...otherProps\n  } = props;\n\n  // not in stately because this is so we know when to re-measure, which is a spectrum design\n  let [inputValue, setInputValue] = useControlledState(props.value, props.defaultValue ?? '', () => {});\n  let inputRef = useRef<HTMLTextAreaElement>(null);\n\n  let onHeightChange = useCallback(() => {\n    // Quiet textareas always grow based on their text content.\n    // Standard textareas also grow by default, unless an explicit height is set.\n    if ((isQuiet || !props.height) && inputRef.current) {\n      let input = inputRef.current;\n      let prevAlignment = input.style.alignSelf;\n      let prevOverflow = input.style.overflow;\n      // Firefox scroll position is lost when overflow: 'hidden' is applied so we skip applying it.\n      // The measure/applied height is also incorrect/reset if we turn on and off\n      // overflow: hidden in Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1787062\n      let isFirefox = 'MozAppearance' in input.style;\n      if (!isFirefox) {\n        input.style.overflow = 'hidden';\n      }\n      input.style.alignSelf = 'start';\n      input.style.height = 'auto';\n      // offsetHeight - clientHeight accounts for the border/padding.\n      input.style.height = `${input.scrollHeight + (input.offsetHeight - input.clientHeight)}px`;\n      input.style.overflow = prevOverflow;\n      input.style.alignSelf = prevAlignment;\n    }\n  }, [isQuiet, inputRef, props.height]);\n\n  useLayoutEffect(() => {\n    if (inputRef.current) {\n      onHeightChange();\n    }\n  }, [onHeightChange, inputValue, inputRef]);\n\n  if (props.placeholder) {\n    console.warn('Placeholders are deprecated due to accessibility issues. Please use help text instead. See the docs for details: https://react-spectrum.adobe.com/react-spectrum/TextArea.html#help-text');\n  }\n\n  let result = useTextField({\n    ...props,\n    onChange: chain(onChange, setInputValue),\n    inputElementType: 'textarea'\n  }, inputRef);\n\n  return (\n    <TextFieldBase\n      {...otherProps}\n      ref={ref}\n      inputRef={inputRef}\n      {...result}\n      multiLine\n      isDisabled={isDisabled}\n      isQuiet={isQuiet}\n      isReadOnly={isReadOnly}\n      isRequired={isRequired} />\n  );\n}\n\n/**\n * TextAreas are multiline text inputs, useful for cases where users have\n * a sizable amount of text to enter. They allow for all customizations that\n * are available to text fields.\n */\nlet _TextArea = React.forwardRef(TextArea);\nexport {_TextArea as TextArea};\n"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AAqBA,SAASA,+BAASC,KAA4B,EAAEC,GAA2C;EACzFD,KAAA,GAAQ,IAAAE,uBAAe,EAAEF,KAAA;EACzBA,KAAA,GAAQ,IAAAG,mBAAW,EAAEH,KAAA;EACrB,IAAI;IACFI,UAAA,GAAa;IACbC,OAAA,GAAU;IACVC,UAAA,GAAa;IACbC,UAAA,GAAa;IAAAC,QAAA,EACbA,QAAQ;IACR,GAAGC;EAAA,CACJ,GAAGT,KAAA;MAG8DU,mBAAA;EADlE;EACA,IAAI,CAACC,UAAA,EAAYC,aAAA,CAAc,GAAG,IAAAC,yBAAiB,EAAEb,KAAA,CAAMc,KAAK,EAAE,CAAAJ,mBAAA,GAAAV,KAAA,CAAMe,YAAY,cAAlBL,mBAAA,cAAAA,mBAAA,GAAsB,IAAI,OAAO;EACnG,IAAIM,QAAA,GAAW,IAAAC,aAAK,EAAuB;EAE3C,IAAIC,cAAA,GAAiB,IAAAC,kBAAU,EAAE;IAC/B;IACA;IACA,IAAI,CAACd,OAAA,IAAW,CAACL,KAAA,CAAMoB,MAAM,KAAKJ,QAAA,CAASK,OAAO,EAAE;MAClD,IAAIC,KAAA,GAAQN,QAAA,CAASK,OAAO;MAC5B,IAAIE,aAAA,GAAgBD,KAAA,CAAME,KAAK,CAACC,SAAS;MACzC,IAAIC,YAAA,GAAeJ,KAAA,CAAME,KAAK,CAACG,QAAQ;MACvC;MACA;MACA;MACA,IAAIC,SAAA,GAAY,mBAAmBN,KAAA,CAAME,KAAK;MAC9C,IAAI,CAACI,SAAA,EACHN,KAAA,CAAME,KAAK,CAACG,QAAQ,GAAG;MAEzBL,KAAA,CAAME,KAAK,CAACC,SAAS,GAAG;MACxBH,KAAA,CAAME,KAAK,CAACJ,MAAM,GAAG;MACrB;MACAE,KAAA,CAAME,KAAK,CAACJ,MAAM,GAAG,GAAGE,KAAA,CAAMO,YAAY,IAAIP,KAAA,CAAMQ,YAAY,GAAGR,KAAA,CAAMS,YAAY,CAAD,IAAM;MAC1FT,KAAA,CAAME,KAAK,CAACG,QAAQ,GAAGD,YAAA;MACvBJ,KAAA,CAAME,KAAK,CAACC,SAAS,GAAGF,aAAA;IAC1B;EACF,GAAG,CAAClB,OAAA,EAASW,QAAA,EAAUhB,KAAA,CAAMoB,MAAM,CAAC;EAEpC,IAAAY,sBAAc,EAAE;IACd,IAAIhB,QAAA,CAASK,OAAO,EAClBH,cAAA;EAEJ,GAAG,CAACA,cAAA,EAAgBP,UAAA,EAAYK,QAAA,CAAS;EAEzC,IAAIhB,KAAA,CAAMiC,WAAW,EACnBC,OAAA,CAAQC,IAAI,CAAC;EAGf,IAAIC,MAAA,GAAS,IAAAC,mBAAW,EAAE;IACxB,GAAGrC,KAAK;IACRQ,QAAA,EAAU,IAAA8B,YAAI,EAAE9B,QAAA,EAAUI,aAAA;IAC1B2B,gBAAA,EAAkB;EACpB,GAAGvB,QAAA;EAEH,oBACE,IAAAwB,YAAA,EAAAC,aAAA,EAAC,GAAAC,yCAAY;IACV,GAAGjC,UAAU;IACdR,GAAA,EAAKA,GAAA;IACLe,QAAA,EAAUA,QAAA;IACT,GAAGoB,MAAM;IACVO,SAAA;IACAvC,UAAA,EAAYA,UAAA;IACZC,OAAA,EAASA,OAAA;IACTC,UAAA,EAAYA,UAAA;IACZC,UAAA,EAAYA;;AAElB;AAEA;;;;;AAKA,IAAIqC,yCAAA,gBAAY,IAAAJ,YAAI,EAAEK,UAAU,CAAC9C,8BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}