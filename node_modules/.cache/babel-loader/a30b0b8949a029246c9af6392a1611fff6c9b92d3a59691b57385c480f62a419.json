{"ast":null,"code":"import { TableViewBase as $bd013581c0a4b065$export$517e02184d273d69 } from \"./TableViewBase.mjs\";\nimport $9W9sm$react, { useState as $9W9sm$useState } from \"react\";\nimport { useTableState as $9W9sm$useTableState } from \"@react-stately/table\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d14697b14e638114$var$TableView(props, ref) {\n  let {\n    selectionStyle: selectionStyle,\n    dragAndDropHooks: dragAndDropHooks\n  } = props;\n  let [showSelectionCheckboxes, setShowSelectionCheckboxes] = (0, $9W9sm$useState)(selectionStyle !== 'highlight');\n  let isTableDraggable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);\n  let state = (0, $9W9sm$useTableState)({\n    ...props,\n    showSelectionCheckboxes: showSelectionCheckboxes,\n    showDragButtons: isTableDraggable,\n    selectionBehavior: props.selectionStyle === 'highlight' ? 'replace' : 'toggle'\n  });\n  // If the selection behavior changes in state, we need to update showSelectionCheckboxes here due to the circular dependency...\n  let shouldShowCheckboxes = state.selectionManager.selectionBehavior !== 'replace';\n  if (shouldShowCheckboxes !== showSelectionCheckboxes) setShowSelectionCheckboxes(shouldShowCheckboxes);\n  return /*#__PURE__*/(0, $9W9sm$react).createElement((0, $bd013581c0a4b065$export$517e02184d273d69), {\n    ...props,\n    state: state,\n    ref: ref\n  });\n}\nconst $d14697b14e638114$export$b3c27e869d856b7 = /*#__PURE__*/(0, $9W9sm$react).forwardRef($d14697b14e638114$var$TableView);\nexport { $d14697b14e638114$export$b3c27e869d856b7 as TableView };","map":{"version":3,"names":["$d14697b14e638114$var$TableView","props","ref","selectionStyle","dragAndDropHooks","showSelectionCheckboxes","setShowSelectionCheckboxes","$9W9sm$useState","isTableDraggable","useDraggableCollectionState","state","$9W9sm$useTableState","showDragButtons","selectionBehavior","shouldShowCheckboxes","selectionManager","$9W9sm$react","createElement","$bd013581c0a4b065$export$517e02184d273d69","$d14697b14e638114$export$b3c27e869d856b7","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/table/dist/packages/@react-spectrum/table/src/TableView.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMRef} from '@react-types/shared';\nimport React, {ReactElement, useState} from 'react';\nimport {SpectrumTableProps} from './TableViewWrapper';\nimport {TableViewBase} from './TableViewBase';\nimport {useTableState} from '@react-stately/table';\n\ninterface TableProps<T> extends Omit<SpectrumTableProps<T>, 'UNSTABLE_allowsExpandableRows'> {}\n\nfunction TableView<T extends object>(props: TableProps<T>, ref: DOMRef<HTMLDivElement>) {\n  let {\n    selectionStyle,\n    dragAndDropHooks\n  } = props;\n  let [showSelectionCheckboxes, setShowSelectionCheckboxes] = useState(selectionStyle !== 'highlight');\n  let isTableDraggable = !!dragAndDropHooks?.useDraggableCollectionState;\n  let state = useTableState({\n    ...props,\n    showSelectionCheckboxes,\n    showDragButtons: isTableDraggable,\n    selectionBehavior: props.selectionStyle === 'highlight' ? 'replace' : 'toggle'\n  });\n\n  // If the selection behavior changes in state, we need to update showSelectionCheckboxes here due to the circular dependency...\n  let shouldShowCheckboxes = state.selectionManager.selectionBehavior !== 'replace';\n  if (shouldShowCheckboxes !== showSelectionCheckboxes) {\n    setShowSelectionCheckboxes(shouldShowCheckboxes);\n  }\n\n  return (\n    <TableViewBase {...props} state={state} ref={ref} />\n  );\n}\n\nconst _TableView = React.forwardRef(TableView) as <T>(props: TableProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_TableView as TableView};\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AAoBA,SAASA,gCAA4BC,KAAoB,EAAEC,GAA2B;EACpF,IAAI;IAAAC,cAAA,EACFA,cAAc;IAAAC,gBAAA,EACdA;EAAgB,CACjB,GAAGH,KAAA;EACJ,IAAI,CAACI,uBAAA,EAAyBC,0BAAA,CAA2B,GAAG,IAAAC,eAAO,EAAEJ,cAAA,KAAmB;EACxF,IAAIK,gBAAA,GAAmB,CAAC,EAACJ,gBAAA,aAAAA,gBAAA,uBAAAA,gBAAA,CAAkBK,2BAA2B;EACtE,IAAIC,KAAA,GAAQ,IAAAC,oBAAY,EAAE;IACxB,GAAGV,KAAK;6BACRI,uBAAA;IACAO,eAAA,EAAiBJ,gBAAA;IACjBK,iBAAA,EAAmBZ,KAAA,CAAME,cAAc,KAAK,cAAc,YAAY;EACxE;EAEA;EACA,IAAIW,oBAAA,GAAuBJ,KAAA,CAAMK,gBAAgB,CAACF,iBAAiB,KAAK;EACxE,IAAIC,oBAAA,KAAyBT,uBAAA,EAC3BC,0BAAA,CAA2BQ,oBAAA;EAG7B,oBACE,IAAAE,YAAA,EAAAC,aAAA,EAAC,GAAAC,yCAAY;IAAG,GAAGjB,KAAK;IAAES,KAAA,EAAOA,KAAA;IAAOR,GAAA,EAAKA;;AAEjD;AAEA,MAAMiB,wCAAA,gBAAa,IAAAH,YAAI,EAAEI,UAAU,CAACpB,+BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}