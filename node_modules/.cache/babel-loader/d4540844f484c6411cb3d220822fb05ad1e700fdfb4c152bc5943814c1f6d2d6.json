{"ast":null,"code":"import \"./vars.06803e48.css\";\nimport $264pK$textfield_vars_cssmodulejs from \"./textfield_vars_css.mjs\";\nimport $264pK$spectrumiconsuiAlertMedium from \"@spectrum-icons/ui/AlertMedium\";\nimport $264pK$spectrumiconsuiCheckmarkMedium from \"@spectrum-icons/ui/CheckmarkMedium\";\nimport { createFocusableRef as $264pK$createFocusableRef, classNames as $264pK$classNames } from \"@react-spectrum/utils\";\nimport { Field as $264pK$Field } from \"@react-spectrum/label\";\nimport { mergeProps as $264pK$mergeProps } from \"@react-aria/utils\";\nimport $264pK$react, { useRef as $264pK$useRef, useImperativeHandle as $264pK$useImperativeHandle, cloneElement as $264pK$cloneElement, forwardRef as $264pK$forwardRef } from \"react\";\nimport { useFocusRing as $264pK$useFocusRing } from \"@react-aria/focus\";\nimport { useHover as $264pK$useHover } from \"@react-aria/interactions\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $599adb75312e6492$var$TextFieldBase(props, ref) {\n  let {\n    validationState = props.isInvalid ? 'invalid' : null,\n    icon: icon,\n    isQuiet = false,\n    isDisabled: isDisabled,\n    multiLine: multiLine,\n    autoFocus: autoFocus,\n    inputClassName: inputClassName,\n    wrapperChildren: wrapperChildren,\n    labelProps: labelProps,\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    inputRef: userInputRef,\n    isLoading: isLoading,\n    loadingIndicator: loadingIndicator,\n    validationIconClassName: validationIconClassName,\n    disableFocusRing: disableFocusRing\n  } = props;\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $264pK$useHover)({\n    isDisabled: isDisabled\n  });\n  let domRef = (0, $264pK$useRef)(null);\n  let defaultInputRef = (0, $264pK$useRef)(null);\n  let inputRef = userInputRef || defaultInputRef;\n  // Expose imperative interface for ref\n  (0, $264pK$useImperativeHandle)(ref, () => ({\n    ...(0, $264pK$createFocusableRef)(domRef, inputRef),\n    select() {\n      if (inputRef.current) inputRef.current.select();\n    },\n    getInputElement() {\n      return inputRef.current;\n    }\n  }));\n  let ElementType = multiLine ? 'textarea' : 'input';\n  let isInvalid = validationState === 'invalid' && !isDisabled;\n  if (icon) {\n    let UNSAFE_className = (0, $264pK$classNames)((0, $parcel$interopDefault($264pK$textfield_vars_cssmodulejs)), icon.props && icon.props.UNSAFE_className, 'spectrum-Textfield-icon');\n    icon = /*#__PURE__*/(0, $264pK$cloneElement)(icon, {\n      UNSAFE_className: UNSAFE_className,\n      size: 'S'\n    });\n  }\n  let validationIcon = isInvalid ? /*#__PURE__*/(0, $264pK$react).createElement((0, $264pK$spectrumiconsuiAlertMedium), null) : /*#__PURE__*/(0, $264pK$react).createElement((0, $264pK$spectrumiconsuiCheckmarkMedium), null);\n  let validation = /*#__PURE__*/(0, $264pK$cloneElement)(validationIcon, {\n    UNSAFE_className: (0, $264pK$classNames)((0, $parcel$interopDefault($264pK$textfield_vars_cssmodulejs)), 'spectrum-Textfield-validationIcon', validationIconClassName)\n  });\n  let {\n    focusProps: focusProps,\n    isFocusVisible: isFocusVisible\n  } = (0, $264pK$useFocusRing)({\n    isTextInput: true,\n    autoFocus: autoFocus\n  });\n  let textField = /*#__PURE__*/(0, $264pK$react).createElement(\"div\", {\n    className: (0, $264pK$classNames)((0, $parcel$interopDefault($264pK$textfield_vars_cssmodulejs)), 'spectrum-Textfield', {\n      'spectrum-Textfield--invalid': isInvalid,\n      'spectrum-Textfield--valid': validationState === 'valid' && !isDisabled,\n      'spectrum-Textfield--loadable': loadingIndicator,\n      'spectrum-Textfield--quiet': isQuiet,\n      'spectrum-Textfield--multiline': multiLine,\n      'focus-ring': !disableFocusRing && isFocusVisible\n    })\n  }, /*#__PURE__*/(0, $264pK$react).createElement(ElementType, {\n    ...(0, $264pK$mergeProps)(inputProps, hoverProps, focusProps),\n    ref: inputRef,\n    rows: multiLine ? 1 : undefined,\n    className: (0, $264pK$classNames)((0, $parcel$interopDefault($264pK$textfield_vars_cssmodulejs)), 'spectrum-Textfield-input', {\n      'spectrum-Textfield-inputIcon': icon,\n      'is-hovered': isHovered\n    }, inputClassName)\n  }), icon, validationState && !isLoading && !isDisabled ? validation : null, isLoading && loadingIndicator, wrapperChildren);\n  return /*#__PURE__*/(0, $264pK$react).createElement((0, $264pK$Field), {\n    ...props,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    wrapperClassName: (0, $264pK$classNames)((0, $parcel$interopDefault($264pK$textfield_vars_cssmodulejs)), 'spectrum-Textfield-wrapper', {\n      'spectrum-Textfield-wrapper--quiet': isQuiet\n    }),\n    showErrorIcon: false,\n    ref: domRef\n  }, textField);\n}\nconst $599adb75312e6492$export$d22444a338b6e3c2 = /*#__PURE__*/(0, $264pK$forwardRef)($599adb75312e6492$var$TextFieldBase);\nexport { $599adb75312e6492$export$d22444a338b6e3c2 as TextFieldBase };","map":{"version":3,"names":["$599adb75312e6492$var$TextFieldBase","props","ref","validationState","isInvalid","icon","isQuiet","isDisabled","multiLine","autoFocus","inputClassName","wrapperChildren","labelProps","inputProps","descriptionProps","errorMessageProps","inputRef","userInputRef","isLoading","loadingIndicator","validationIconClassName","disableFocusRing","hoverProps","isHovered","$264pK$useHover","domRef","$264pK$useRef","defaultInputRef","$264pK$useImperativeHandle","$264pK$createFocusableRef","select","current","getInputElement","ElementType","UNSAFE_className","$264pK$classNames","$parcel$interopDefault","$264pK$textfield_vars_cssmodulejs","$264pK$cloneElement","size","validationIcon","$264pK$react","createElement","$264pK$spectrumiconsuiAlertMedium","$264pK$spectrumiconsuiCheckmarkMedium","validation","focusProps","isFocusVisible","$264pK$useFocusRing","isTextInput","textField","className","$264pK$mergeProps","rows","undefined","$264pK$Field","wrapperClassName","showErrorIcon","$599adb75312e6492$export$d22444a338b6e3c2","$264pK$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/textfield/dist/packages/@react-spectrum/textfield/src/TextFieldBase.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertMedium from '@spectrum-icons/ui/AlertMedium';\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport {classNames, createFocusableRef} from '@react-spectrum/utils';\nimport {Field} from '@react-spectrum/label';\nimport {mergeProps} from '@react-aria/utils';\nimport {PressEvents, RefObject, ValidationResult} from '@react-types/shared';\nimport React, {cloneElement, forwardRef, HTMLAttributes, InputHTMLAttributes, LabelHTMLAttributes, ReactElement, Ref, TextareaHTMLAttributes, useImperativeHandle, useRef} from 'react';\nimport {SpectrumTextFieldProps, TextFieldRef} from '@react-types/textfield';\nimport styles from '@adobe/spectrum-css-temp/components/textfield/vars.css';\nimport {useFocusRing} from '@react-aria/focus';\nimport {useHover} from '@react-aria/interactions';\n\ninterface TextFieldBaseProps extends Omit<SpectrumTextFieldProps, 'onChange' | 'validate'>, PressEvents, Partial<ValidationResult> {\n  wrapperChildren?: ReactElement | ReactElement[],\n  inputClassName?: string,\n  validationIconClassName?: string,\n  multiLine?: boolean,\n  labelProps?: LabelHTMLAttributes<HTMLLabelElement>,\n  inputProps: InputHTMLAttributes<HTMLInputElement> | TextareaHTMLAttributes<HTMLTextAreaElement>,\n  descriptionProps?: HTMLAttributes<HTMLElement>,\n  errorMessageProps?: HTMLAttributes<HTMLElement>,\n  inputRef?: RefObject<HTMLInputElement | HTMLTextAreaElement | null>,\n  loadingIndicator?: ReactElement,\n  isLoading?: boolean,\n  disableFocusRing?: boolean\n}\n\nfunction TextFieldBase(props: TextFieldBaseProps, ref: Ref<TextFieldRef<HTMLInputElement | HTMLTextAreaElement>>) {\n  let {\n    validationState = props.isInvalid ? 'invalid' : null,\n    icon,\n    isQuiet = false,\n    isDisabled,\n    multiLine,\n    autoFocus,\n    inputClassName,\n    wrapperChildren,\n    labelProps,\n    inputProps,\n    descriptionProps,\n    errorMessageProps,\n    inputRef: userInputRef,\n    isLoading,\n    loadingIndicator,\n    validationIconClassName,\n    disableFocusRing\n  } = props;\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let domRef = useRef<HTMLDivElement>(null);\n  let defaultInputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null);\n  let inputRef = userInputRef || defaultInputRef;\n\n  // Expose imperative interface for ref\n  useImperativeHandle(ref, () => ({\n    ...createFocusableRef(domRef, inputRef),\n    select() {\n      if (inputRef.current) {\n        inputRef.current.select();\n      }\n    },\n    getInputElement() {\n      return inputRef.current;\n    }\n  }));\n\n  let ElementType: React.ElementType = multiLine ? 'textarea' : 'input';\n  let isInvalid = validationState === 'invalid' && !isDisabled;\n\n  if (icon) {\n    let UNSAFE_className = classNames(\n      styles,\n      icon.props && (icon.props as any).UNSAFE_className,\n      'spectrum-Textfield-icon'\n    );\n\n    icon = cloneElement(icon, {\n      UNSAFE_className,\n      size: 'S'\n    } as any);\n  }\n\n  let validationIcon = isInvalid ? <AlertMedium /> : <CheckmarkMedium />;\n  let validation = cloneElement(validationIcon, {\n    UNSAFE_className: classNames(\n      styles,\n      'spectrum-Textfield-validationIcon',\n      validationIconClassName\n    )\n  });\n\n  let {focusProps, isFocusVisible} = useFocusRing({\n    isTextInput: true,\n    autoFocus\n  });\n\n  let textField = (\n    <div\n      className={\n        classNames(\n          styles,\n          'spectrum-Textfield',\n          {\n            'spectrum-Textfield--invalid': isInvalid,\n            'spectrum-Textfield--valid': validationState === 'valid' && !isDisabled,\n            'spectrum-Textfield--loadable': loadingIndicator,\n            'spectrum-Textfield--quiet': isQuiet,\n            'spectrum-Textfield--multiline': multiLine,\n            'focus-ring': !disableFocusRing && isFocusVisible\n          }\n        )\n      }>\n      <ElementType\n        {...mergeProps(inputProps, hoverProps, focusProps)}\n        ref={inputRef as any}\n        rows={multiLine ? 1 : undefined}\n        className={\n          classNames(\n            styles,\n            'spectrum-Textfield-input',\n            {\n              'spectrum-Textfield-inputIcon': icon,\n              'is-hovered': isHovered\n            },\n            inputClassName\n          )\n        } />\n      {icon}\n      {validationState && !isLoading && !isDisabled ? validation : null}\n      {isLoading && loadingIndicator}\n      {wrapperChildren}\n    </div>\n  );\n\n  return (\n    <Field\n      {...props}\n      labelProps={labelProps}\n      descriptionProps={descriptionProps}\n      errorMessageProps={errorMessageProps}\n      wrapperClassName={\n        classNames(\n          styles,\n          'spectrum-Textfield-wrapper',\n          {\n            'spectrum-Textfield-wrapper--quiet': isQuiet\n          }\n        )\n      }\n      showErrorIcon={false}\n      ref={domRef}>\n      {textField}\n    </Field>\n  );\n}\n\nconst _TextFieldBase = forwardRef(TextFieldBase);\nexport {_TextFieldBase as TextFieldBase};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}