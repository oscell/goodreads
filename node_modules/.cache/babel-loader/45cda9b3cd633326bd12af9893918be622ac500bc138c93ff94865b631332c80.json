{"ast":null,"code":"import { useControlledState as $j4gLc$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $j4gLc$useMemo, useEffect as $j4gLc$useEffect } from \"react\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $9385b3affbdec831$export$f36461af0ef4707d(props) {\n  let {\n    allowsMultipleExpanded = false,\n    isDisabled = false\n  } = props;\n  let [expandedKeys, setExpandedKeys] = (0, $j4gLc$useControlledState)((0, $j4gLc$useMemo)(() => props.expandedKeys ? new Set(props.expandedKeys) : undefined, [props.expandedKeys]), (0, $j4gLc$useMemo)(() => props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), [props.defaultExpandedKeys]), props.onExpandedChange);\n  (0, $j4gLc$useEffect)(() => {\n    // Ensure only one item is expanded if allowsMultipleExpanded is false.\n    if (!allowsMultipleExpanded && expandedKeys.size > 1) setExpandedKeys(new Set([expandedKeys.values().next().value]));\n  });\n  return {\n    allowsMultipleExpanded: allowsMultipleExpanded,\n    isDisabled: isDisabled,\n    expandedKeys: expandedKeys,\n    setExpandedKeys: setExpandedKeys,\n    toggleKey(key) {\n      let keys;\n      if (allowsMultipleExpanded) {\n        keys = new Set(expandedKeys);\n        if (keys.has(key)) keys.delete(key);else keys.add(key);\n      } else keys = new Set(expandedKeys.has(key) ? [] : [key]);\n      setExpandedKeys(keys);\n    }\n  };\n}\nexport { $9385b3affbdec831$export$f36461af0ef4707d as useDisclosureGroupState };","map":{"version":3,"names":["$9385b3affbdec831$export$f36461af0ef4707d","props","allowsMultipleExpanded","isDisabled","expandedKeys","setExpandedKeys","$j4gLc$useControlledState","$j4gLc$useMemo","Set","undefined","defaultExpandedKeys","onExpandedChange","$j4gLc$useEffect","size","values","next","value","toggleKey","key","keys","has","delete","add"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-stately/disclosure/dist/packages/@react-stately/disclosure/src/useDisclosureGroupState.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Expandable, Key} from '@react-types/shared';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo} from 'react';\n\nexport interface DisclosureGroupProps extends Expandable {\n  /** Whether multiple items can be expanded at the same time. */\n  allowsMultipleExpanded?: boolean,\n  /** Whether all items are disabled. */\n  isDisabled?: boolean\n}\n\nexport interface DisclosureGroupState {\n  /** Whether multiple items can be expanded at the same time. */\n  readonly allowsMultipleExpanded: boolean,\n\n  /** Whether all items are disabled. */\n  readonly isDisabled: boolean,\n  \n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** Replaces the set of expanded keys. */\n  setExpandedKeys(keys: Set<Key>): void\n}\n\n/**\n * Manages state for a group of disclosures, e.g. an accordion.\n * It supports both single and multiple expanded items.\n */\nexport function useDisclosureGroupState(props: DisclosureGroupProps): DisclosureGroupState {\n  let {allowsMultipleExpanded = false, isDisabled = false} = props;\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    useMemo(() => props.expandedKeys ? new Set(props.expandedKeys) : undefined, [props.expandedKeys]),\n    useMemo(() => props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), [props.defaultExpandedKeys]),\n    props.onExpandedChange\n  );\n  \n  useEffect(() => {\n    // Ensure only one item is expanded if allowsMultipleExpanded is false.\n    if (!allowsMultipleExpanded && expandedKeys.size > 1) {\n      setExpandedKeys(new Set([expandedKeys.values().next().value]));\n    }\n  });\n\n  return {\n    allowsMultipleExpanded,\n    isDisabled,\n    expandedKeys,\n    setExpandedKeys,\n    toggleKey(key) {\n      let keys: Set<Key>;\n      if (allowsMultipleExpanded) {\n        keys = new Set(expandedKeys);\n        if (keys.has(key)) {\n          keys.delete(key);\n        } else {\n          keys.add(key);\n        }\n      } else {\n        keys = new Set(expandedKeys.has(key) ? [] : [key]);\n      }\n  \n      setExpandedKeys(keys);\n    }\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AA4CO,SAASA,0CAAwBC,KAA2B;EACjE,IAAI;IAACC,sBAAA,GAAyB;IAAOC,UAAA,GAAa;EAAA,CAAM,GAAGF,KAAA;EAC3D,IAAI,CAACG,YAAA,EAAcC,eAAA,CAAgB,GAAG,IAAAC,yBAAiB,EACrD,IAAAC,cAAM,EAAE,MAAMN,KAAA,CAAMG,YAAY,GAAG,IAAII,GAAA,CAAIP,KAAA,CAAMG,YAAY,IAAIK,SAAA,EAAW,CAACR,KAAA,CAAMG,YAAY,CAAC,GAChG,IAAAG,cAAM,EAAE,MAAMN,KAAA,CAAMS,mBAAmB,GAAG,IAAIF,GAAA,CAAIP,KAAA,CAAMS,mBAAmB,IAAI,IAAIF,GAAA,IAAO,CAACP,KAAA,CAAMS,mBAAmB,CAAC,GACrHT,KAAA,CAAMU,gBAAgB;EAGxB,IAAAC,gBAAQ,EAAE;IACR;IACA,IAAI,CAACV,sBAAA,IAA0BE,YAAA,CAAaS,IAAI,GAAG,GACjDR,eAAA,CAAgB,IAAIG,GAAA,CAAI,CAACJ,YAAA,CAAaU,MAAM,GAAGC,IAAI,GAAGC,KAAK,CAAC;EAEhE;EAEA,OAAO;4BACLd,sBAAA;gBACAC,UAAA;kBACAC,YAAA;qBACAC,eAAA;IACAY,UAAUC,GAAG;MACX,IAAIC,IAAA;MACJ,IAAIjB,sBAAA,EAAwB;QAC1BiB,IAAA,GAAO,IAAIX,GAAA,CAAIJ,YAAA;QACf,IAAIe,IAAA,CAAKC,GAAG,CAACF,GAAA,GACXC,IAAA,CAAKE,MAAM,CAACH,GAAA,OAEZC,IAAA,CAAKG,GAAG,CAACJ,GAAA;MAEb,OACEC,IAAA,GAAO,IAAIX,GAAA,CAAIJ,YAAA,CAAagB,GAAG,CAACF,GAAA,IAAO,EAAE,GAAG,CAACA,GAAA,CAAI;MAGnDb,eAAA,CAAgBc,IAAA;IAClB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}