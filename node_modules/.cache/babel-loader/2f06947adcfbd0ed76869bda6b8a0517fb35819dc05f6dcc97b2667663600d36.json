{"ast":null,"code":"import { useEffect as $6wN6e$useEffect } from \"react\";\nimport { useId as $6wN6e$useId, useEvent as $6wN6e$useEvent } from \"@react-aria/utils\";\nimport { useIsSSR as $6wN6e$useIsSSR } from \"@react-aria/ssr\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $5e910fae8e128ead$export$6e3e27031a30522f(props, state, ref) {\n  let {\n    isDisabled: isDisabled\n  } = props;\n  let triggerId = (0, $6wN6e$useId)();\n  let contentId = (0, $6wN6e$useId)();\n  let isControlled = props.isExpanded !== undefined;\n  let isSSR = (0, $6wN6e$useIsSSR)();\n  let supportsBeforeMatch = !isSSR && 'onbeforematch' in document.body;\n  // @ts-ignore https://github.com/facebook/react/pull/24741\n  (0, $6wN6e$useEvent)(ref, 'beforematch', supportsBeforeMatch && !isControlled ? () => state.expand() : null);\n  (0, $6wN6e$useEffect)(() => {\n    // Until React supports hidden=\"until-found\": https://github.com/facebook/react/pull/24741\n    if (supportsBeforeMatch && (ref === null || ref === void 0 ? void 0 : ref.current) && !isControlled && !isDisabled) {\n      if (state.isExpanded) ref.current.removeAttribute('hidden');else ref.current.setAttribute('hidden', 'until-found');\n    }\n  }, [isControlled, ref, props.isExpanded, state, supportsBeforeMatch, isDisabled]);\n  return {\n    buttonProps: {\n      id: triggerId,\n      'aria-expanded': state.isExpanded,\n      'aria-controls': contentId,\n      onPress: e => {\n        if (!isDisabled && e.pointerType !== 'keyboard') state.toggle();\n      },\n      isDisabled: isDisabled,\n      onKeyDown(e) {\n        if (!isDisabled && (e.key === 'Enter' || e.key === ' ')) {\n          e.preventDefault();\n          state.toggle();\n        }\n      }\n    },\n    panelProps: {\n      id: contentId,\n      // This can be overridden at the panel element level.\n      role: 'group',\n      'aria-labelledby': triggerId,\n      hidden: !supportsBeforeMatch || isControlled ? !state.isExpanded : true\n    }\n  };\n}\nexport { $5e910fae8e128ead$export$6e3e27031a30522f as useDisclosure };","map":{"version":3,"names":["$5e910fae8e128ead$export$6e3e27031a30522f","props","state","ref","isDisabled","triggerId","$6wN6e$useId","contentId","isControlled","isExpanded","undefined","isSSR","$6wN6e$useIsSSR","supportsBeforeMatch","document","body","$6wN6e$useEvent","expand","$6wN6e$useEffect","current","removeAttribute","setAttribute","buttonProps","id","onPress","e","pointerType","toggle","onKeyDown","key","preventDefault","panelProps","role","hidden"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/disclosure/dist/packages/@react-aria/disclosure/src/useDisclosure.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {DisclosureState} from '@react-stately/disclosure';\nimport {HTMLAttributes, RefObject, useEffect} from 'react';\nimport {useEvent, useId} from '@react-aria/utils';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport interface AriaDisclosureProps {\n  /** Whether the disclosure is disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the disclosure's expanded state changes. */\n  onExpandedChange?: (isExpanded: boolean) => void,\n  /** Whether the disclosure is expanded (controlled). */\n  isExpanded?: boolean,\n  /** Whether the disclosure is expanded by default (uncontrolled). */\n  defaultExpanded?: boolean\n}\n\nexport interface DisclosureAria {\n  /** Props for the disclosure button. */\n  buttonProps: AriaButtonProps,\n  /** Props for the disclosure panel. */\n  panelProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a disclosure component.\n * @param props - Props for the disclosure.\n * @param state - State for the disclosure, as returned by `useDisclosureState`.\n * @param ref - A ref for the disclosure content.\n */\nexport function useDisclosure(props: AriaDisclosureProps, state: DisclosureState, ref?: RefObject<Element | null>): DisclosureAria {\n  let {\n    isDisabled\n  } = props;\n  let triggerId = useId();\n  let contentId = useId();\n  let isControlled = props.isExpanded !== undefined;\n  let isSSR = useIsSSR();\n  let supportsBeforeMatch = !isSSR && 'onbeforematch' in document.body;\n\n  // @ts-ignore https://github.com/facebook/react/pull/24741\n  useEvent(ref, 'beforematch', supportsBeforeMatch && !isControlled ? () => state.expand() : null);\n\n  useEffect(() => {\n    // Until React supports hidden=\"until-found\": https://github.com/facebook/react/pull/24741\n    if (supportsBeforeMatch && ref?.current && !isControlled && !isDisabled) {\n      if (state.isExpanded) {\n        ref.current.removeAttribute('hidden');\n      } else {\n        ref.current.setAttribute('hidden', 'until-found');\n      }\n    }\n  }, [isControlled, ref, props.isExpanded, state, supportsBeforeMatch, isDisabled]);\n\n  return {\n    buttonProps: {\n      id: triggerId,\n      'aria-expanded': state.isExpanded,\n      'aria-controls': contentId,\n      onPress: (e) => {\n        if (!isDisabled && e.pointerType !== 'keyboard') {\n          state.toggle();\n        }\n      },\n      isDisabled,\n      onKeyDown(e) {\n        if (!isDisabled && (e.key === 'Enter' || e.key === ' ')) {\n          e.preventDefault();\n          state.toggle();\n        }\n      }\n    },\n    panelProps: {\n      id: contentId,\n      // This can be overridden at the panel element level.\n      role: 'group',\n      'aria-labelledby': triggerId,\n      hidden: (!supportsBeforeMatch || isControlled) ? !state.isExpanded : true\n    }\n  };\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AA0CO,SAASA,0CAAcC,KAA0B,EAAEC,KAAsB,EAAEC,GAA+B;EAC/G,IAAI;IAAAC,UAAA,EACFA;EAAU,CACX,GAAGH,KAAA;EACJ,IAAII,SAAA,GAAY,IAAAC,YAAI;EACpB,IAAIC,SAAA,GAAY,IAAAD,YAAI;EACpB,IAAIE,YAAA,GAAeP,KAAA,CAAMQ,UAAU,KAAKC,SAAA;EACxC,IAAIC,KAAA,GAAQ,IAAAC,eAAO;EACnB,IAAIC,mBAAA,GAAsB,CAACF,KAAA,IAAS,mBAAmBG,QAAA,CAASC,IAAI;EAEpE;EACA,IAAAC,eAAO,EAAEb,GAAA,EAAK,eAAeU,mBAAA,IAAuB,CAACL,YAAA,GAAe,MAAMN,KAAA,CAAMe,MAAM,KAAK;EAE3F,IAAAC,gBAAQ,EAAE;IACR;IACA,IAAIL,mBAAA,KAAuBV,GAAA,aAAAA,GAAA,uBAAAA,GAAA,CAAKgB,OAAO,KAAI,CAACX,YAAA,IAAgB,CAACJ,UAAA;MAC3D,IAAIF,KAAA,CAAMO,UAAU,EAClBN,GAAA,CAAIgB,OAAO,CAACC,eAAe,CAAC,eAE5BjB,GAAA,CAAIgB,OAAO,CAACE,YAAY,CAAC,UAAU;;EAGzC,GAAG,CAACb,YAAA,EAAcL,GAAA,EAAKF,KAAA,CAAMQ,UAAU,EAAEP,KAAA,EAAOW,mBAAA,EAAqBT,UAAA,CAAW;EAEhF,OAAO;IACLkB,WAAA,EAAa;MACXC,EAAA,EAAIlB,SAAA;MACJ,iBAAiBH,KAAA,CAAMO,UAAU;MACjC,iBAAiBF,SAAA;MACjBiB,OAAA,EAAUC,CAAA;QACR,IAAI,CAACrB,UAAA,IAAcqB,CAAA,CAAEC,WAAW,KAAK,YACnCxB,KAAA,CAAMyB,MAAM;MAEhB;kBACAvB,UAAA;MACAwB,UAAUH,CAAC;QACT,IAAI,CAACrB,UAAA,KAAeqB,CAAA,CAAEI,GAAG,KAAK,WAAWJ,CAAA,CAAEI,GAAG,KAAK,GAAE,GAAI;UACvDJ,CAAA,CAAEK,cAAc;UAChB5B,KAAA,CAAMyB,MAAM;QACd;MACF;IACF;IACAI,UAAA,EAAY;MACVR,EAAA,EAAIhB,SAAA;MACJ;MACAyB,IAAA,EAAM;MACN,mBAAmB3B,SAAA;MACnB4B,MAAA,EAAQ,CAAEpB,mBAAA,IAAuBL,YAAA,GAAgB,CAACN,KAAA,CAAMO,UAAU,GAAG;IACvE;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}