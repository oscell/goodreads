{"ast":null,"code":"import { flushSync as $eLjnH$flushSync } from \"react-dom\";\nimport $eLjnH$react, { useState as $eLjnH$useState, useRef as $eLjnH$useRef, useImperativeHandle as $eLjnH$useImperativeHandle } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ad0e3f3d9c50e4ba$var$DragPreview(props, ref) {\n  let render = props.children;\n  let [children, setChildren] = (0, $eLjnH$useState)(null);\n  let domRef = (0, $eLjnH$useRef)(null);\n  (0, $eLjnH$useImperativeHandle)(ref, () => (items, callback) => {\n    // This will be called during the onDragStart event by useDrag. We need to render the\n    // preview synchronously before this event returns so we can call event.dataTransfer.setDragImage.\n    (0, $eLjnH$flushSync)(() => {\n      setChildren(render(items));\n    });\n    // Yield back to useDrag to set the drag image.\n    callback(domRef.current);\n    // Remove the preview from the DOM after a frame so the browser has time to paint.\n    requestAnimationFrame(() => {\n      setChildren(null);\n    });\n  }, [render]);\n  if (!children) return null;\n  return /*#__PURE__*/(0, $eLjnH$react).createElement(\"div\", {\n    style: {\n      zIndex: -100,\n      position: 'absolute',\n      top: 0,\n      left: -100000\n    },\n    ref: domRef\n  }, children);\n}\nlet $ad0e3f3d9c50e4ba$export$905ab40ac2179daa = /*#__PURE__*/(0, $eLjnH$react).forwardRef($ad0e3f3d9c50e4ba$var$DragPreview);\nexport { $ad0e3f3d9c50e4ba$export$905ab40ac2179daa as DragPreview };","map":{"version":3,"names":["$ad0e3f3d9c50e4ba$var$DragPreview","props","ref","render","children","setChildren","$eLjnH$useState","domRef","$eLjnH$useRef","$eLjnH$useImperativeHandle","items","callback","$eLjnH$flushSync","current","requestAnimationFrame","$eLjnH$react","createElement","style","zIndex","position","top","left","$ad0e3f3d9c50e4ba$export$905ab40ac2179daa","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/dnd/dist/packages/@react-aria/dnd/src/DragPreview.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DragItem, DragPreviewRenderer, RefObject} from '@react-types/shared';\nimport {flushSync} from 'react-dom';\nimport React, {JSX, useImperativeHandle, useRef, useState} from 'react';\n\nexport interface DragPreviewProps {\n  children: (items: DragItem[]) => JSX.Element\n}\n\nfunction DragPreview(props: DragPreviewProps, ref: RefObject<DragPreviewRenderer | null>) {\n  let render = props.children;\n  let [children, setChildren] = useState<JSX.Element>(null);\n  let domRef = useRef(null);\n\n  useImperativeHandle(ref, () => (items: DragItem[], callback: (node: HTMLElement) => void) => {\n    // This will be called during the onDragStart event by useDrag. We need to render the\n    // preview synchronously before this event returns so we can call event.dataTransfer.setDragImage.\n    flushSync(() => {\n      setChildren(render(items));\n    });\n\n    // Yield back to useDrag to set the drag image.\n    callback(domRef.current);\n\n    // Remove the preview from the DOM after a frame so the browser has time to paint.\n    requestAnimationFrame(() => {\n      setChildren(null);\n    });\n  }, [render]);\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <div style={{zIndex: -100, position: 'absolute', top: 0, left: -100000}} ref={domRef}>\n      {children}\n    </div>\n  );\n}\n\nlet _DragPreview = React.forwardRef(DragPreview);\nexport {_DragPreview as DragPreview};\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAoBA,SAASA,kCAAYC,KAAuB,EAAEC,GAA0C;EACtF,IAAIC,MAAA,GAASF,KAAA,CAAMG,QAAQ;EAC3B,IAAI,CAACA,QAAA,EAAUC,WAAA,CAAY,GAAG,IAAAC,eAAO,EAAe;EACpD,IAAIC,MAAA,GAAS,IAAAC,aAAK,EAAE;EAEpB,IAAAC,0BAAkB,EAAEP,GAAA,EAAK,MAAM,CAACQ,KAAA,EAAmBC,QAAA;IACjD;IACA;IACA,IAAAC,gBAAQ,EAAE;MACRP,WAAA,CAAYF,MAAA,CAAOO,KAAA;IACrB;IAEA;IACAC,QAAA,CAASJ,MAAA,CAAOM,OAAO;IAEvB;IACAC,qBAAA,CAAsB;MACpBT,WAAA,CAAY;IACd;EACF,GAAG,CAACF,MAAA,CAAO;EAEX,IAAI,CAACC,QAAA,EACH,OAAO;EAGT,oBACE,IAAAW,YAAA,EAAAC,aAAA,CAAC;IAAIC,KAAA,EAAO;MAACC,MAAA,EAAQ;MAAMC,QAAA,EAAU;MAAYC,GAAA,EAAK;MAAGC,IAAA,EAAM;IAAO;IAAGnB,GAAA,EAAKK;KAC3EH,QAAA;AAGP;AAEA,IAAIkB,yCAAA,gBAAe,IAAAP,YAAI,EAAEQ,UAAU,CAACvB,iCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}