{"ast":null,"code":"import { ButtonContext as $d2b4bc8c273e7be6$export$24d547caef80ccd1 } from \"./Button.mjs\";\nimport { CheckboxContext as $4e85f108e88277b8$export$b085522c77523c51 } from \"./RSPContexts.mjs\";\nimport { CollectionRendererContext as $7135fc7d473fd974$export$4feb769f8ddf26c5, DefaultCollectionRenderer as $7135fc7d473fd974$export$a164736487e3f0ae } from \"./Collection.mjs\";\nimport { DEFAULT_SLOT as $64fa3d84918910a7$export$c62b8e45d58ddad9, Provider as $64fa3d84918910a7$export$2881499e37b75b9a, useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3 } from \"./utils.mjs\";\nimport { DragAndDropContext as $612b8eb6cb90e02d$export$d188a835a7bc5783, DropIndicatorContext as $612b8eb6cb90e02d$export$f55761759794cf55, useDndPersistedKeys as $612b8eb6cb90e02d$export$d1e8e3fbb7461f6, useRenderDropIndicator as $612b8eb6cb90e02d$export$971707d8a129a1f7 } from \"./DragAndDrop.mjs\";\nimport { ListStateContext as $eed445e0843c11d0$export$7c5906fe4f1f2af2 } from \"./ListBox.mjs\";\nimport { TextContext as $514c0188e459b4c0$export$9afb8bc826b033ea } from \"./Text.mjs\";\nimport { useCollator as $jTmF7$useCollator, useLocale as $jTmF7$useLocale, ListKeyboardDelegate as $jTmF7$ListKeyboardDelegate, useGridList as $jTmF7$useGridList, useFocusRing as $jTmF7$useFocusRing, FocusScope as $jTmF7$FocusScope, mergeProps as $jTmF7$mergeProps, useGridListItem as $jTmF7$useGridListItem, useHover as $jTmF7$useHover, useGridListSelectionCheckbox as $jTmF7$useGridListSelectionCheckbox, useVisuallyHidden as $jTmF7$useVisuallyHidden } from \"react-aria\";\nimport { CollectionBuilder as $jTmF7$CollectionBuilder, Collection as $jTmF7$Collection, createLeafComponent as $jTmF7$createLeafComponent } from \"@react-aria/collections\";\nimport { useListState as $jTmF7$useListState } from \"react-stately\";\nimport { filterDOMProps as $jTmF7$filterDOMProps, useObjectRef as $jTmF7$useObjectRef } from \"@react-aria/utils\";\nimport $jTmF7$react, { createContext as $jTmF7$createContext, useContext as $jTmF7$useContext, useMemo as $jTmF7$useMemo, useRef as $jTmF7$useRef, useEffect as $jTmF7$useEffect, forwardRef as $jTmF7$forwardRef } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $72e60046c03fbe42$export$54fe942636b6416d = /*#__PURE__*/(0, $jTmF7$createContext)(null);\nfunction $72e60046c03fbe42$var$GridList(props, ref) {\n  // Render the portal first so that we have the collection by the time we render the DOM in SSR.\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $72e60046c03fbe42$export$54fe942636b6416d);\n  return /*#__PURE__*/(0, $jTmF7$react).createElement((0, $jTmF7$CollectionBuilder), {\n    content: /*#__PURE__*/(0, $jTmF7$react).createElement((0, $jTmF7$Collection), props)\n  }, collection => /*#__PURE__*/(0, $jTmF7$react).createElement($72e60046c03fbe42$var$GridListInner, {\n    props: props,\n    collection: collection,\n    gridListRef: ref\n  }));\n}\nfunction $72e60046c03fbe42$var$GridListInner({\n  props: props,\n  collection: collection,\n  gridListRef: ref\n}) {\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    keyboardNavigationBehavior = 'arrow',\n    layout = 'stack'\n  } = props;\n  let {\n    CollectionRoot: CollectionRoot,\n    isVirtualized: isVirtualized,\n    layoutDelegate: layoutDelegate,\n    dropTargetDelegate: ctxDropTargetDelegate\n  } = (0, $jTmF7$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let state = (0, $jTmF7$useListState)({\n    ...props,\n    collection: collection,\n    children: undefined,\n    layoutDelegate: layoutDelegate\n  });\n  let collator = (0, $jTmF7$useCollator)({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let {\n    disabledBehavior: disabledBehavior,\n    disabledKeys: disabledKeys\n  } = state.selectionManager;\n  let {\n    direction: direction\n  } = (0, $jTmF7$useLocale)();\n  let keyboardDelegate = (0, $jTmF7$useMemo)(() => new (0, $jTmF7$ListKeyboardDelegate)({\n    collection: collection,\n    collator: collator,\n    ref: ref,\n    disabledKeys: disabledKeys,\n    disabledBehavior: disabledBehavior,\n    layoutDelegate: layoutDelegate,\n    layout: layout,\n    direction: direction\n  }), [collection, ref, layout, disabledKeys, disabledBehavior, layoutDelegate, collator, direction]);\n  let {\n    gridProps: gridProps\n  } = (0, $jTmF7$useGridList)({\n    ...props,\n    keyboardDelegate: keyboardDelegate,\n    // Only tab navigation is supported in grid layout.\n    keyboardNavigationBehavior: layout === 'grid' ? 'tab' : keyboardNavigationBehavior,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let selectionManager = state.selectionManager;\n  let isListDraggable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);\n  let isListDroppable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState);\n  let dragHooksProvided = (0, $jTmF7$useRef)(isListDraggable);\n  let dropHooksProvided = (0, $jTmF7$useRef)(isListDroppable);\n  (0, $jTmF7$useEffect)(() => {\n    if (dragHooksProvided.current !== isListDraggable) console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    if (dropHooksProvided.current !== isListDroppable) console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n  }, [isListDraggable, isListDroppable]);\n  let dragState = undefined;\n  let dropState = undefined;\n  let droppableCollection = undefined;\n  let isRootDropTarget = false;\n  let dragPreview = null;\n  let preview = (0, $jTmF7$useRef)(null);\n  if (isListDraggable && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState({\n      collection: collection,\n      selectionManager: selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection({}, dragState, ref);\n    let DragPreview = dragAndDropHooks.DragPreview;\n    dragPreview = dragAndDropHooks.renderDragPreview ? /*#__PURE__*/(0, $jTmF7$react).createElement(DragPreview, {\n      ref: preview\n    }, dragAndDropHooks.renderDragPreview) : null;\n  }\n  if (isListDroppable && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState({\n      collection: collection,\n      selectionManager: selectionManager\n    });\n    let keyboardDelegate = new (0, $jTmF7$ListKeyboardDelegate)({\n      collection: collection,\n      disabledKeys: selectionManager.disabledKeys,\n      disabledBehavior: selectionManager.disabledBehavior,\n      ref: ref\n    });\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection, ref, {\n      layout: layout,\n      direction: direction\n    });\n    droppableCollection = dragAndDropHooks.useDroppableCollection({\n      keyboardDelegate: keyboardDelegate,\n      dropTargetDelegate: dropTargetDelegate\n    }, dropState, ref);\n    isRootDropTarget = dropState.isDropTarget({\n      type: 'root'\n    });\n  }\n  let {\n    focusProps: focusProps,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  } = (0, $jTmF7$useFocusRing)();\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: state.collection.size === 0,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible,\n    layout: layout,\n    state: state\n  };\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-GridList',\n    values: renderValues\n  });\n  let emptyState = null;\n  let emptyStatePropOverrides = null;\n  if (state.collection.size === 0 && props.renderEmptyState) {\n    let content = props.renderEmptyState(renderValues);\n    emptyState = /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n      role: \"row\",\n      style: {\n        display: 'contents'\n      }\n    }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n      role: \"gridcell\",\n      style: {\n        display: 'contents'\n      }\n    }, content));\n  }\n  return /*#__PURE__*/(0, $jTmF7$react).createElement((0, $jTmF7$FocusScope), null, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    ...(0, $jTmF7$filterDOMProps)(props),\n    ...renderProps,\n    ...(0, $jTmF7$mergeProps)(gridProps, focusProps, droppableCollection === null || droppableCollection === void 0 ? void 0 : droppableCollection.collectionProps, emptyStatePropOverrides),\n    ref: ref,\n    slot: props.slot || undefined,\n    onScroll: props.onScroll,\n    \"data-drop-target\": isRootDropTarget || undefined,\n    \"data-empty\": state.collection.size === 0 || undefined,\n    \"data-focused\": isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-layout\": layout\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $eed445e0843c11d0$export$7c5906fe4f1f2af2), state], [(0, $612b8eb6cb90e02d$export$d188a835a7bc5783), {\n      dragAndDropHooks: dragAndDropHooks,\n      dragState: dragState,\n      dropState: dropState\n    }], [(0, $612b8eb6cb90e02d$export$f55761759794cf55), {\n      render: $72e60046c03fbe42$var$GridListDropIndicatorWrapper\n    }]]\n  }, isListDroppable && /*#__PURE__*/(0, $jTmF7$react).createElement($72e60046c03fbe42$var$RootDropIndicator, null), /*#__PURE__*/(0, $jTmF7$react).createElement(CollectionRoot, {\n    collection: collection,\n    scrollRef: ref,\n    persistedKeys: (0, $612b8eb6cb90e02d$export$d1e8e3fbb7461f6)(selectionManager, dragAndDropHooks, dropState),\n    renderDropIndicator: (0, $612b8eb6cb90e02d$export$971707d8a129a1f7)(dragAndDropHooks, dropState)\n  })), emptyState, dragPreview));\n}\n/**\n * A grid list displays a list of interactive items, with support for keyboard navigation,\n * single or multiple selection, and row actions.\n */\nconst $72e60046c03fbe42$export$a7bfbda1311ca015 = /*#__PURE__*/(0, $jTmF7$forwardRef)($72e60046c03fbe42$var$GridList);\nconst $72e60046c03fbe42$export$e96fc9a8407faa6b = /*#__PURE__*/(0, $jTmF7$createLeafComponent)('item', function GridListItem(props, forwardedRef, item) {\n  let state = (0, $jTmF7$useContext)((0, $eed445e0843c11d0$export$7c5906fe4f1f2af2));\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dragState: dragState,\n    dropState: dropState\n  } = (0, $jTmF7$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let ref = (0, $jTmF7$useObjectRef)(forwardedRef);\n  let {\n    isVirtualized: isVirtualized\n  } = (0, $jTmF7$useContext)((0, $7135fc7d473fd974$export$4feb769f8ddf26c5));\n  let {\n    rowProps: rowProps,\n    gridCellProps: gridCellProps,\n    descriptionProps: descriptionProps,\n    ...states\n  } = (0, $jTmF7$useGridListItem)({\n    node: item,\n    shouldSelectOnPressUp: !!dragState,\n    isVirtualized: isVirtualized\n  }, state, ref);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $jTmF7$useHover)({\n    isDisabled: !states.allowsSelection && !states.hasAction,\n    onHoverStart: item.props.onHoverStart,\n    onHoverChange: item.props.onHoverChange,\n    onHoverEnd: item.props.onHoverEnd\n  });\n  let {\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $jTmF7$useFocusRing)();\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $jTmF7$useGridListSelectionCheckbox)({\n    key: item.key\n  }, state);\n  let buttonProps = state.selectionManager.disabledBehavior === 'all' && states.isDisabled ? {\n    isDisabled: true\n  } : {};\n  let draggableItem = null;\n  if (dragState && dragAndDropHooks) draggableItem = dragAndDropHooks.useDraggableItem({\n    key: item.key,\n    hasDragButton: true\n  }, dragState);\n  let dropIndicator = null;\n  let dropIndicatorRef = (0, $jTmF7$useRef)(null);\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $jTmF7$useVisuallyHidden)();\n  if (dropState && dragAndDropHooks) dropIndicator = dragAndDropHooks.useDropIndicator({\n    target: {\n      type: 'item',\n      key: item.key,\n      dropPosition: 'on'\n    }\n  }, dropState, dropIndicatorRef);\n  let isDragging = dragState && dragState.isDragging(item.key);\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-GridListItem',\n    values: {\n      ...states,\n      isHovered: isHovered,\n      isFocusVisible: isFocusVisible,\n      selectionMode: state.selectionManager.selectionMode,\n      selectionBehavior: state.selectionManager.selectionBehavior,\n      allowsDragging: !!dragState,\n      isDragging: isDragging,\n      isDropTarget: dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget\n    }\n  });\n  let dragButtonRef = (0, $jTmF7$useRef)(null);\n  (0, $jTmF7$useEffect)(() => {\n    if (dragState && !dragButtonRef.current) console.warn('Draggable items in a GridList must contain a <Button slot=\"drag\"> element so that keyboard and screen reader users can drag them.');\n    // eslint-disable-next-line\n  }, []);\n  (0, $jTmF7$useEffect)(() => {\n    if (!item.textValue) console.warn('A `textValue` prop is required for <GridListItem> elements with non-plain text children in order to support accessibility features such as type to select.');\n  }, [item.textValue]);\n  return /*#__PURE__*/(0, $jTmF7$react).createElement((0, $jTmF7$react).Fragment, null, dropIndicator && !dropIndicator.isHidden && /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    role: \"row\",\n    style: {\n      position: 'absolute'\n    }\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    role: \"gridcell\"\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    role: \"button\",\n    ...visuallyHiddenProps,\n    ...(dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.dropIndicatorProps),\n    ref: dropIndicatorRef\n  }))), /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    ...(0, $jTmF7$mergeProps)((0, $jTmF7$filterDOMProps)(props), rowProps, focusProps, hoverProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps),\n    ...renderProps,\n    ref: ref,\n    \"data-selected\": states.isSelected || undefined,\n    \"data-disabled\": states.isDisabled || undefined,\n    \"data-hovered\": isHovered || undefined,\n    \"data-focused\": states.isFocused || undefined,\n    \"data-focus-visible\": isFocusVisible || undefined,\n    \"data-pressed\": states.isPressed || undefined,\n    \"data-allows-dragging\": !!dragState || undefined,\n    \"data-dragging\": isDragging || undefined,\n    \"data-drop-target\": (dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget) || undefined,\n    \"data-selection-mode\": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    ...gridCellProps,\n    style: {\n      display: 'contents'\n    }\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement((0, $64fa3d84918910a7$export$2881499e37b75b9a), {\n    values: [[(0, $4e85f108e88277b8$export$b085522c77523c51), {\n      slots: {\n        selection: checkboxProps\n      }\n    }], [(0, $d2b4bc8c273e7be6$export$24d547caef80ccd1), {\n      slots: {\n        [(0, $64fa3d84918910a7$export$c62b8e45d58ddad9)]: buttonProps,\n        drag: {\n          ...(draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragButtonProps),\n          ref: dragButtonRef,\n          style: {\n            pointerEvents: 'none'\n          }\n        }\n      }\n    }], [(0, $514c0188e459b4c0$export$9afb8bc826b033ea), {\n      slots: {\n        [(0, $64fa3d84918910a7$export$c62b8e45d58ddad9)]: {},\n        description: descriptionProps\n      }\n    }], [(0, $7135fc7d473fd974$export$4feb769f8ddf26c5), (0, $7135fc7d473fd974$export$a164736487e3f0ae)], [(0, $eed445e0843c11d0$export$7c5906fe4f1f2af2), null]]\n  }, renderProps.children))));\n});\nfunction $72e60046c03fbe42$var$GridListDropIndicatorWrapper(props, ref) {\n  ref = (0, $jTmF7$useObjectRef)(ref);\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $jTmF7$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let buttonRef = (0, $jTmF7$useRef)(null);\n  let {\n    dropIndicatorProps: dropIndicatorProps,\n    isHidden: isHidden,\n    isDropTarget: isDropTarget\n  } = dragAndDropHooks.useDropIndicator(props, dropState, buttonRef);\n  if (isHidden) return null;\n  return /*#__PURE__*/(0, $jTmF7$react).createElement($72e60046c03fbe42$var$GridListDropIndicatorForwardRef, {\n    ...props,\n    dropIndicatorProps: dropIndicatorProps,\n    isDropTarget: isDropTarget,\n    buttonRef: buttonRef,\n    ref: ref\n  });\n}\nfunction $72e60046c03fbe42$var$GridListDropIndicator(props, ref) {\n  let {\n    dropIndicatorProps: dropIndicatorProps,\n    isDropTarget: isDropTarget,\n    buttonRef: buttonRef,\n    ...otherProps\n  } = props;\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $jTmF7$useVisuallyHidden)();\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...otherProps,\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget: isDropTarget\n    }\n  });\n  return /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    ...renderProps,\n    role: \"row\",\n    ref: ref,\n    \"data-drop-target\": isDropTarget || undefined\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    role: \"gridcell\"\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    ...visuallyHiddenProps,\n    role: \"button\",\n    ...dropIndicatorProps,\n    ref: buttonRef\n  }), renderProps.children));\n}\nconst $72e60046c03fbe42$var$GridListDropIndicatorForwardRef = /*#__PURE__*/(0, $jTmF7$forwardRef)($72e60046c03fbe42$var$GridListDropIndicator);\nfunction $72e60046c03fbe42$var$RootDropIndicator() {\n  let {\n    dragAndDropHooks: dragAndDropHooks,\n    dropState: dropState\n  } = (0, $jTmF7$useContext)((0, $612b8eb6cb90e02d$export$d188a835a7bc5783));\n  let ref = (0, $jTmF7$useRef)(null);\n  let {\n    dropIndicatorProps: dropIndicatorProps\n  } = dragAndDropHooks.useDropIndicator({\n    target: {\n      type: 'root'\n    }\n  }, dropState, ref);\n  let isDropTarget = dropState.isDropTarget({\n    type: 'root'\n  });\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $jTmF7$useVisuallyHidden)();\n  if (!isDropTarget && dropIndicatorProps['aria-hidden']) return null;\n  return /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    role: \"row\",\n    \"aria-hidden\": dropIndicatorProps['aria-hidden'],\n    style: {\n      position: 'absolute'\n    }\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    role: \"gridcell\"\n  }, /*#__PURE__*/(0, $jTmF7$react).createElement(\"div\", {\n    role: \"button\",\n    ...visuallyHiddenProps,\n    ...dropIndicatorProps,\n    ref: ref\n  })));\n}\nexport { $72e60046c03fbe42$export$54fe942636b6416d as GridListContext, $72e60046c03fbe42$export$a7bfbda1311ca015 as GridList, $72e60046c03fbe42$export$e96fc9a8407faa6b as GridListItem };","map":{"version":3,"names":["$72e60046c03fbe42$export$54fe942636b6416d","$jTmF7$createContext","$72e60046c03fbe42$var$GridList","props","ref","$64fa3d84918910a7$export$29f1550f4b0d4415","$jTmF7$react","createElement","$jTmF7$CollectionBuilder","content","$jTmF7$Collection","collection","$72e60046c03fbe42$var$GridListInner","gridListRef","dragAndDropHooks","keyboardNavigationBehavior","layout","CollectionRoot","isVirtualized","layoutDelegate","dropTargetDelegate","ctxDropTargetDelegate","$jTmF7$useContext","$7135fc7d473fd974$export$4feb769f8ddf26c5","state","$jTmF7$useListState","children","undefined","collator","$jTmF7$useCollator","usage","sensitivity","disabledBehavior","disabledKeys","selectionManager","direction","$jTmF7$useLocale","keyboardDelegate","$jTmF7$useMemo","$jTmF7$ListKeyboardDelegate","gridProps","$jTmF7$useGridList","isListDraggable","useDraggableCollectionState","isListDroppable","useDroppableCollectionState","dragHooksProvided","$jTmF7$useRef","dropHooksProvided","$jTmF7$useEffect","current","console","warn","dragState","dropState","droppableCollection","isRootDropTarget","dragPreview","preview","renderDragPreview","useDraggableCollection","DragPreview","ListDropTargetDelegate","useDroppableCollection","isDropTarget","type","focusProps","isFocused","isFocusVisible","$jTmF7$useFocusRing","renderValues","isEmpty","size","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","className","style","defaultClassName","values","emptyState","emptyStatePropOverrides","renderEmptyState","role","display","$jTmF7$FocusScope","$jTmF7$filterDOMProps","$jTmF7$mergeProps","collectionProps","slot","onScroll","$64fa3d84918910a7$export$2881499e37b75b9a","$eed445e0843c11d0$export$7c5906fe4f1f2af2","$612b8eb6cb90e02d$export$d188a835a7bc5783","$612b8eb6cb90e02d$export$f55761759794cf55","render","$72e60046c03fbe42$var$GridListDropIndicatorWrapper","$72e60046c03fbe42$var$RootDropIndicator","scrollRef","persistedKeys","$612b8eb6cb90e02d$export$d1e8e3fbb7461f6","renderDropIndicator","$612b8eb6cb90e02d$export$971707d8a129a1f7","$72e60046c03fbe42$export$a7bfbda1311ca015","$jTmF7$forwardRef","$72e60046c03fbe42$export$e96fc9a8407faa6b","$jTmF7$createLeafComponent","GridListItem","forwardedRef","item","$jTmF7$useObjectRef","rowProps","gridCellProps","descriptionProps","states","$jTmF7$useGridListItem","node","shouldSelectOnPressUp","hoverProps","isHovered","$jTmF7$useHover","isDisabled","allowsSelection","hasAction","onHoverStart","onHoverChange","onHoverEnd","checkboxProps","$jTmF7$useGridListSelectionCheckbox","key","buttonProps","draggableItem","useDraggableItem","hasDragButton","dropIndicator","dropIndicatorRef","visuallyHiddenProps","$jTmF7$useVisuallyHidden","useDropIndicator","target","dropPosition","isDragging","id","rendered","selectionMode","selectionBehavior","allowsDragging","dragButtonRef","textValue","Fragment","isHidden","position","dropIndicatorProps","dragProps","isSelected","isPressed","$4e85f108e88277b8$export$b085522c77523c51","slots","selection","$d2b4bc8c273e7be6$export$24d547caef80ccd1","$64fa3d84918910a7$export$c62b8e45d58ddad9","drag","dragButtonProps","pointerEvents","$514c0188e459b4c0$export$9afb8bc826b033ea","description","$7135fc7d473fd974$export$a164736487e3f0ae","buttonRef","$72e60046c03fbe42$var$GridListDropIndicatorForwardRef","$72e60046c03fbe42$var$GridListDropIndicator","otherProps"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/GridList.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {AriaGridListProps, DraggableItemResult, DragPreviewRenderer, DropIndicatorAria, DroppableCollectionResult, FocusScope, ListKeyboardDelegate, mergeProps, useCollator, useFocusRing, useGridList, useGridListItem, useGridListSelectionCheckbox, useHover, useLocale, useVisuallyHidden} from 'react-aria';\nimport {ButtonContext} from './Button';\nimport {CheckboxContext} from './RSPContexts';\nimport {Collection, CollectionBuilder, createLeafComponent} from '@react-aria/collections';\nimport {CollectionProps, CollectionRendererContext, DefaultCollectionRenderer, ItemRenderProps} from './Collection';\nimport {ContextValue, DEFAULT_SLOT, Provider, RenderProps, ScrollableProps, SlotProps, StyleRenderProps, useContextProps, useRenderProps} from './utils';\nimport {DragAndDropContext, DropIndicatorContext, DropIndicatorProps, useDndPersistedKeys, useRenderDropIndicator} from './DragAndDrop';\nimport {DragAndDropHooks} from './useDragAndDrop';\nimport {DraggableCollectionState, DroppableCollectionState, Collection as ICollection, ListState, Node, SelectionBehavior, useListState} from 'react-stately';\nimport {filterDOMProps, useObjectRef} from '@react-aria/utils';\nimport {forwardRefType, HoverEvents, Key, LinkDOMProps, RefObject} from '@react-types/shared';\nimport {ListStateContext} from './ListBox';\nimport React, {createContext, ForwardedRef, forwardRef, HTMLAttributes, JSX, ReactNode, useContext, useEffect, useMemo, useRef} from 'react';\nimport {TextContext} from './Text';\n\nexport interface GridListRenderProps {\n  /**\n   * Whether the list has no items and should display its empty state.\n   * @selector [data-empty]\n   */\n  isEmpty: boolean,\n  /**\n   * Whether the grid list is currently focused.\n   * @selector [data-focused]\n   */\n  isFocused: boolean,\n  /**\n   * Whether the grid list is currently keyboard focused.\n   * @selector [data-focus-visible]\n   */\n  isFocusVisible: boolean,\n  /**\n   * Whether the grid list is currently the active drop target.\n   * @selector [data-drop-target]\n   */\n  isDropTarget: boolean,\n  /**\n   * Whether the items are arranged in a stack or grid.\n   * @selector [data-layout=\"stack | grid\"]\n   */\n  layout: 'stack' | 'grid',\n  /**\n   * State of the grid list.\n   */\n  state: ListState<unknown>\n}\n\nexport interface GridListProps<T> extends Omit<AriaGridListProps<T>, 'children'>, CollectionProps<T>, StyleRenderProps<GridListRenderProps>, SlotProps, ScrollableProps<HTMLDivElement> {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the GridList. */\n  dragAndDropHooks?: DragAndDropHooks,\n  /** Provides content to display when there are no items in the list. */\n  renderEmptyState?: (props: GridListRenderProps) => ReactNode,\n  /**\n   * Whether the items are arranged in a stack or grid.\n   * @default 'stack'\n   */\n  layout?: 'stack' | 'grid'\n}\n\n\nexport const GridListContext = createContext<ContextValue<GridListProps<any>, HTMLDivElement>>(null);\n\nfunction GridList<T extends object>(props: GridListProps<T>, ref: ForwardedRef<HTMLDivElement>) {\n  // Render the portal first so that we have the collection by the time we render the DOM in SSR.\n  [props, ref] = useContextProps(props, ref, GridListContext);\n\n  return (\n    <CollectionBuilder content={<Collection {...props} />}>\n      {collection => <GridListInner props={props} collection={collection} gridListRef={ref} />}\n    </CollectionBuilder>\n  );\n}\n\ninterface GridListInnerProps<T extends object> {\n  props: GridListProps<T>,\n  collection: ICollection<Node<object>>,\n  gridListRef: RefObject<HTMLDivElement | null>\n}\n\nfunction GridListInner<T extends object>({props, collection, gridListRef: ref}: GridListInnerProps<T>) {\n  let {dragAndDropHooks, keyboardNavigationBehavior = 'arrow', layout = 'stack'} = props;\n  let {CollectionRoot, isVirtualized, layoutDelegate, dropTargetDelegate: ctxDropTargetDelegate} = useContext(CollectionRendererContext);\n  let state = useListState({\n    ...props,\n    collection,\n    children: undefined,\n    layoutDelegate\n  });\n\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let {disabledBehavior, disabledKeys} = state.selectionManager;\n  let {direction} = useLocale();\n  let keyboardDelegate = useMemo(() => (\n    new ListKeyboardDelegate({\n      collection,\n      collator,\n      ref,\n      disabledKeys,\n      disabledBehavior,\n      layoutDelegate,\n      layout,\n      direction\n    })\n  ), [collection, ref, layout, disabledKeys, disabledBehavior, layoutDelegate, collator, direction]);\n\n  let {gridProps} = useGridList({\n    ...props,\n    keyboardDelegate,\n    // Only tab navigation is supported in grid layout.\n    keyboardNavigationBehavior: layout === 'grid' ? 'tab' : keyboardNavigationBehavior,\n    isVirtualized\n  }, state, ref);\n\n  let selectionManager = state.selectionManager;\n  let isListDraggable = !!dragAndDropHooks?.useDraggableCollectionState;\n  let isListDroppable = !!dragAndDropHooks?.useDroppableCollectionState;\n  let dragHooksProvided = useRef(isListDraggable);\n  let dropHooksProvided = useRef(isListDroppable);\n  useEffect(() => {\n    if (dragHooksProvided.current !== isListDraggable) {\n      console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if (dropHooksProvided.current !== isListDroppable) {\n      console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n  }, [isListDraggable, isListDroppable]);\n\n  let dragState: DraggableCollectionState | undefined = undefined;\n  let dropState: DroppableCollectionState | undefined = undefined;\n  let droppableCollection: DroppableCollectionResult | undefined = undefined;\n  let isRootDropTarget = false;\n  let dragPreview: JSX.Element | null = null;\n  let preview = useRef<DragPreviewRenderer>(null);\n\n  if (isListDraggable && dragAndDropHooks) {\n    dragState = dragAndDropHooks.useDraggableCollectionState!({\n      collection,\n      selectionManager,\n      preview: dragAndDropHooks.renderDragPreview ? preview : undefined\n    });\n    dragAndDropHooks.useDraggableCollection!({}, dragState, ref);\n\n    let DragPreview = dragAndDropHooks.DragPreview!;\n    dragPreview = dragAndDropHooks.renderDragPreview\n      ? <DragPreview ref={preview}>{dragAndDropHooks.renderDragPreview}</DragPreview>\n      : null;\n  }\n\n  if (isListDroppable && dragAndDropHooks) {\n    dropState = dragAndDropHooks.useDroppableCollectionState!({\n      collection,\n      selectionManager\n    });\n\n    let keyboardDelegate = new ListKeyboardDelegate({\n      collection,\n      disabledKeys: selectionManager.disabledKeys,\n      disabledBehavior: selectionManager.disabledBehavior,\n      ref\n    });\n    let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection, ref, {layout, direction});\n    droppableCollection = dragAndDropHooks.useDroppableCollection!({\n      keyboardDelegate,\n      dropTargetDelegate\n    }, dropState, ref);\n\n    isRootDropTarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  let {focusProps, isFocused, isFocusVisible} = useFocusRing();\n  let renderValues = {\n    isDropTarget: isRootDropTarget,\n    isEmpty: state.collection.size === 0,\n    isFocused,\n    isFocusVisible,\n    layout,\n    state\n  };\n  let renderProps = useRenderProps({\n    className: props.className,\n    style: props.style,\n    defaultClassName: 'react-aria-GridList',\n    values: renderValues\n  });\n\n  let emptyState: ReactNode = null;\n  let emptyStatePropOverrides: HTMLAttributes<HTMLElement> | null = null;\n  if (state.collection.size === 0 && props.renderEmptyState) {\n    let content = props.renderEmptyState(renderValues);\n    emptyState = (\n      <div role=\"row\" style={{display: 'contents'}}>\n        <div role=\"gridcell\" style={{display: 'contents'}}>\n          {content}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <FocusScope>\n      <div\n        {...filterDOMProps(props)}\n        {...renderProps}\n        {...mergeProps(gridProps, focusProps, droppableCollection?.collectionProps, emptyStatePropOverrides)}\n        ref={ref}\n        slot={props.slot || undefined}\n        onScroll={props.onScroll}\n        data-drop-target={isRootDropTarget || undefined}\n        data-empty={state.collection.size === 0 || undefined}\n        data-focused={isFocused || undefined}\n        data-focus-visible={isFocusVisible || undefined}\n        data-layout={layout}>\n        <Provider\n          values={[\n            [ListStateContext, state],\n            [DragAndDropContext, {dragAndDropHooks, dragState, dropState}],\n            [DropIndicatorContext, {render: GridListDropIndicatorWrapper}]\n          ]}>\n          {isListDroppable && <RootDropIndicator />}\n          <CollectionRoot\n            collection={collection}\n            scrollRef={ref}\n            persistedKeys={useDndPersistedKeys(selectionManager, dragAndDropHooks, dropState)}\n            renderDropIndicator={useRenderDropIndicator(dragAndDropHooks, dropState)} />\n        </Provider>\n        {emptyState}\n        {dragPreview}\n      </div>\n    </FocusScope>\n  );\n}\n\n/**\n * A grid list displays a list of interactive items, with support for keyboard navigation,\n * single or multiple selection, and row actions.\n */\nconst _GridList = /*#__PURE__*/ (forwardRef as forwardRefType)(GridList);\nexport {_GridList as GridList};\n\nexport interface GridListItemRenderProps extends ItemRenderProps {}\n\nexport interface GridListItemProps<T = object> extends RenderProps<GridListItemRenderProps>, LinkDOMProps, HoverEvents {\n  /** The unique id of the item. */\n  id?: Key,\n  /** The object value that this item represents. When using dynamic collections, this is set automatically. */\n  value?: T,\n  /** A string representation of the item's contents, used for features like typeahead. */\n  textValue?: string,\n  /** Whether the item is disabled. */\n  isDisabled?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: () => void\n}\n\n/**\n * A GridListItem represents an individual item in a GridList.\n */\nexport const GridListItem = /*#__PURE__*/ createLeafComponent('item', function GridListItem<T extends object>(props: GridListItemProps<T>, forwardedRef: ForwardedRef<HTMLDivElement>, item: Node<T>) {\n  let state = useContext(ListStateContext)!;\n  let {dragAndDropHooks, dragState, dropState} = useContext(DragAndDropContext);\n  let ref = useObjectRef<HTMLDivElement>(forwardedRef);\n  let {isVirtualized} = useContext(CollectionRendererContext);\n  let {rowProps, gridCellProps, descriptionProps, ...states} = useGridListItem(\n    {\n      node: item,\n      shouldSelectOnPressUp: !!dragState,\n      isVirtualized\n    },\n    state,\n    ref\n  );\n\n  let {hoverProps, isHovered} = useHover({\n    isDisabled: !states.allowsSelection && !states.hasAction,\n    onHoverStart: item.props.onHoverStart,\n    onHoverChange: item.props.onHoverChange,\n    onHoverEnd: item.props.onHoverEnd\n  });\n\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let {checkboxProps} = useGridListSelectionCheckbox(\n    {key: item.key},\n    state\n  );\n\n  let buttonProps = state.selectionManager.disabledBehavior === 'all' && states.isDisabled ? {isDisabled: true} : {};\n\n  let draggableItem: DraggableItemResult | null = null;\n  if (dragState && dragAndDropHooks) {\n    draggableItem = dragAndDropHooks.useDraggableItem!({key: item.key, hasDragButton: true}, dragState);\n  }\n\n  let dropIndicator: DropIndicatorAria | null = null;\n  let dropIndicatorRef = useRef<HTMLDivElement>(null);\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  if (dropState && dragAndDropHooks) {\n    dropIndicator = dragAndDropHooks.useDropIndicator!({\n      target: {type: 'item', key: item.key, dropPosition: 'on'}\n    }, dropState, dropIndicatorRef);\n  }\n\n  let isDragging = dragState && dragState.isDragging(item.key);\n  let renderProps = useRenderProps({\n    ...props,\n    id: undefined,\n    children: item.rendered,\n    defaultClassName: 'react-aria-GridListItem',\n    values: {\n      ...states,\n      isHovered,\n      isFocusVisible,\n      selectionMode: state.selectionManager.selectionMode,\n      selectionBehavior: state.selectionManager.selectionBehavior,\n      allowsDragging: !!dragState,\n      isDragging,\n      isDropTarget: dropIndicator?.isDropTarget\n    }\n  });\n\n  let dragButtonRef = useRef<HTMLButtonElement>(null);\n  useEffect(() => {\n    if (dragState && !dragButtonRef.current) {\n      console.warn('Draggable items in a GridList must contain a <Button slot=\"drag\"> element so that keyboard and screen reader users can drag them.');\n    }\n  // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (!item.textValue) {\n      console.warn('A `textValue` prop is required for <GridListItem> elements with non-plain text children in order to support accessibility features such as type to select.');\n    }\n  }, [item.textValue]);\n\n  return (\n    <>\n      {dropIndicator && !dropIndicator.isHidden &&\n        <div role=\"row\" style={{position: 'absolute'}}>\n          <div role=\"gridcell\">\n            <div role=\"button\" {...visuallyHiddenProps} {...dropIndicator?.dropIndicatorProps} ref={dropIndicatorRef} />\n          </div>\n        </div>\n      }\n      <div\n        {...mergeProps(filterDOMProps(props as any), rowProps, focusProps, hoverProps, draggableItem?.dragProps)}\n        {...renderProps}\n        ref={ref}\n        data-selected={states.isSelected || undefined}\n        data-disabled={states.isDisabled || undefined}\n        data-hovered={isHovered || undefined}\n        data-focused={states.isFocused || undefined}\n        data-focus-visible={isFocusVisible || undefined}\n        data-pressed={states.isPressed || undefined}\n        data-allows-dragging={!!dragState || undefined}\n        data-dragging={isDragging || undefined}\n        data-drop-target={dropIndicator?.isDropTarget || undefined}\n        data-selection-mode={state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode}>\n        <div {...gridCellProps} style={{display: 'contents'}}>\n          <Provider\n            values={[\n              [CheckboxContext, {\n                slots: {\n                  selection: checkboxProps\n                }\n              }],\n              [ButtonContext, {\n                slots: {\n                  [DEFAULT_SLOT]: buttonProps,\n                  drag: {\n                    ...draggableItem?.dragButtonProps,\n                    ref: dragButtonRef,\n                    style: {\n                      pointerEvents: 'none'\n                    }\n                  }\n                }\n              }],\n              [TextContext, {\n                slots: {\n                  [DEFAULT_SLOT]: {},\n                  description: descriptionProps\n                }\n              }],\n              [CollectionRendererContext, DefaultCollectionRenderer],\n              [ListStateContext, null]\n            ]}>\n            {renderProps.children}\n          </Provider>\n        </div>\n      </div>\n    </>\n  );\n});\n\nfunction GridListDropIndicatorWrapper(props: DropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  ref = useObjectRef(ref);\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext);\n  let buttonRef = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps, isHidden, isDropTarget} = dragAndDropHooks!.useDropIndicator!(\n    props,\n    dropState!,\n    buttonRef\n  );\n\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <GridListDropIndicatorForwardRef {...props} dropIndicatorProps={dropIndicatorProps} isDropTarget={isDropTarget} buttonRef={buttonRef} ref={ref} />\n  );\n}\n\ninterface GridListDropIndicatorProps extends DropIndicatorProps {\n  dropIndicatorProps: React.HTMLAttributes<HTMLElement>,\n  isDropTarget: boolean,\n  buttonRef: RefObject<HTMLDivElement | null>\n}\n\nfunction GridListDropIndicator(props: GridListDropIndicatorProps, ref: ForwardedRef<HTMLElement>) {\n  let {\n    dropIndicatorProps,\n    isDropTarget,\n    buttonRef,\n    ...otherProps\n  } = props;\n\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  let renderProps = useRenderProps({\n    ...otherProps,\n    defaultClassName: 'react-aria-DropIndicator',\n    values: {\n      isDropTarget\n    }\n  });\n\n  return (\n    <div\n      {...renderProps}\n      role=\"row\"\n      ref={ref as RefObject<HTMLDivElement | null>}\n      data-drop-target={isDropTarget || undefined}>\n      <div role=\"gridcell\">\n        <div {...visuallyHiddenProps} role=\"button\" {...dropIndicatorProps} ref={buttonRef} />\n        {renderProps.children}\n      </div>\n    </div>\n  );\n}\n\nconst GridListDropIndicatorForwardRef = forwardRef(GridListDropIndicator);\n\nfunction RootDropIndicator() {\n  let {dragAndDropHooks, dropState} = useContext(DragAndDropContext);\n  let ref = useRef<HTMLDivElement>(null);\n  let {dropIndicatorProps} = dragAndDropHooks!.useDropIndicator!({\n    target: {type: 'root'}\n  }, dropState!, ref);\n  let isDropTarget = dropState!.isDropTarget({type: 'root'});\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  if (!isDropTarget && dropIndicatorProps['aria-hidden']) {\n    return null;\n  }\n\n  return (\n    <div role=\"row\" aria-hidden={dropIndicatorProps['aria-hidden']} style={{position: 'absolute'}}>\n      <div role=\"gridcell\">\n        <div role=\"button\" {...visuallyHiddenProps} {...dropIndicatorProps} ref={ref} />\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}