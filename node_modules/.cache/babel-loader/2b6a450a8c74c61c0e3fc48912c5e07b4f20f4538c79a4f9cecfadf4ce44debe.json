{"ast":null,"code":"import { CheckboxGroupContext as $8c8ab388b155237e$export$baf37c4be89255b8 } from \"./context.mjs\";\nimport \"./vars.a2ced2df.css\";\nimport $cvQES$checkbox_vars_cssmodulejs from \"./checkbox_vars_css.mjs\";\nimport { useContextProps as $cvQES$useContextProps, CheckboxContext as $cvQES$CheckboxContext } from \"react-aria-components\";\nimport $cvQES$spectrumiconsuiCheckmarkSmall from \"@spectrum-icons/ui/CheckmarkSmall\";\nimport { useFocusableRef as $cvQES$useFocusableRef, useStyleProps as $cvQES$useStyleProps, classNames as $cvQES$classNames } from \"@react-spectrum/utils\";\nimport $cvQES$spectrumiconsuiDashSmall from \"@spectrum-icons/ui/DashSmall\";\nimport { FocusRing as $cvQES$FocusRing } from \"@react-aria/focus\";\nimport $cvQES$react, { useRef as $cvQES$useRef, useContext as $cvQES$useContext, forwardRef as $cvQES$forwardRef } from \"react\";\nimport { useCheckboxGroupItem as $cvQES$useCheckboxGroupItem, useCheckbox as $cvQES$useCheckbox } from \"@react-aria/checkbox\";\nimport { useFormProps as $cvQES$useFormProps } from \"@react-spectrum/form\";\nimport { useHover as $cvQES$useHover } from \"@react-aria/interactions\";\nimport { useProviderProps as $cvQES$useProviderProps } from \"@react-spectrum/provider\";\nimport { useToggleState as $cvQES$useToggleState } from \"@react-stately/toggle\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $25b6292d81af2844$var$Checkbox(props, ref) {\n  let originalProps = props;\n  let inputRef = (0, $cvQES$useRef)(null);\n  let domRef = (0, $cvQES$useFocusableRef)(ref, inputRef);\n  [props, domRef] = (0, $cvQES$useContextProps)(props, domRef, (0, $cvQES$CheckboxContext));\n  props = (0, $cvQES$useProviderProps)(props);\n  props = (0, $cvQES$useFormProps)(props);\n  let {\n    isIndeterminate = false,\n    isEmphasized = false,\n    autoFocus: autoFocus,\n    children: children,\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $cvQES$useStyleProps)(otherProps);\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  let groupState = (0, $cvQES$useContext)((0, $8c8ab388b155237e$export$baf37c4be89255b8));\n  let {\n    inputProps: inputProps,\n    isInvalid: isInvalid,\n    isDisabled: isDisabled\n  } = groupState ? (0, $cvQES$useCheckboxGroupItem)({\n    ...props,\n    // Value is optional for standalone checkboxes, but required for CheckboxGroup items;\n    // it's passed explicitly here to avoid typescript error (requires ignore).\n    // @ts-ignore\n    value: props.value,\n    // Only pass isRequired and validationState to react-aria if they came from\n    // the props for this individual checkbox, and not from the group via context.\n    isRequired: originalProps.isRequired,\n    validationState: originalProps.validationState,\n    isInvalid: originalProps.isInvalid\n  }, groupState, inputRef) : (0, $cvQES$useCheckbox)(props, (0, $cvQES$useToggleState)(props), inputRef);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $cvQES$useHover)({\n    isDisabled: isDisabled\n  });\n  let markIcon = isIndeterminate ? /*#__PURE__*/(0, $cvQES$react).createElement((0, $cvQES$spectrumiconsuiDashSmall), {\n    UNSAFE_className: (0, $cvQES$classNames)((0, $parcel$interopDefault($cvQES$checkbox_vars_cssmodulejs)), 'spectrum-Checkbox-partialCheckmark')\n  }) : /*#__PURE__*/(0, $cvQES$react).createElement((0, $cvQES$spectrumiconsuiCheckmarkSmall), {\n    UNSAFE_className: (0, $cvQES$classNames)((0, $parcel$interopDefault($cvQES$checkbox_vars_cssmodulejs)), 'spectrum-Checkbox-checkmark')\n  });\n  if (groupState) {\n    for (let key of ['isSelected', 'defaultSelected', 'isEmphasized']) if (originalProps[key] != null) console.warn(`${key} is unsupported on individual <Checkbox> elements within a <CheckboxGroup>. Please apply these props to the group instead.`);\n    if (props.value == null) console.warn('A <Checkbox> element within a <CheckboxGroup> requires a `value` property.');\n  }\n  return /*#__PURE__*/(0, $cvQES$react).createElement(\"label\", {\n    ...styleProps,\n    ...hoverProps,\n    ref: domRef,\n    className: (0, $cvQES$classNames)((0, $parcel$interopDefault($cvQES$checkbox_vars_cssmodulejs)), 'spectrum-Checkbox', {\n      'is-checked': inputProps.checked,\n      'is-indeterminate': isIndeterminate,\n      'spectrum-Checkbox--quiet': !isEmphasized,\n      'is-invalid': isInvalid,\n      'is-disabled': isDisabled,\n      'is-hovered': isHovered\n    }, styleProps.className)\n  }, /*#__PURE__*/(0, $cvQES$react).createElement((0, $cvQES$FocusRing), {\n    focusRingClass: (0, $cvQES$classNames)((0, $parcel$interopDefault($cvQES$checkbox_vars_cssmodulejs)), 'focus-ring'),\n    autoFocus: autoFocus\n  }, /*#__PURE__*/(0, $cvQES$react).createElement(\"input\", {\n    ...inputProps,\n    ref: inputRef,\n    className: (0, $cvQES$classNames)((0, $parcel$interopDefault($cvQES$checkbox_vars_cssmodulejs)), 'spectrum-Checkbox-input')\n  })), /*#__PURE__*/(0, $cvQES$react).createElement(\"span\", {\n    className: (0, $cvQES$classNames)((0, $parcel$interopDefault($cvQES$checkbox_vars_cssmodulejs)), 'spectrum-Checkbox-box')\n  }, markIcon), children && /*#__PURE__*/(0, $cvQES$react).createElement(\"span\", {\n    className: (0, $cvQES$classNames)((0, $parcel$interopDefault($cvQES$checkbox_vars_cssmodulejs)), 'spectrum-Checkbox-label')\n  }, children));\n}\n/**\n * Checkboxes allow users to select multiple items from a list of individual items,\n * or to mark one individual item as selected.\n */\nlet $25b6292d81af2844$export$48513f6b9f8ce62d = /*#__PURE__*/(0, $cvQES$forwardRef)($25b6292d81af2844$var$Checkbox);\nexport { $25b6292d81af2844$export$48513f6b9f8ce62d as Checkbox };","map":{"version":3,"names":["$25b6292d81af2844$var$Checkbox","props","ref","originalProps","inputRef","$cvQES$useRef","domRef","$cvQES$useFocusableRef","$cvQES$useContextProps","$cvQES$CheckboxContext","$cvQES$useProviderProps","$cvQES$useFormProps","isIndeterminate","isEmphasized","autoFocus","children","otherProps","styleProps","$cvQES$useStyleProps","groupState","$cvQES$useContext","$8c8ab388b155237e$export$baf37c4be89255b8","inputProps","isInvalid","isDisabled","$cvQES$useCheckboxGroupItem","value","isRequired","validationState","$cvQES$useCheckbox","$cvQES$useToggleState","hoverProps","isHovered","$cvQES$useHover","markIcon","$cvQES$react","createElement","$cvQES$spectrumiconsuiDashSmall","UNSAFE_className","$cvQES$classNames","$parcel$interopDefault","$cvQES$checkbox_vars_cssmodulejs","$cvQES$spectrumiconsuiCheckmarkSmall","key","console","warn","className","checked","$cvQES$FocusRing","focusRingClass","$25b6292d81af2844$export$48513f6b9f8ce62d","$cvQES$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/checkbox/dist/packages/@react-spectrum/checkbox/src/Checkbox.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxContext, useContextProps} from 'react-aria-components';\nimport {CheckboxGroupContext} from './context';\nimport CheckmarkSmall from '@spectrum-icons/ui/CheckmarkSmall';\nimport {classNames, useFocusableRef, useStyleProps} from '@react-spectrum/utils';\nimport DashSmall from '@spectrum-icons/ui/DashSmall';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\nimport React, {forwardRef, useContext, useRef} from 'react';\nimport {SpectrumCheckboxProps} from '@react-types/checkbox';\nimport styles from '@adobe/spectrum-css-temp/components/checkbox/vars.css';\nimport {useCheckbox, useCheckboxGroupItem} from '@react-aria/checkbox';\nimport {useFormProps} from '@react-spectrum/form';\nimport {useHover} from '@react-aria/interactions';\nimport {useProviderProps} from '@react-spectrum/provider';\nimport {useToggleState} from '@react-stately/toggle';\n\nfunction Checkbox(props: SpectrumCheckboxProps, ref: FocusableRef<HTMLLabelElement>) {\n  let originalProps = props;\n  let inputRef = useRef<HTMLInputElement>(null);\n  let domRef = useFocusableRef(ref, inputRef);\n\n  [props, domRef] = useContextProps(props, domRef, CheckboxContext);\n  props = useProviderProps(props);\n  props = useFormProps(props);\n  let {\n    isIndeterminate = false,\n    isEmphasized = false,\n    autoFocus,\n    children,\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  let groupState = useContext(CheckboxGroupContext);\n  let {inputProps, isInvalid, isDisabled} = groupState\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    ? useCheckboxGroupItem({\n      ...props,\n      // Value is optional for standalone checkboxes, but required for CheckboxGroup items;\n      // it's passed explicitly here to avoid typescript error (requires ignore).\n      // @ts-ignore\n      value: props.value,\n      // Only pass isRequired and validationState to react-aria if they came from\n      // the props for this individual checkbox, and not from the group via context.\n      isRequired: originalProps.isRequired,\n      validationState: originalProps.validationState,\n      isInvalid: originalProps.isInvalid\n    }, groupState, inputRef)\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    : useCheckbox(props, useToggleState(props), inputRef);\n\n  let {hoverProps, isHovered} = useHover({isDisabled});\n\n  let markIcon = isIndeterminate\n    ? <DashSmall UNSAFE_className={classNames(styles, 'spectrum-Checkbox-partialCheckmark')} />\n    : <CheckmarkSmall UNSAFE_className={classNames(styles, 'spectrum-Checkbox-checkmark')} />;\n\n  if (groupState) {\n    for (let key of ['isSelected', 'defaultSelected', 'isEmphasized']) {\n      if (originalProps[key] != null) {\n        console.warn(`${key} is unsupported on individual <Checkbox> elements within a <CheckboxGroup>. Please apply these props to the group instead.`);\n      }\n    }\n    if (props.value == null) {\n      console.warn('A <Checkbox> element within a <CheckboxGroup> requires a `value` property.');\n    }\n  }\n\n  return (\n    <label\n      {...styleProps}\n      {...hoverProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-Checkbox',\n          {\n            'is-checked': inputProps.checked,\n            'is-indeterminate': isIndeterminate,\n            'spectrum-Checkbox--quiet': !isEmphasized,\n            'is-invalid': isInvalid,\n            'is-disabled': isDisabled,\n            'is-hovered': isHovered\n          },\n          styleProps.className\n        )\n      }>\n      <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n        <input\n          {...inputProps}\n          ref={inputRef}\n          className={classNames(styles, 'spectrum-Checkbox-input')} />\n      </FocusRing>\n      <span className={classNames(styles, 'spectrum-Checkbox-box')}>{markIcon}</span>\n      {children && (\n        <span className={classNames(styles, 'spectrum-Checkbox-label')}>\n          {children}\n        </span>\n      )}\n    </label>\n  );\n}\n/**\n * Checkboxes allow users to select multiple items from a list of individual items,\n * or to mark one individual item as selected.\n */\nlet _Checkbox = forwardRef(Checkbox);\nexport {_Checkbox as Checkbox};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}