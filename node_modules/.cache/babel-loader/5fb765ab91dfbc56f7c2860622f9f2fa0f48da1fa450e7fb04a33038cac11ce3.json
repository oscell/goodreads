{"ast":null,"code":"import { useDraggableCollection as $ejrPO$useDraggableCollection, useDraggableItem as $ejrPO$useDraggableItem, DragPreview as $ejrPO$DragPreview, useDroppableItem as $ejrPO$useDroppableItem, useDroppableCollection as $ejrPO$useDroppableCollection, useDropIndicator as $ejrPO$useDropIndicator, isVirtualDragging as $ejrPO$isVirtualDragging } from \"@react-aria/dnd\";\nimport { useDraggableCollectionState as $ejrPO$useDraggableCollectionState, useDroppableCollectionState as $ejrPO$useDroppableCollectionState } from \"@react-stately/dnd\";\nimport { useMemo as $ejrPO$useMemo } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $8d44a09a765f4c9c$export$2cfc5be7a55829f6(options) {\n  let dragAndDropHooks = (0, $ejrPO$useMemo)(() => {\n    let {\n      onDrop: onDrop,\n      onInsert: onInsert,\n      onItemDrop: onItemDrop,\n      onReorder: onReorder,\n      onRootDrop: onRootDrop,\n      getItems: getItems,\n      renderPreview: renderPreview\n    } = options;\n    let isDraggable = !!getItems;\n    let isDroppable = !!(onDrop || onInsert || onItemDrop || onReorder || onRootDrop);\n    let hooks = {};\n    if (isDraggable) {\n      hooks.useDraggableCollectionState = function useDraggableCollectionStateOverride(props) {\n        return (0, $ejrPO$useDraggableCollectionState)({\n          ...props,\n          ...options\n        });\n      };\n      hooks.useDraggableCollection = (0, $ejrPO$useDraggableCollection);\n      hooks.useDraggableItem = (0, $ejrPO$useDraggableItem);\n      hooks.DragPreview = (0, $ejrPO$DragPreview);\n      hooks.renderPreview = renderPreview;\n    }\n    if (isDroppable) {\n      hooks.useDroppableCollectionState = function useDroppableCollectionStateOverride(props) {\n        return (0, $ejrPO$useDroppableCollectionState)({\n          ...props,\n          ...options\n        });\n      };\n      hooks.useDroppableItem = (0, $ejrPO$useDroppableItem);\n      hooks.useDroppableCollection = function useDroppableCollectionOverride(props, state, ref) {\n        return (0, $ejrPO$useDroppableCollection)({\n          ...props,\n          ...options\n        }, state, ref);\n      };\n      hooks.useDropIndicator = (0, $ejrPO$useDropIndicator);\n    }\n    if (isDraggable || isDroppable) hooks.isVirtualDragging = (0, $ejrPO$isVirtualDragging);\n    return hooks;\n  }, [options]);\n  return {\n    dragAndDropHooks: dragAndDropHooks\n  };\n}\nexport { $8d44a09a765f4c9c$export$2cfc5be7a55829f6 as useDragAndDrop };","map":{"version":3,"names":["$8d44a09a765f4c9c$export$2cfc5be7a55829f6","options","dragAndDropHooks","$ejrPO$useMemo","onDrop","onInsert","onItemDrop","onReorder","onRootDrop","getItems","renderPreview","isDraggable","isDroppable","hooks","useDraggableCollectionState","useDraggableCollectionStateOverride","props","$ejrPO$useDraggableCollectionState","useDraggableCollection","$ejrPO$useDraggableCollection","useDraggableItem","$ejrPO$useDraggableItem","DragPreview","$ejrPO$DragPreview","useDroppableCollectionState","useDroppableCollectionStateOverride","$ejrPO$useDroppableCollectionState","useDroppableItem","$ejrPO$useDroppableItem","useDroppableCollection","useDroppableCollectionOverride","state","ref","$ejrPO$useDroppableCollection","useDropIndicator","$ejrPO$useDropIndicator","isVirtualDragging","$ejrPO$isVirtualDragging"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/dnd/dist/packages/@react-spectrum/dnd/src/useDragAndDrop.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  DraggableCollectionOptions,\n  DraggableItemProps,\n  DraggableItemResult,\n  DragPreview,\n  DropIndicatorAria,\n  DropIndicatorProps,\n  DroppableCollectionOptions,\n  DroppableCollectionResult,\n  DroppableItemOptions,\n  DroppableItemResult,\n  isVirtualDragging,\n  useDraggableCollection,\n  useDraggableItem,\n  useDropIndicator,\n  useDroppableCollection,\n  useDroppableItem\n} from '@react-aria/dnd';\nimport {DraggableCollectionProps, DragItem, DroppableCollectionProps, Key, RefObject} from '@react-types/shared';\nimport {\n  DraggableCollectionState,\n  DraggableCollectionStateOptions,\n  DroppableCollectionState,\n  DroppableCollectionStateOptions,\n  useDraggableCollectionState,\n  useDroppableCollectionState\n} from '@react-stately/dnd';\nimport {JSX, useMemo} from 'react';\n\ninterface DraggableCollectionStateOpts extends Omit<DraggableCollectionStateOptions, 'getItems'> {}\n\ninterface DragHooks {\n  useDraggableCollectionState?: (props: DraggableCollectionStateOpts) => DraggableCollectionState,\n  useDraggableCollection?: (props: DraggableCollectionOptions, state: DraggableCollectionState, ref: RefObject<HTMLElement | null>) => void,\n  useDraggableItem?: (props: DraggableItemProps, state: DraggableCollectionState) => DraggableItemResult,\n  DragPreview?: typeof DragPreview\n}\n\ninterface DropHooks {\n  useDroppableCollectionState?: (props: DroppableCollectionStateOptions) => DroppableCollectionState,\n  useDroppableCollection?: (props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) => DroppableCollectionResult,\n  useDroppableItem?: (options: DroppableItemOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) => DroppableItemResult,\n  useDropIndicator?: (props: DropIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) => DropIndicatorAria\n}\n\nexport interface DragAndDropHooks {\n  /** Drag and drop hooks for the collection element.  */\n  dragAndDropHooks: DragHooks & DropHooks & {isVirtualDragging?: () => boolean, renderPreview?: (keys: Set<Key>, draggedKey: Key) => JSX.Element}\n}\n\nexport interface DragAndDropOptions extends Omit<DraggableCollectionProps, 'preview' | 'getItems'>, DroppableCollectionProps {\n  /**\n   * A function that returns the items being dragged. If not specified, we assume that the collection is not draggable.\n   * @default () => []\n   */\n  getItems?: (keys: Set<Key>) => DragItem[],\n  /** Provide a custom drag preview. `draggedKey` represents the key of the item the user actually dragged. */\n  renderPreview?: (keys: Set<Key>, draggedKey: Key) => JSX.Element\n}\n\n/**\n * Provides the hooks required to enable drag and drop behavior for a drag and drop compatible React Spectrum component.\n */\nexport function useDragAndDrop(options: DragAndDropOptions): DragAndDropHooks {\n  let dragAndDropHooks = useMemo(() => {\n    let {\n      onDrop,\n      onInsert,\n      onItemDrop,\n      onReorder,\n      onRootDrop,\n      getItems,\n      renderPreview\n     } = options;\n\n    let isDraggable = !!getItems;\n    let isDroppable = !!(onDrop || onInsert || onItemDrop || onReorder || onRootDrop);\n\n    let hooks = {} as DragHooks & DropHooks & {isVirtualDragging?: () => boolean, renderPreview?: (keys: Set<Key>, draggedKey: Key) => JSX.Element};\n    if (isDraggable) {\n      hooks.useDraggableCollectionState = function useDraggableCollectionStateOverride(props: DraggableCollectionStateOptions) {\n        return useDraggableCollectionState({...props, ...options});\n      };\n      hooks.useDraggableCollection = useDraggableCollection;\n      hooks.useDraggableItem = useDraggableItem;\n      hooks.DragPreview = DragPreview;\n      hooks.renderPreview = renderPreview;\n    }\n\n    if (isDroppable) {\n      hooks.useDroppableCollectionState = function useDroppableCollectionStateOverride(props: DroppableCollectionStateOptions) {\n        return useDroppableCollectionState({...props, ...options});\n      };\n      hooks.useDroppableItem = useDroppableItem;\n      hooks.useDroppableCollection = function useDroppableCollectionOverride(props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) {\n        return useDroppableCollection({...props, ...options}, state, ref);\n      };\n      hooks.useDropIndicator = useDropIndicator;\n    }\n\n    if (isDraggable || isDroppable) {\n      hooks.isVirtualDragging = isVirtualDragging;\n    }\n\n    return hooks;\n  }, [options]);\n\n  return {\n    dragAndDropHooks: dragAndDropHooks\n  };\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AA2EO,SAASA,0CAAeC,OAA2B;EACxD,IAAIC,gBAAA,GAAmB,IAAAC,cAAM,EAAE;IAC7B,IAAI;MAAAC,MAAA,EACFA,MAAM;MAAAC,QAAA,EACNA,QAAQ;MAAAC,UAAA,EACRA,UAAU;MAAAC,SAAA,EACVA,SAAS;MAAAC,UAAA,EACTA,UAAU;MAAAC,QAAA,EACVA,QAAQ;MAAAC,aAAA,EACRA;IAAa,CACb,GAAGT,OAAA;IAEL,IAAIU,WAAA,GAAc,CAAC,CAACF,QAAA;IACpB,IAAIG,WAAA,GAAc,CAAC,EAAER,MAAA,IAAUC,QAAA,IAAYC,UAAA,IAAcC,SAAA,IAAaC,UAAS;IAE/E,IAAIK,KAAA,GAAQ,CAAC;IACb,IAAIF,WAAA,EAAa;MACfE,KAAA,CAAMC,2BAA2B,GAAG,SAASC,oCAAoCC,KAAsC;QACrH,OAAO,IAAAC,kCAA0B,EAAE;UAAC,GAAGD,KAAK;UAAE,GAAGf;QAAO;MAC1D;MACAY,KAAA,CAAMK,sBAAsB,IAAG,GAAAC,6BAAqB;MACpDN,KAAA,CAAMO,gBAAgB,IAAG,GAAAC,uBAAe;MACxCR,KAAA,CAAMS,WAAW,IAAG,GAAAC,kBAAU;MAC9BV,KAAA,CAAMH,aAAa,GAAGA,aAAA;IACxB;IAEA,IAAIE,WAAA,EAAa;MACfC,KAAA,CAAMW,2BAA2B,GAAG,SAASC,oCAAoCT,KAAsC;QACrH,OAAO,IAAAU,kCAA0B,EAAE;UAAC,GAAGV,KAAK;UAAE,GAAGf;QAAO;MAC1D;MACAY,KAAA,CAAMc,gBAAgB,IAAG,GAAAC,uBAAe;MACxCf,KAAA,CAAMgB,sBAAsB,GAAG,SAASC,+BAA+Bd,KAAiC,EAAEe,KAA+B,EAAEC,GAAkC;QAC3K,OAAO,IAAAC,6BAAqB,EAAE;UAAC,GAAGjB,KAAK;UAAE,GAAGf;QAAO,GAAG8B,KAAA,EAAOC,GAAA;MAC/D;MACAnB,KAAA,CAAMqB,gBAAgB,IAAG,GAAAC,uBAAe;IAC1C;IAEA,IAAIxB,WAAA,IAAeC,WAAA,EACjBC,KAAA,CAAMuB,iBAAiB,IAAG,GAAAC,wBAAgB;IAG5C,OAAOxB,KAAA;EACT,GAAG,CAACZ,OAAA,CAAQ;EAEZ,OAAO;IACLC,gBAAA,EAAkBA;EACpB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}