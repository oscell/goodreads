{"ast":null,"code":"import \"./vars.ed1277c0.css\";\nimport $6cGum$image_vars_cssmodulejs from \"./image_vars_css.mjs\";\nimport { useSlotProps as $6cGum$useSlotProps, useStyleProps as $6cGum$useStyleProps, useDOMRef as $6cGum$useDOMRef, classNames as $6cGum$classNames } from \"@react-spectrum/utils\";\nimport { filterDOMProps as $6cGum$filterDOMProps } from \"@react-aria/utils\";\nimport $6cGum$react from \"react\";\nimport { useProviderProps as $6cGum$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// incomplete component for show right now\nfunction $77e0ac4d4aa3e5ef$var$Image(props, ref) {\n  /* Slots should be able to pass an alt for default behavior, but in Images, the child may know better. */let userProvidedAlt = props.alt;\n  props = (0, $6cGum$useSlotProps)(props, 'image');\n  props = (0, $6cGum$useProviderProps)(props);\n  let {\n    objectFit: objectFit,\n    src: src,\n    alt: alt,\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $6cGum$useStyleProps)(otherProps);\n  let domRef = (0, $6cGum$useDOMRef)(ref);\n  if (alt == null) console.warn('The `alt` prop was not provided to an image. Add `alt` text for screen readers, or set `alt=\"\"` prop to indicate that the image is decorative or redundant with displayed text and should not be announced by screen readers.');\n  return /*#__PURE__*/(0, $6cGum$react).createElement(\"div\", {\n    ...(0, $6cGum$filterDOMProps)(props),\n    ...styleProps,\n    className: (0, $6cGum$classNames)((0, $parcel$interopDefault($6cGum$image_vars_cssmodulejs)), styleProps.className),\n    style: {\n      ...styleProps.style,\n      overflow: 'hidden'\n    },\n    ref: domRef\n  }, /*#__PURE__*/(0, $6cGum$react).createElement(\"img\", {\n    src: src,\n    alt: userProvidedAlt || alt,\n    style: {\n      objectFit: objectFit\n    },\n    className: (0, $6cGum$classNames)((0, $parcel$interopDefault($6cGum$image_vars_cssmodulejs)), 'spectrum-Image-img'),\n    onError: props === null || props === void 0 ? void 0 : props.onError,\n    onLoad: props === null || props === void 0 ? void 0 : props.onLoad\n  }));\n}\n/**\n * Image is used to insert and display an image within a component.\n */\nconst $77e0ac4d4aa3e5ef$export$3e431a229df88919 = /*#__PURE__*/(0, $6cGum$react).forwardRef($77e0ac4d4aa3e5ef$var$Image);\nexport { $77e0ac4d4aa3e5ef$export$3e431a229df88919 as Image };","map":{"version":3,"names":["$77e0ac4d4aa3e5ef$var$Image","props","ref","userProvidedAlt","alt","$6cGum$useSlotProps","$6cGum$useProviderProps","objectFit","src","otherProps","styleProps","$6cGum$useStyleProps","domRef","$6cGum$useDOMRef","console","warn","$6cGum$react","createElement","$6cGum$filterDOMProps","className","$6cGum$classNames","$parcel$interopDefault","$6cGum$image_vars_cssmodulejs","style","overflow","onError","onLoad","$77e0ac4d4aa3e5ef$export$3e431a229df88919","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/image/dist/packages/@react-spectrum/image/src/Image.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {classNames, useDOMRef, useSlotProps, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport React from 'react';\nimport {SpectrumImageProps} from '@react-types/image';\nimport styles from '@adobe/spectrum-css-temp/components/image/vars.css';\nimport {useProviderProps} from '@react-spectrum/provider';\n\n// incomplete component for show right now\n\nfunction Image(props: SpectrumImageProps, ref: DOMRef<HTMLDivElement>) {\n  /* Slots should be able to pass an alt for default behavior, but in Images, the child may know better. */\n  let userProvidedAlt = props.alt;\n  props = useSlotProps(props, 'image');\n  props = useProviderProps(props);\n  let {\n    objectFit,\n    src,\n    alt,\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n  let domRef = useDOMRef(ref);\n\n  if (alt == null) {\n    console.warn(\n      'The `alt` prop was not provided to an image. ' +\n      'Add `alt` text for screen readers, or set `alt=\"\"` prop to indicate that the image ' +\n      'is decorative or redundant with displayed text and should not be announced by screen readers.'\n    );\n  }\n\n  return (\n    <div\n      {...filterDOMProps(props)}\n      {...styleProps}\n      className={classNames(styles, styleProps.className)}\n      style={{\n        ...styleProps.style,\n        overflow: 'hidden'\n      }}\n      ref={domRef}>\n      <img\n        src={src}\n        alt={userProvidedAlt || alt}\n        style={{objectFit}}\n        className={classNames(styles, 'spectrum-Image-img')} \n        onError={props?.onError}\n        onLoad={props?.onLoad} />\n    </div>\n  );\n}\n\n/**\n * Image is used to insert and display an image within a component.\n */\nconst _Image = React.forwardRef(Image);\nexport {_Image as Image};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;AAoBA;AAEA,SAASA,4BAAMC,KAAyB,EAAEC,GAA2B;EACnE,yGACA,IAAIC,eAAA,GAAkBF,KAAA,CAAMG,GAAG;EAC/BH,KAAA,GAAQ,IAAAI,mBAAW,EAAEJ,KAAA,EAAO;EAC5BA,KAAA,GAAQ,IAAAK,uBAAe,EAAEL,KAAA;EACzB,IAAI;IAAAM,SAAA,EACFA,SAAS;IAAAC,GAAA,EACTA,GAAG;IAAAJ,GAAA,EACHA,GAAG;IACH,GAAGK;EAAA,CACJ,GAAGR,KAAA;EACJ,IAAI;IAAAS,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEF,UAAA;EACjC,IAAIG,MAAA,GAAS,IAAAC,gBAAQ,EAAEX,GAAA;EAEvB,IAAIE,GAAA,IAAO,MACTU,OAAA,CAAQC,IAAI,CACV;EAMJ,oBACE,IAAAC,YAAA,EAAAC,aAAA,CAAC;IACE,GAAG,IAAAC,qBAAa,EAAEjB,KAAA,CAAM;IACxB,GAAGS,UAAU;IACdS,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,6BAAA,CAAK,GAAGZ,UAAA,CAAWS,SAAS;IAClDI,KAAA,EAAO;MACL,GAAGb,UAAA,CAAWa,KAAK;MACnBC,QAAA,EAAU;IACZ;IACAtB,GAAA,EAAKU;kBACL,IAAAI,YAAA,EAAAC,aAAA,CAAC;IACCT,GAAA,EAAKA,GAAA;IACLJ,GAAA,EAAKD,eAAA,IAAmBC,GAAA;IACxBmB,KAAA,EAAO;iBAAChB;IAAS;IACjBY,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,6BAAA,CAAK,GAAG;IAC9BG,OAAO,EAAExB,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOwB,OAAO;IACvBC,MAAM,EAAEzB,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOyB;;AAGvB;AAEA;;;AAGA,MAAMC,yCAAA,gBAAS,IAAAX,YAAI,EAAEY,UAAU,CAAC5B,2BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}