{"ast":null,"code":"import { filterDOMProps as $2nyUy$filterDOMProps } from \"@react-aria/utils\";\nimport $2nyUy$react from \"react\";\nimport { useSlotProps as $2nyUy$useSlotProps, useStyleProps as $2nyUy$useStyleProps } from \"@react-spectrum/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $88bb85359d3a4aed$export$d43c2e2ca9b2c105(props) {\n  props = (0, $2nyUy$useSlotProps)(props, 'illustration');\n  let {\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-hidden': ariaHidden,\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $2nyUy$useStyleProps)(otherProps);\n  let hasLabel = ariaLabel || ariaLabelledby;\n  if (!ariaHidden) ariaHidden = undefined;\n  return /*#__PURE__*/(0, $2nyUy$react).cloneElement(children, {\n    ...(0, $2nyUy$filterDOMProps)(otherProps),\n    ...styleProps,\n    focusable: 'false',\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-hidden': ariaHidden,\n    role: hasLabel ? 'img' : undefined\n  });\n}\nexport { $88bb85359d3a4aed$export$d43c2e2ca9b2c105 as Illustration };","map":{"version":3,"names":["$88bb85359d3a4aed$export$d43c2e2ca9b2c105","props","$2nyUy$useSlotProps","children","ariaLabel","ariaLabelledby","ariaHidden","otherProps","styleProps","$2nyUy$useStyleProps","hasLabel","undefined","$2nyUy$react","cloneElement","$2nyUy$filterDOMProps","focusable","role"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/icon/dist/packages/@react-spectrum/icon/src/Illustration.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMProps, StyleProps} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport React, {ReactElement} from 'react';\nimport {useSlotProps, useStyleProps} from '@react-spectrum/utils';\n\nexport interface IllustrationProps extends DOMProps, AriaLabelingProps, StyleProps {\n  /**\n   * A screen reader only label for the Illustration.\n   */\n  'aria-label'?: string,\n  /**\n   * The content to display. Should be an SVG.\n   */\n  children: ReactElement<any>,\n  /**\n   * A slot to place the illustration in.\n   * @default 'illustration'\n   */\n  slot?: string,\n  /**\n   * Indicates whether the element is exposed to an accessibility API.\n   */\n  'aria-hidden'?: boolean | 'false' | 'true'\n}\n\nexport type IllustrationPropsWithoutChildren = Omit<IllustrationProps, 'children'>;\n\n/**\n * Wrapper component for illustrations. Use this to wrap your svg element for a custom illustration.\n */\nexport function Illustration(props: IllustrationProps) {\n  props = useSlotProps(props, 'illustration');\n  let {\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-hidden': ariaHidden,\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n\n  let hasLabel = ariaLabel || ariaLabelledby;\n\n  if (!ariaHidden) {\n    ariaHidden = undefined;\n  }\n\n  return React.cloneElement(children, {\n    ...filterDOMProps(otherProps),\n    ...styleProps,\n    focusable: 'false',\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-hidden': ariaHidden,\n    role: hasLabel ? 'img' : undefined\n  });\n}\n"],"mappings":";;;;AAAA;;;;;;;;;;;;AA0CO,SAASA,0CAAaC,KAAwB;EACnDA,KAAA,GAAQ,IAAAC,mBAAW,EAAED,KAAA,EAAO;EAC5B,IAAI;IAAAE,QAAA,EACFA,QAAQ;IACR,cAAcC,SAAS;IACvB,mBAAmBC,cAAc;IACjC,eAAeC,UAAU;IACzB,GAAGC;EAAA,CACJ,GAAGN,KAAA;EACJ,IAAI;IAAAO,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEF,UAAA;EAEjC,IAAIG,QAAA,GAAWN,SAAA,IAAaC,cAAA;EAE5B,IAAI,CAACC,UAAA,EACHA,UAAA,GAAaK,SAAA;EAGf,oBAAO,IAAAC,YAAI,EAAEC,YAAY,CAACV,QAAA,EAAU;IAClC,GAAG,IAAAW,qBAAa,EAAEP,UAAA,CAAW;IAC7B,GAAGC,UAAU;IACbO,SAAA,EAAW;IACX,cAAcX,SAAA;IACd,mBAAmBC,cAAA;IACnB,eAAeC,UAAA;IACfU,IAAA,EAAMN,QAAA,GAAW,QAAQC;EAC3B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}