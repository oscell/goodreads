{"ast":null,"code":"import { clearGlobalDnDState as $7252cd45fc48c07c$export$70936501603e6c57, isInternalDropOperation as $7252cd45fc48c07c$export$78bf638634500fa5, setDraggingKeys as $7252cd45fc48c07c$export$72cb63bdda528276, useDragModality as $7252cd45fc48c07c$export$49bac5d6d4b352ea } from \"./utils.mjs\";\nimport $91Fvt$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useDrag as $8253ed7ece74b463$export$7941f8aafa4b6021 } from \"./useDrag.mjs\";\nimport { useDescription as $91Fvt$useDescription } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $91Fvt$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $fd98cf7cbf233429$var$MESSAGES = {\n  keyboard: {\n    selected: 'dragSelectedKeyboard',\n    notSelected: 'dragDescriptionKeyboard'\n  },\n  touch: {\n    selected: 'dragSelectedLongPress',\n    notSelected: 'dragDescriptionLongPress'\n  },\n  virtual: {\n    selected: 'dragDescriptionVirtual',\n    notSelected: 'dragDescriptionVirtual'\n  }\n};\nfunction $fd98cf7cbf233429$export$b35afafff42da2d9(props, state) {\n  let stringFormatter = (0, $91Fvt$useLocalizedStringFormatter)((0, $parcel$interopDefault($91Fvt$intlStringsmodulejs)), '@react-aria/dnd');\n  let isDisabled = state.isDisabled || state.selectionManager.isDisabled(props.key);\n  let {\n    dragProps: dragProps,\n    dragButtonProps: dragButtonProps\n  } = (0, $8253ed7ece74b463$export$7941f8aafa4b6021)({\n    getItems() {\n      return state.getItems(props.key);\n    },\n    preview: state.preview,\n    getAllowedDropOperations: state.getAllowedDropOperations,\n    hasDragButton: props.hasDragButton,\n    onDragStart(e) {\n      state.startDrag(props.key, e);\n      // Track draggingKeys for useDroppableCollection's default onDrop handler and useDroppableCollectionState's default getDropOperation\n      (0, $7252cd45fc48c07c$export$72cb63bdda528276)(state.draggingKeys);\n    },\n    onDragMove(e) {\n      state.moveDrag(e);\n    },\n    onDragEnd(e) {\n      let {\n        dropOperation: dropOperation\n      } = e;\n      let isInternal = dropOperation === 'cancel' ? false : (0, $7252cd45fc48c07c$export$78bf638634500fa5)();\n      state.endDrag({\n        ...e,\n        keys: state.draggingKeys,\n        isInternal: isInternal\n      });\n      (0, $7252cd45fc48c07c$export$70936501603e6c57)();\n    }\n  });\n  let item = state.collection.getItem(props.key);\n  let numKeysForDrag = state.getKeysForDrag(props.key).size;\n  let isSelected = numKeysForDrag > 1 && state.selectionManager.isSelected(props.key);\n  let dragButtonLabel;\n  let description;\n  // Override description to include selected item count.\n  let modality = (0, $7252cd45fc48c07c$export$49bac5d6d4b352ea)();\n  if (!props.hasDragButton && state.selectionManager.selectionMode !== 'none') {\n    let msg = $fd98cf7cbf233429$var$MESSAGES[modality][isSelected ? 'selected' : 'notSelected'];\n    if (props.hasAction && modality === 'keyboard') msg += 'Alt';\n    if (isSelected) description = stringFormatter.format(msg, {\n      count: numKeysForDrag\n    });else description = stringFormatter.format(msg);\n    // Remove the onClick handler from useDrag. Long pressing will be required on touch devices,\n    // and NVDA/JAWS are always in forms mode within collection components.\n    delete dragProps.onClick;\n  } else if (isSelected) dragButtonLabel = stringFormatter.format('dragSelectedItems', {\n    count: numKeysForDrag\n  });else {\n    var _state_collection_getTextValue, _state_collection;\n    var _state_collection_getTextValue1, _ref;\n    let itemText = (_ref = (_state_collection_getTextValue1 = (_state_collection_getTextValue = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue === void 0 ? void 0 : _state_collection_getTextValue.call(_state_collection, props.key)) !== null && _state_collection_getTextValue1 !== void 0 ? _state_collection_getTextValue1 : item === null || item === void 0 ? void 0 : item.textValue) !== null && _ref !== void 0 ? _ref : '';\n    dragButtonLabel = stringFormatter.format('dragItem', {\n      itemText: itemText\n    });\n  }\n  let descriptionProps = (0, $91Fvt$useDescription)(description);\n  if (description) Object.assign(dragProps, descriptionProps);\n  if (!props.hasDragButton && props.hasAction) {\n    let {\n      onKeyDownCapture: onKeyDownCapture,\n      onKeyUpCapture: onKeyUpCapture\n    } = dragProps;\n    if (modality === 'touch')\n      // Remove long press description if an action is present, because in that case long pressing selects the item.\n      delete dragProps['aria-describedby'];\n    // Require Alt key if there is a conflicting action.\n    dragProps.onKeyDownCapture = e => {\n      if (e.altKey) onKeyDownCapture === null || onKeyDownCapture === void 0 ? void 0 : onKeyDownCapture(e);\n    };\n    dragProps.onKeyUpCapture = e => {\n      if (e.altKey) onKeyUpCapture === null || onKeyUpCapture === void 0 ? void 0 : onKeyUpCapture(e);\n    };\n  }\n  return {\n    dragProps: isDisabled ? {} : dragProps,\n    dragButtonProps: {\n      ...dragButtonProps,\n      isDisabled: isDisabled,\n      'aria-label': dragButtonLabel\n    }\n  };\n}\nexport { $fd98cf7cbf233429$export$b35afafff42da2d9 as useDraggableItem };","map":{"version":3,"names":["$fd98cf7cbf233429$var$MESSAGES","keyboard","selected","notSelected","touch","virtual","$fd98cf7cbf233429$export$b35afafff42da2d9","props","state","stringFormatter","$91Fvt$useLocalizedStringFormatter","$parcel$interopDefault","$91Fvt$intlStringsmodulejs","isDisabled","selectionManager","key","dragProps","dragButtonProps","$8253ed7ece74b463$export$7941f8aafa4b6021","getItems","preview","getAllowedDropOperations","hasDragButton","onDragStart","e","startDrag","$7252cd45fc48c07c$export$72cb63bdda528276","draggingKeys","onDragMove","moveDrag","onDragEnd","dropOperation","isInternal","$7252cd45fc48c07c$export$78bf638634500fa5","endDrag","keys","$7252cd45fc48c07c$export$70936501603e6c57","item","collection","getItem","numKeysForDrag","getKeysForDrag","size","isSelected","dragButtonLabel","description","modality","$7252cd45fc48c07c$export$49bac5d6d4b352ea","selectionMode","msg","hasAction","format","count","onClick","_state_collection_getTextValue","_state_collection","_state_collection_getTextValue1","_ref","itemText","getTextValue","call","textValue","descriptionProps","$91Fvt$useDescription","Object","assign","onKeyDownCapture","onKeyUpCapture","altKey"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/dnd/dist/packages/@react-aria/dnd/src/useDraggableItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {clearGlobalDnDState, isInternalDropOperation, setDraggingKeys, useDragModality} from './utils';\nimport {DraggableCollectionState} from '@react-stately/dnd';\nimport {HTMLAttributes} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {Key} from '@react-types/shared';\nimport {useDescription} from '@react-aria/utils';\nimport {useDrag} from './useDrag';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DraggableItemProps {\n  /** The key of the draggable item within the collection. */\n  key: Key,\n  /**\n   * Whether the item has an explicit focusable drag affordance to initiate accessible drag and drop mode.\n   * If true, the dragProps will omit these event handlers, and they will be applied to dragButtonProps instead.\n   */\n  hasDragButton?: boolean,\n  /**\n   * Whether the item has a primary action (e.g. Enter key or long press) that would\n   * conflict with initiating accessible drag and drop. If true, the Alt key must be held to\n   * start dragging with a keyboard, and long press is disabled until selection mode is entered.\n   * This should be passed from the associated collection item hook (e.g. useOption, useGridListItem, etc.).\n   */\n  hasAction?: boolean\n}\n\nexport interface DraggableItemResult {\n  /** Props for the draggable item. */\n  dragProps: HTMLAttributes<HTMLElement>,\n  /** Props for the explicit drag button affordance, if any. */\n  dragButtonProps: AriaButtonProps\n}\n\nconst MESSAGES = {\n  keyboard: {\n    selected: 'dragSelectedKeyboard',\n    notSelected: 'dragDescriptionKeyboard'\n  },\n  touch: {\n    selected: 'dragSelectedLongPress',\n    notSelected: 'dragDescriptionLongPress'\n  },\n  virtual: {\n    selected: 'dragDescriptionVirtual',\n    notSelected: 'dragDescriptionVirtual'\n  }\n};\n\n/**\n * Handles drag interactions for an item within a draggable collection.\n */\nexport function useDraggableItem(props: DraggableItemProps, state: DraggableCollectionState): DraggableItemResult {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/dnd');\n  let isDisabled = state.isDisabled || state.selectionManager.isDisabled(props.key);\n  let {dragProps, dragButtonProps} = useDrag({\n    getItems() {\n      return state.getItems(props.key);\n    },\n    preview: state.preview,\n    getAllowedDropOperations: state.getAllowedDropOperations,\n    hasDragButton: props.hasDragButton,\n    onDragStart(e) {\n      state.startDrag(props.key, e);\n      // Track draggingKeys for useDroppableCollection's default onDrop handler and useDroppableCollectionState's default getDropOperation\n      setDraggingKeys(state.draggingKeys);\n    },\n    onDragMove(e) {\n      state.moveDrag(e);\n    },\n    onDragEnd(e) {\n      let {dropOperation} = e;\n      let isInternal = dropOperation === 'cancel' ? false : isInternalDropOperation();\n      state.endDrag({...e, keys: state.draggingKeys, isInternal});\n      clearGlobalDnDState();\n    }\n  });\n\n  let item = state.collection.getItem(props.key);\n  let numKeysForDrag = state.getKeysForDrag(props.key).size;\n  let isSelected = numKeysForDrag > 1 && state.selectionManager.isSelected(props.key);\n  let dragButtonLabel: string | undefined;\n  let description: string | undefined;\n\n  // Override description to include selected item count.\n  let modality = useDragModality();\n  if (!props.hasDragButton && state.selectionManager.selectionMode !== 'none') {\n    let msg = MESSAGES[modality][isSelected ? 'selected' : 'notSelected'];\n    if (props.hasAction && modality === 'keyboard') {\n      msg += 'Alt';\n    }\n\n    if (isSelected) {\n      description = stringFormatter.format(msg, {count: numKeysForDrag});\n    } else {\n      description = stringFormatter.format(msg);\n    }\n\n    // Remove the onClick handler from useDrag. Long pressing will be required on touch devices,\n    // and NVDA/JAWS are always in forms mode within collection components.\n    delete dragProps.onClick;\n  } else {\n    if (isSelected) {\n      dragButtonLabel = stringFormatter.format('dragSelectedItems', {count: numKeysForDrag});\n    } else {\n      let itemText = state.collection.getTextValue?.(props.key) ?? item?.textValue ?? '';\n      dragButtonLabel = stringFormatter.format('dragItem', {itemText});\n    }\n  }\n\n  let descriptionProps = useDescription(description);\n  if (description) {\n    Object.assign(dragProps, descriptionProps);\n  }\n\n  if (!props.hasDragButton && props.hasAction) {\n    let {onKeyDownCapture, onKeyUpCapture} = dragProps;\n    if (modality === 'touch') {\n      // Remove long press description if an action is present, because in that case long pressing selects the item.\n      delete dragProps['aria-describedby'];\n    }\n\n    // Require Alt key if there is a conflicting action.\n    dragProps.onKeyDownCapture = e => {\n      if (e.altKey) {\n        onKeyDownCapture?.(e);\n      }\n    };\n\n    dragProps.onKeyUpCapture = e => {\n      if (e.altKey) {\n        onKeyUpCapture?.(e);\n      }\n    };\n  }\n\n  return {\n    dragProps: isDisabled ? {} : dragProps,\n    dragButtonProps: {\n      ...dragButtonProps,\n      isDisabled,\n      'aria-label': dragButtonLabel\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}