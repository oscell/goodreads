{"ast":null,"code":"import \"./vars.b904ab57.css\";\nimport $fhlTD$fieldlabel_vars_cssmodulejs from \"./fieldlabel_vars_css.mjs\";\nimport { getLocalTimeZone as $fhlTD$getLocalTimeZone, today as $fhlTD$today, toCalendarDateTime as $fhlTD$toCalendarDateTime } from \"@internationalized/date\";\nimport { useDOMRef as $fhlTD$useDOMRef, classNames as $fhlTD$classNames } from \"@react-spectrum/utils\";\nimport { Field as $fhlTD$Field } from \"@react-spectrum/label\";\nimport { filterDOMProps as $fhlTD$filterDOMProps } from \"@react-aria/utils\";\nimport $fhlTD$react from \"react\";\nimport { useListFormatter as $fhlTD$useListFormatter, useNumberFormatter as $fhlTD$useNumberFormatter, useDateFormatter as $fhlTD$useDateFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $3e9971be431adb24$var$LabeledValue(props, ref) {\n  let {\n    value: value,\n    formatOptions: formatOptions\n  } = props;\n  let domRef = (0, $fhlTD$useDOMRef)(ref);\n  let children;\n  if (Array.isArray(value)) children = /*#__PURE__*/(0, $fhlTD$react).createElement($3e9971be431adb24$var$FormattedStringList, {\n    value: value,\n    formatOptions: formatOptions\n  });\n  if (typeof value === 'object' && 'start' in value && typeof value.start === 'number' && typeof value.end === 'number') children = /*#__PURE__*/(0, $fhlTD$react).createElement($3e9971be431adb24$var$FormattedNumber, {\n    value: value,\n    formatOptions: formatOptions\n  });\n  if (typeof value === 'object' && 'start' in value && typeof value.start !== 'number' && typeof value.end !== 'number') children = /*#__PURE__*/(0, $fhlTD$react).createElement($3e9971be431adb24$var$FormattedDate, {\n    value: value,\n    formatOptions: formatOptions\n  });\n  if (typeof value === 'number') children = /*#__PURE__*/(0, $fhlTD$react).createElement($3e9971be431adb24$var$FormattedNumber, {\n    value: value,\n    formatOptions: formatOptions\n  });\n  if (typeof value === 'object' && ('calendar' in value || 'hour' in value) || value instanceof Date) children = /*#__PURE__*/(0, $fhlTD$react).createElement($3e9971be431adb24$var$FormattedDate, {\n    value: value,\n    formatOptions: formatOptions\n  });\n  if (typeof value === 'string') children = value;\n  return /*#__PURE__*/(0, $fhlTD$react).createElement((0, $fhlTD$Field), {\n    ...props,\n    wrapperProps: (0, $fhlTD$filterDOMProps)(props),\n    ref: domRef,\n    elementType: \"span\",\n    wrapperClassName: (0, $fhlTD$classNames)((0, $parcel$interopDefault($fhlTD$fieldlabel_vars_cssmodulejs)), 'spectrum-LabeledValue')\n  }, /*#__PURE__*/(0, $fhlTD$react).createElement(\"span\", null, children));\n}\nfunction $3e9971be431adb24$var$FormattedStringList(props) {\n  let stringFormatter = (0, $fhlTD$useListFormatter)(props.formatOptions);\n  return /*#__PURE__*/(0, $fhlTD$react).createElement((0, $fhlTD$react).Fragment, null, stringFormatter.format(props.value));\n}\nfunction $3e9971be431adb24$var$FormattedNumber(props) {\n  let numberFormatter = (0, $fhlTD$useNumberFormatter)(props.formatOptions);\n  let value = props.value;\n  if (typeof value === 'object') return /*#__PURE__*/(0, $fhlTD$react).createElement((0, $fhlTD$react).Fragment, null, numberFormatter.formatRange(value.start, value.end));\n  return /*#__PURE__*/(0, $fhlTD$react).createElement((0, $fhlTD$react).Fragment, null, numberFormatter.format(value));\n}\nfunction $3e9971be431adb24$var$FormattedDate(props) {\n  let {\n    value: value,\n    formatOptions: formatOptions\n  } = props;\n  if (!formatOptions) formatOptions = $3e9971be431adb24$var$getDefaultFormatOptions('start' in value ? value.start : value);\n  let dateFormatter = (0, $fhlTD$useDateFormatter)(formatOptions);\n  let timeZone = dateFormatter.resolvedOptions().timeZone || (0, $fhlTD$getLocalTimeZone)();\n  let final;\n  if ('start' in value && 'end' in value) {\n    let start = value.start;\n    let end = value.end;\n    start = $3e9971be431adb24$var$convertDateTime(start, timeZone);\n    end = $3e9971be431adb24$var$convertDateTime(end, timeZone);\n    return /*#__PURE__*/(0, $fhlTD$react).createElement((0, $fhlTD$react).Fragment, null, dateFormatter.formatRange(start, end));\n  }\n  final = $3e9971be431adb24$var$convertDateTime(value, timeZone);\n  return /*#__PURE__*/(0, $fhlTD$react).createElement((0, $fhlTD$react).Fragment, null, dateFormatter.format(final));\n}\nfunction $3e9971be431adb24$var$convertDateTime(value, timeZone) {\n  if ('timeZone' in value) return value.toDate();else if ('calendar' in value) return value.toDate(timeZone);else if (!(value instanceof Date)) return $3e9971be431adb24$var$convertValue(value).toDate(timeZone);\n  return value;\n}\nfunction $3e9971be431adb24$var$getDefaultFormatOptions(value) {\n  if (value instanceof Date) return {\n    dateStyle: 'long',\n    timeStyle: 'short'\n  };else if ('timeZone' in value) return {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    timeZone: value.timeZone,\n    timeZoneName: 'short'\n  };else if ('hour' in value && 'year' in value) return {\n    dateStyle: 'long',\n    timeStyle: 'short'\n  };else if ('hour' in value) return {\n    timeStyle: 'short'\n  };else return {\n    dateStyle: 'long'\n  };\n}\nfunction $3e9971be431adb24$var$convertValue(value) {\n  let date = (0, $fhlTD$today)((0, $fhlTD$getLocalTimeZone)());\n  return (0, $fhlTD$toCalendarDateTime)(date, value);\n}\n/**\n * A LabeledValue displays a non-editable value with a label. It formats numbers, dates, times, and lists according to the user's locale.\n */\nlet $3e9971be431adb24$export$d1328f67a56fa517 = /*#__PURE__*/(0, $fhlTD$react).forwardRef($3e9971be431adb24$var$LabeledValue);\nexport { $3e9971be431adb24$export$d1328f67a56fa517 as LabeledValue };","map":{"version":3,"names":["$3e9971be431adb24$var$LabeledValue","props","ref","value","formatOptions","domRef","$fhlTD$useDOMRef","children","Array","isArray","$fhlTD$react","createElement","$3e9971be431adb24$var$FormattedStringList","start","end","$3e9971be431adb24$var$FormattedNumber","$3e9971be431adb24$var$FormattedDate","Date","$fhlTD$Field","wrapperProps","$fhlTD$filterDOMProps","elementType","wrapperClassName","$fhlTD$classNames","$parcel$interopDefault","$fhlTD$fieldlabel_vars_cssmodulejs","stringFormatter","$fhlTD$useListFormatter","Fragment","format","numberFormatter","$fhlTD$useNumberFormatter","formatRange","$3e9971be431adb24$var$getDefaultFormatOptions","dateFormatter","$fhlTD$useDateFormatter","timeZone","resolvedOptions","$fhlTD$getLocalTimeZone","final","$3e9971be431adb24$var$convertDateTime","toDate","$3e9971be431adb24$var$convertValue","dateStyle","timeStyle","year","month","day","hour","minute","timeZoneName","date","$fhlTD$today","$fhlTD$toCalendarDateTime","$3e9971be431adb24$export$d1328f67a56fa517","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/labeledvalue/dist/packages/@react-spectrum/labeledvalue/src/LabeledValue.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime, getLocalTimeZone, Time, toCalendarDateTime, today, ZonedDateTime} from '@internationalized/date';\nimport {classNames, useDOMRef} from '@react-spectrum/utils';\nimport type {DOMProps, DOMRef, RangeValue, SpectrumLabelableProps, StyleProps} from '@react-types/shared';\nimport {Field} from '@react-spectrum/label';\nimport {filterDOMProps} from '@react-aria/utils';\nimport labelStyles from '@adobe/spectrum-css-temp/components/fieldlabel/vars.css';\nimport React, {ReactNode} from 'react';\nimport {useDateFormatter, useListFormatter, useNumberFormatter} from '@react-aria/i18n';\n\n// NOTE: the types here need to be synchronized with the ones in docs/types.ts, which are simpler so the documentation generator can handle them.\n\nexport interface LabeledValueBaseProps extends DOMProps, StyleProps, Omit<SpectrumLabelableProps, 'necessityIndicator' | 'isRequired'>, DOMProps {\n  /** The content to display as the label. */\n  label: ReactNode\n}\n\ntype NumberValue = number | RangeValue<number>;\ninterface NumberProps<T extends NumberValue> {\n  /** The value to display. */\n  value: T,\n  /** Formatting options for the value. */\n  formatOptions?: Intl.NumberFormatOptions\n}\n\nexport type DateTime = Date | CalendarDate | CalendarDateTime | ZonedDateTime | Time;\ntype RangeDateTime = RangeValue<DateTime>;\ntype DateTimeValue = DateTime | RangeDateTime;\ninterface DateProps<T extends DateTimeValue> {\n  /** The value to display. */\n  value: T,\n  /** Formatting options for the value. */\n  formatOptions?: Intl.DateTimeFormatOptions\n}\n\ninterface StringProps<T extends string> {\n  /** The value to display. */\n  value: T,\n  /** Formatting options for the value. */\n  formatOptions?: never\n}\n\ninterface StringListProps<T extends string[]> {\n  /** The value to display. */\n  value: T,\n  /** Formatting options for the value. */\n  formatOptions?: Intl.ListFormatOptions\n}\n\ntype LabeledValueProps<T> =\n  T extends NumberValue ? NumberProps<T> :\n  T extends DateTimeValue ? DateProps<T> :\n  T extends string[] ? StringListProps<T> :\n  T extends string ? StringProps<T> :\n  never;\n\ntype SpectrumLabeledValueTypes = string[] | string | Date | CalendarDate | CalendarDateTime | ZonedDateTime | Time | number | RangeValue<number> | RangeValue<DateTime>;\nexport type SpectrumLabeledValueProps<T> = LabeledValueProps<T> & LabeledValueBaseProps;\n\nfunction LabeledValue<T extends SpectrumLabeledValueTypes>(props: SpectrumLabeledValueProps<T>, ref: DOMRef<HTMLElement>) {\n  let {\n    value,\n    formatOptions\n  } = props;\n  let domRef = useDOMRef(ref);\n\n  let children;\n  if (Array.isArray(value)) {\n    children = <FormattedStringList value={value} formatOptions={formatOptions as Intl.ListFormatOptions} />;\n  }\n\n  if (typeof value === 'object' && 'start' in value && typeof value.start === 'number' && typeof value.end === 'number') {\n    children = <FormattedNumber value={value as NumberValue} formatOptions={formatOptions as Intl.NumberFormatOptions}  />;\n  }\n\n  if (typeof value === 'object' && 'start' in value && typeof value.start !== 'number' && typeof value.end !== 'number') {\n    children = <FormattedDate value={value as DateTimeValue} formatOptions={formatOptions as Intl.DateTimeFormatOptions} />;\n  }\n\n  if (typeof value === 'number') {\n    children = <FormattedNumber value={value} formatOptions={formatOptions as Intl.NumberFormatOptions} />;\n  }\n\n  if (typeof value === 'object' && ('calendar' in value || 'hour' in value) || (value instanceof Date)) {\n    children = <FormattedDate value={value} formatOptions={formatOptions as Intl.DateTimeFormatOptions} />;\n  }\n\n  if (typeof value === 'string') {\n    children = value;\n  }\n\n  return (\n    <Field {...props as any} wrapperProps={filterDOMProps(props as any)} ref={domRef} elementType=\"span\" wrapperClassName={classNames(labelStyles, 'spectrum-LabeledValue')}>\n      <span>{children}</span>\n    </Field>\n  );\n}\n\nfunction FormattedStringList<T extends string[]>(props: StringListProps<T>) {\n  let stringFormatter = useListFormatter(props.formatOptions);\n\n  return (\n    <>{stringFormatter.format(props.value)}</>\n  );\n}\n\nfunction FormattedNumber<T extends NumberValue>(props: NumberProps<T>) {\n  let numberFormatter = useNumberFormatter(props.formatOptions);\n  let value = props.value;\n\n  if (typeof value === 'object') {\n    return <>{numberFormatter.formatRange(value.start, value.end)}</>;\n  }\n\n  return <>{numberFormatter.format(value)}</>;\n}\n\nfunction FormattedDate<T extends DateTimeValue>(props: DateProps<T>) {\n  let {value, formatOptions} = props;\n  if (!formatOptions) {\n    formatOptions = getDefaultFormatOptions('start' in value ? value.start : value);\n  }\n\n  let dateFormatter = useDateFormatter(formatOptions);\n  let timeZone = dateFormatter.resolvedOptions().timeZone || getLocalTimeZone();\n  let final: Date;\n\n  if ('start' in value && 'end' in value) {\n    let start = value.start;\n    let end = value.end;\n\n    start = convertDateTime(start, timeZone);\n    end = convertDateTime(end, timeZone);\n\n    return <>{dateFormatter.formatRange(start, end)}</>;\n  }\n\n  final = convertDateTime(value, timeZone);\n  return <>{dateFormatter.format(final)}</>;\n}\n\nfunction convertDateTime(value: DateTime, timeZone: any) {\n  if ('timeZone' in value) {\n    return value.toDate();\n  } else if ('calendar' in value) {\n    return value.toDate(timeZone);\n  } else if (!(value instanceof Date)) {\n    return convertValue(value).toDate(timeZone);\n  }\n\n  return value;\n}\n\nfunction getDefaultFormatOptions(value: DateTime): Intl.DateTimeFormatOptions {\n  if (value instanceof Date) {\n    return {dateStyle: 'long', timeStyle: 'short'};\n  } else if ('timeZone' in value) {\n    return {year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', timeZone: value.timeZone, timeZoneName: 'short'};\n  } else if ('hour' in value && 'year' in value) {\n    return {dateStyle: 'long', timeStyle: 'short'};\n  } else if ('hour' in value) {\n    return {timeStyle: 'short'};\n  } else {\n    return {dateStyle: 'long'};\n  }\n}\n\nfunction convertValue(value: Time) {\n  let date = today(getLocalTimeZone());\n\n  return toCalendarDateTime(date, value);\n}\n\n/**\n * A LabeledValue displays a non-editable value with a label. It formats numbers, dates, times, and lists according to the user's locale.\n */\nlet _LabeledValue = React.forwardRef(LabeledValue);\nexport {_LabeledValue as LabeledValue};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}