{"ast":null,"code":"import { useState as $8zXGn$useState, useEffect as $8zXGn$useEffect } from \"react\";\nimport { useIsSSR as $8zXGn$useIsSSR } from \"@react-aria/ssr\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $3df547e395c4522f$export$32d5543ab307c01(query) {\n  let supportsMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';\n  let [matches, setMatches] = (0, $8zXGn$useState)(() => supportsMatchMedia ? window.matchMedia(query).matches : false);\n  (0, $8zXGn$useEffect)(() => {\n    if (!supportsMatchMedia) return;\n    let mq = window.matchMedia(query);\n    let onChange = evt => {\n      setMatches(evt.matches);\n    };\n    mq.addListener(onChange);\n    return () => {\n      mq.removeListener(onChange);\n    };\n  }, [supportsMatchMedia, query]);\n  // If in SSR, the media query should never match. Once the page hydrates,\n  // this will update and the real value will be returned.\n  let isSSR = (0, $8zXGn$useIsSSR)();\n  return isSSR ? false : matches;\n}\nexport { $3df547e395c4522f$export$32d5543ab307c01 as useMediaQuery };","map":{"version":3,"names":["$3df547e395c4522f$export$32d5543ab307c01","query","supportsMatchMedia","window","matchMedia","matches","setMatches","$8zXGn$useState","$8zXGn$useEffect","mq","onChange","evt","addListener","removeListener","isSSR","$8zXGn$useIsSSR"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/utils/dist/packages/@react-spectrum/utils/src/useMediaQuery.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useEffect, useState} from 'react';\nimport {useIsSSR} from '@react-aria/ssr';\n\nexport function useMediaQuery(query: string) {\n  let supportsMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia === 'function';\n  let [matches, setMatches] = useState(() =>\n    supportsMatchMedia\n      ? window.matchMedia(query).matches\n      : false\n  );\n\n  useEffect(() => {\n    if (!supportsMatchMedia) {\n      return;\n    }\n\n    let mq = window.matchMedia(query);\n    let onChange = (evt) => {\n      setMatches(evt.matches);\n    };\n\n    mq.addListener(onChange);\n    return () => {\n      mq.removeListener(onChange);\n    };\n  }, [supportsMatchMedia, query]);\n\n  // If in SSR, the media query should never match. Once the page hydrates,\n  // this will update and the real value will be returned.\n  let isSSR = useIsSSR();\n  return isSSR ? false : matches;\n}\n"],"mappings":";;;AAAA;;;;;;;;;;;;AAeO,SAASA,yCAAcC,KAAa;EACzC,IAAIC,kBAAA,GAAqB,OAAOC,MAAA,KAAW,eAAe,OAAOA,MAAA,CAAOC,UAAU,KAAK;EACvF,IAAI,CAACC,OAAA,EAASC,UAAA,CAAW,GAAG,IAAAC,eAAO,EAAE,MACnCL,kBAAA,GACIC,MAAA,CAAOC,UAAU,CAACH,KAAA,EAAOI,OAAO,GAChC;EAGN,IAAAG,gBAAQ,EAAE;IACR,IAAI,CAACN,kBAAA,EACH;IAGF,IAAIO,EAAA,GAAKN,MAAA,CAAOC,UAAU,CAACH,KAAA;IAC3B,IAAIS,QAAA,GAAYC,GAAA;MACdL,UAAA,CAAWK,GAAA,CAAIN,OAAO;IACxB;IAEAI,EAAA,CAAGG,WAAW,CAACF,QAAA;IACf,OAAO;MACLD,EAAA,CAAGI,cAAc,CAACH,QAAA;IACpB;EACF,GAAG,CAACR,kBAAA,EAAoBD,KAAA,CAAM;EAE9B;EACA;EACA,IAAIa,KAAA,GAAQ,IAAAC,eAAO;EACnB,OAAOD,KAAA,GAAQ,QAAQT,OAAA;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}