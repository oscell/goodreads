{"ast":null,"code":"import { ListBoxContext as $0c6f792811e33483$export$7ff8f37d2d81a48d } from \"./ListBoxContext.mjs\";\nimport \"./vars.487ba452.css\";\nimport $6TrMC$menu_vars_cssmodulejs from \"./menu_vars_css.mjs\";\nimport $6TrMC$spectrumiconsuiCheckmarkMedium from \"@spectrum-icons/ui/CheckmarkMedium\";\nimport { classNames as $6TrMC$classNames, ClearSlots as $6TrMC$ClearSlots, SlotProvider as $6TrMC$SlotProvider } from \"@react-spectrum/utils\";\nimport { FocusRing as $6TrMC$FocusRing } from \"@react-aria/focus\";\nimport { Grid as $6TrMC$Grid } from \"@react-spectrum/layout\";\nimport { useHover as $6TrMC$useHover, isFocusVisible as $6TrMC$isFocusVisible } from \"@react-aria/interactions\";\nimport { mergeProps as $6TrMC$mergeProps } from \"@react-aria/utils\";\nimport $6TrMC$react, { useContext as $6TrMC$useContext, useRef as $6TrMC$useRef } from \"react\";\nimport { Text as $6TrMC$Text } from \"@react-spectrum/text\";\nimport { useOption as $6TrMC$useOption } from \"@react-aria/listbox\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $86983ea1fa3f7312$export$feb3b6b552c14a12(props) {\n  let {\n    item: item\n  } = props;\n  let {\n    rendered: rendered,\n    key: key\n  } = item;\n  let ElementType = item.props.href ? 'a' : 'div';\n  let {\n    state: state,\n    shouldFocusOnHover: shouldFocusOnHover,\n    shouldUseVirtualFocus: shouldUseVirtualFocus\n  } = (0, $6TrMC$useContext)((0, $0c6f792811e33483$export$7ff8f37d2d81a48d));\n  let ref = (0, $6TrMC$useRef)(undefined);\n  let {\n    optionProps: optionProps,\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isFocused: isFocused\n  } = (0, $6TrMC$useOption)({\n    'aria-label': item['aria-label'],\n    key: key,\n    isVirtualized: true\n  }, state, ref);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $6TrMC$useHover)({\n    ...props,\n    isDisabled: isDisabled\n  });\n  let contents = typeof rendered === 'string' ? /*#__PURE__*/(0, $6TrMC$react).createElement((0, $6TrMC$Text), null, rendered) : rendered;\n  let isKeyboardModality = (0, $6TrMC$isFocusVisible)();\n  return /*#__PURE__*/(0, $6TrMC$react).createElement((0, $6TrMC$FocusRing), {\n    focusRingClass: (0, $6TrMC$classNames)((0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $6TrMC$react).createElement(ElementType, {\n    ...(0, $6TrMC$mergeProps)(optionProps, shouldFocusOnHover ? {} : hoverProps),\n    ref: ref,\n    className: (0, $6TrMC$classNames)((0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs)), 'spectrum-Menu-item', {\n      // If using virtual focus, apply focused styles to the item when the user is interacting with keyboard modality\n      'is-focused': shouldUseVirtualFocus && isFocused && isKeyboardModality,\n      'is-disabled': isDisabled,\n      'is-selected': isSelected,\n      'is-selectable': state.selectionManager.selectionMode !== 'none',\n      // When shouldFocusOnHover is false, apply hover styles both when hovered with the mouse.\n      // Otherwise, apply hover styles when focused using non-keyboard modality.\n      'is-hovered': isHovered && !shouldFocusOnHover || isFocused && !isKeyboardModality\n    })\n  }, /*#__PURE__*/(0, $6TrMC$react).createElement((0, $6TrMC$Grid), {\n    UNSAFE_className: (0, $6TrMC$classNames)((0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs)), 'spectrum-Menu-itemGrid')\n  }, /*#__PURE__*/(0, $6TrMC$react).createElement((0, $6TrMC$ClearSlots), null, /*#__PURE__*/(0, $6TrMC$react).createElement((0, $6TrMC$SlotProvider), {\n    slots: {\n      text: {\n        UNSAFE_className: (0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs))['spectrum-Menu-itemLabel'],\n        ...labelProps\n      },\n      icon: {\n        size: 'S',\n        UNSAFE_className: (0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs))['spectrum-Menu-icon']\n      },\n      avatar: {\n        size: 'avatar-size-100',\n        UNSAFE_className: (0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs))['spectrum-Menu-avatar']\n      },\n      description: {\n        UNSAFE_className: (0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs))['spectrum-Menu-description'],\n        ...descriptionProps\n      }\n    }\n  }, contents, isSelected && /*#__PURE__*/(0, $6TrMC$react).createElement((0, $6TrMC$spectrumiconsuiCheckmarkMedium), {\n    slot: \"checkmark\",\n    UNSAFE_className: (0, $6TrMC$classNames)((0, $parcel$interopDefault($6TrMC$menu_vars_cssmodulejs)), 'spectrum-Menu-checkmark')\n  }))))));\n}\nexport { $86983ea1fa3f7312$export$feb3b6b552c14a12 as ListBoxOption };","map":{"version":3,"names":["$86983ea1fa3f7312$export$feb3b6b552c14a12","props","item","rendered","key","ElementType","href","state","shouldFocusOnHover","shouldUseVirtualFocus","$6TrMC$useContext","$0c6f792811e33483$export$7ff8f37d2d81a48d","ref","$6TrMC$useRef","undefined","optionProps","labelProps","descriptionProps","isSelected","isDisabled","isFocused","$6TrMC$useOption","isVirtualized","hoverProps","isHovered","$6TrMC$useHover","contents","$6TrMC$react","createElement","$6TrMC$Text","isKeyboardModality","$6TrMC$isFocusVisible","$6TrMC$FocusRing","focusRingClass","$6TrMC$classNames","$parcel$interopDefault","$6TrMC$menu_vars_cssmodulejs","$6TrMC$mergeProps","className","selectionManager","selectionMode","$6TrMC$Grid","UNSAFE_className","$6TrMC$ClearSlots","$6TrMC$SlotProvider","slots","text","icon","size","avatar","description","$6TrMC$spectrumiconsuiCheckmarkMedium","slot"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/listbox/dist/packages/@react-spectrum/listbox/src/ListBoxOption.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport CheckmarkMedium from '@spectrum-icons/ui/CheckmarkMedium';\nimport {classNames, ClearSlots, SlotProvider} from '@react-spectrum/utils';\nimport {FocusRing} from '@react-aria/focus';\nimport {Grid} from '@react-spectrum/layout';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {ListBoxContext} from './ListBoxContext';\nimport {mergeProps} from '@react-aria/utils';\nimport {Node} from '@react-types/shared';\nimport React, {useContext, useRef} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/menu/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useOption} from '@react-aria/listbox';\n\ninterface OptionProps<T> {\n  item: Node<T>\n}\n\n/** @private */\nexport function ListBoxOption<T>(props: OptionProps<T>) {\n  let {item} = props;\n\n  let {\n    rendered,\n    key\n  } = item;\n  let ElementType: React.ElementType = item.props.href ? 'a' : 'div';\n  let {state, shouldFocusOnHover, shouldUseVirtualFocus} = useContext(ListBoxContext);\n\n  let ref = useRef<any>(undefined);\n  let {optionProps, labelProps, descriptionProps, isSelected, isDisabled, isFocused} = useOption(\n    {\n      'aria-label': item['aria-label'],\n      key,\n      isVirtualized: true\n    },\n    state,\n    ref\n  );\n  let {hoverProps, isHovered} = useHover({\n    ...props,\n    isDisabled\n  });\n\n  let contents = typeof rendered === 'string'\n    ? <Text>{rendered}</Text>\n    : rendered;\n\n  let isKeyboardModality = isFocusVisible();\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <ElementType\n        {...mergeProps(optionProps, shouldFocusOnHover ? {} : hoverProps)}\n        ref={ref}\n        className={classNames(\n          styles,\n          'spectrum-Menu-item',\n          {\n            // If using virtual focus, apply focused styles to the item when the user is interacting with keyboard modality\n            'is-focused': shouldUseVirtualFocus && isFocused && isKeyboardModality,\n            'is-disabled': isDisabled,\n            'is-selected': isSelected,\n            'is-selectable': state.selectionManager.selectionMode !== 'none',\n            // When shouldFocusOnHover is false, apply hover styles both when hovered with the mouse.\n            // Otherwise, apply hover styles when focused using non-keyboard modality.\n            'is-hovered': (isHovered && !shouldFocusOnHover) || (isFocused && !isKeyboardModality)\n          }\n        )}>\n        <Grid\n          UNSAFE_className={\n            classNames(\n              styles,\n              'spectrum-Menu-itemGrid'\n            )\n          }>\n          <ClearSlots>\n            <SlotProvider\n              slots={{\n                text: {UNSAFE_className: styles['spectrum-Menu-itemLabel'], ...labelProps},\n                icon: {size: 'S', UNSAFE_className: styles['spectrum-Menu-icon']},\n                avatar: {size: 'avatar-size-100', UNSAFE_className: styles['spectrum-Menu-avatar']},\n                description: {UNSAFE_className: styles['spectrum-Menu-description'], ...descriptionProps}\n              }}>\n              {contents}\n              {isSelected &&\n                <CheckmarkMedium\n                  slot=\"checkmark\"\n                  UNSAFE_className={\n                    classNames(\n                      styles,\n                      'spectrum-Menu-checkmark'\n                    )\n                  } />\n              }\n            </SlotProvider>\n          </ClearSlots>\n        </Grid>\n      </ElementType>\n    </FocusRing>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}