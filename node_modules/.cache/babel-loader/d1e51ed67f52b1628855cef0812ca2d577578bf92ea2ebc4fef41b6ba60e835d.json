{"ast":null,"code":"import \"./vars.67d165e1.css\";\nimport $hlUTw$barloader_vars_cssmodulejs from \"./barloader_vars_css.mjs\";\nimport { clamp as $hlUTw$clamp } from \"@react-aria/utils\";\nimport { useDOMRef as $hlUTw$useDOMRef, useStyleProps as $hlUTw$useStyleProps, classNames as $hlUTw$classNames } from \"@react-spectrum/utils\";\nimport $hlUTw$react from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Base ProgressBar component shared with Meter.\nfunction $ddf9337e928b5fe6$var$ProgressBarBase(props, ref) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'L',\n    label: label,\n    barClassName: barClassName,\n    showValueLabel = !!label,\n    labelPosition = 'top',\n    isIndeterminate = false,\n    barProps: barProps,\n    labelProps: labelProps,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    ...otherProps\n  } = props;\n  let domRef = (0, $hlUTw$useDOMRef)(ref);\n  let {\n    styleProps: styleProps\n  } = (0, $hlUTw$useStyleProps)(otherProps);\n  value = (0, $hlUTw$clamp)(value, minValue, maxValue);\n  let barStyle = {};\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue);\n    barStyle.width = `${Math.round(percentage * 100)}%`;\n  }\n  // Ideally this should be in useProgressBar, but children\n  // are not supported in ProgressCircle which shares that hook...\n  if (!label && !ariaLabel && !ariaLabelledby) console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  // use inline style for fit-content because cssnano is too smart for us and will strip out the -moz prefix in css files\n  return /*#__PURE__*/(0, $hlUTw$react).createElement(\"div\", {\n    ...barProps,\n    ref: domRef,\n    className: (0, $hlUTw$classNames)((0, $parcel$interopDefault($hlUTw$barloader_vars_cssmodulejs)), 'spectrum-BarLoader', {\n      'spectrum-BarLoader--small': size === 'S',\n      'spectrum-BarLoader--large': size === 'L',\n      'spectrum-BarLoader--indeterminate': isIndeterminate,\n      'spectrum-BarLoader--sideLabel': labelPosition === 'side'\n    }, barClassName, styleProps.className),\n    style: {\n      minWidth: '-moz-fit-content',\n      ...styleProps.style\n    }\n  }, label && /*#__PURE__*/(0, $hlUTw$react).createElement(\"span\", {\n    ...labelProps,\n    className: (0, $hlUTw$classNames)((0, $parcel$interopDefault($hlUTw$barloader_vars_cssmodulejs)), 'spectrum-BarLoader-label')\n  }, label), showValueLabel && barProps && /*#__PURE__*/(0, $hlUTw$react).createElement(\"div\", {\n    className: (0, $hlUTw$classNames)((0, $parcel$interopDefault($hlUTw$barloader_vars_cssmodulejs)), 'spectrum-BarLoader-percentage')\n  }, barProps['aria-valuetext']), /*#__PURE__*/(0, $hlUTw$react).createElement(\"div\", {\n    className: (0, $hlUTw$classNames)((0, $parcel$interopDefault($hlUTw$barloader_vars_cssmodulejs)), 'spectrum-BarLoader-track')\n  }, /*#__PURE__*/(0, $hlUTw$react).createElement(\"div\", {\n    className: (0, $hlUTw$classNames)((0, $parcel$interopDefault($hlUTw$barloader_vars_cssmodulejs)), 'spectrum-BarLoader-fill'),\n    style: barStyle\n  })));\n}\nlet $ddf9337e928b5fe6$export$7c6ed87244065f3a = /*#__PURE__*/(0, $hlUTw$react).forwardRef($ddf9337e928b5fe6$var$ProgressBarBase);\nexport { $ddf9337e928b5fe6$export$7c6ed87244065f3a as ProgressBarBase };","map":{"version":3,"names":["$ddf9337e928b5fe6$var$ProgressBarBase","props","ref","value","minValue","maxValue","size","label","barClassName","showValueLabel","labelPosition","isIndeterminate","barProps","labelProps","ariaLabel","ariaLabelledby","otherProps","domRef","$hlUTw$useDOMRef","styleProps","$hlUTw$useStyleProps","$hlUTw$clamp","barStyle","percentage","width","Math","round","console","warn","$hlUTw$react","createElement","className","$hlUTw$classNames","$parcel$interopDefault","$hlUTw$barloader_vars_cssmodulejs","style","minWidth","$ddf9337e928b5fe6$export$7c6ed87244065f3a","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/progress/dist/packages/@react-spectrum/progress/src/ProgressBarBase.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp} from '@react-aria/utils';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport {ProgressBarProps, SpectrumProgressBarBaseProps} from '@react-types/progress';\nimport React, {CSSProperties, HTMLAttributes} from 'react';\nimport styles from '@adobe/spectrum-css-temp/components/barloader/vars.css';\n\ninterface ProgressBarBaseProps extends SpectrumProgressBarBaseProps, ProgressBarProps {\n  barClassName?: string,\n  barProps?: HTMLAttributes<HTMLDivElement>,\n  labelProps?: HTMLAttributes<HTMLLabelElement>\n}\n\n// Base ProgressBar component shared with Meter.\nfunction ProgressBarBase(props: ProgressBarBaseProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    size = 'L',\n    label,\n    barClassName,\n    showValueLabel = !!label,\n    labelPosition = 'top',\n    isIndeterminate = false,\n    barProps,\n    labelProps,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    ...otherProps\n  } = props;\n  let domRef = useDOMRef(ref);\n  let {styleProps} = useStyleProps(otherProps);\n\n  value = clamp(value, minValue, maxValue);\n\n  let barStyle: CSSProperties = {};\n  if (!isIndeterminate) {\n    let percentage = (value - minValue) / (maxValue - minValue);\n    barStyle.width = `${Math.round(percentage * 100)}%`;\n  }\n\n  // Ideally this should be in useProgressBar, but children\n  // are not supported in ProgressCircle which shares that hook...\n  if (!label && !ariaLabel && !ariaLabelledby) {\n    console.warn('If you do not provide a visible label via children, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n  // use inline style for fit-content because cssnano is too smart for us and will strip out the -moz prefix in css files\n  return (\n    <div\n      {...barProps}\n      ref={domRef}\n      className={\n        classNames(\n          styles,\n          'spectrum-BarLoader',\n          {\n            'spectrum-BarLoader--small': size === 'S',\n            'spectrum-BarLoader--large': size === 'L',\n            'spectrum-BarLoader--indeterminate': isIndeterminate,\n            'spectrum-BarLoader--sideLabel': labelPosition === 'side'\n          },\n          barClassName,\n          styleProps.className\n        )\n      }\n      style={{minWidth: '-moz-fit-content', ...styleProps.style}}>\n      {label &&\n        <span\n          {...labelProps}\n          className={classNames(styles, 'spectrum-BarLoader-label')}>\n            {label}\n        </span>\n      }\n      {showValueLabel && barProps && \n        <div className={classNames(styles, 'spectrum-BarLoader-percentage')}>\n          {barProps['aria-valuetext']}\n        </div>\n      }\n      <div className={classNames(styles, 'spectrum-BarLoader-track')}>\n        <div\n          className={classNames(styles, 'spectrum-BarLoader-fill')}\n          style={barStyle} />\n      </div>\n    </div>\n  );\n}\n\nlet _ProgressBarBase = React.forwardRef(ProgressBarBase);\nexport {_ProgressBarBase as ProgressBarBase};\n"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AAyBA;AACA,SAASA,sCAAgBC,KAA2B,EAAEC,GAA2B;EAC/E,IAAI;IACFC,KAAA,GAAQ;IACRC,QAAA,GAAW;IACXC,QAAA,GAAW;IACXC,IAAA,GAAO;IAAAC,KAAA,EACPA,KAAK;IAAAC,YAAA,EACLA,YAAY;IACZC,cAAA,GAAiB,CAAC,CAACF,KAAA;IACnBG,aAAA,GAAgB;IAChBC,eAAA,GAAkB;IAAAC,QAAA,EAClBA,QAAQ;IAAAC,UAAA,EACRA,UAAU;IACV,cAAcC,SAAS;IACvB,mBAAmBC,cAAc;IACjC,GAAGC;EAAA,CACJ,GAAGf,KAAA;EACJ,IAAIgB,MAAA,GAAS,IAAAC,gBAAQ,EAAEhB,GAAA;EACvB,IAAI;IAAAiB,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEJ,UAAA;EAEjCb,KAAA,GAAQ,IAAAkB,YAAI,EAAElB,KAAA,EAAOC,QAAA,EAAUC,QAAA;EAE/B,IAAIiB,QAAA,GAA0B,CAAC;EAC/B,IAAI,CAACX,eAAA,EAAiB;IACpB,IAAIY,UAAA,GAAa,CAACpB,KAAA,GAAQC,QAAO,KAAMC,QAAA,GAAWD,QAAO;IACzDkB,QAAA,CAASE,KAAK,GAAG,GAAGC,IAAA,CAAKC,KAAK,CAACH,UAAA,GAAa,OAAO;EACrD;EAEA;EACA;EACA,IAAI,CAAChB,KAAA,IAAS,CAACO,SAAA,IAAa,CAACC,cAAA,EAC3BY,OAAA,CAAQC,IAAI,CAAC;EAEf;EACA,oBACE,IAAAC,YAAA,EAAAC,aAAA,CAAC;IACE,GAAGlB,QAAQ;IACZV,GAAA,EAAKe,MAAA;IACLc,SAAA,EACE,IAAAC,iBAAS,GACP,GAAAC,sBAAA,CAAAC,iCAAA,CAAK,GACL,sBACA;MACE,6BAA6B5B,IAAA,KAAS;MACtC,6BAA6BA,IAAA,KAAS;MACtC,qCAAqCK,eAAA;MACrC,iCAAiCD,aAAA,KAAkB;IACrD,GACAF,YAAA,EACAW,UAAA,CAAWY,SAAS;IAGxBI,KAAA,EAAO;MAACC,QAAA,EAAU;MAAoB,GAAGjB,UAAA,CAAWgB;IAAK;KACxD5B,KAAA,iBACC,IAAAsB,YAAA,EAAAC,aAAA,CAAC;IACE,GAAGjB,UAAU;IACdkB,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,iCAAA,CAAK,GAAG;KAC3B3B,KAAA,GAGNE,cAAA,IAAkBG,QAAA,iBACjB,IAAAiB,YAAA,EAAAC,aAAA,CAAC;IAAIC,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,iCAAA,CAAK,GAAG;KAChCtB,QAAQ,CAAC,iBAAiB,gBAG/B,IAAAiB,YAAA,EAAAC,aAAA,CAAC;IAAIC,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,iCAAA,CAAK,GAAG;kBACjC,IAAAL,YAAA,EAAAC,aAAA,CAAC;IACCC,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,iCAAA,CAAK,GAAG;IAC9BC,KAAA,EAAOb;;AAIjB;AAEA,IAAIe,yCAAA,gBAAmB,IAAAR,YAAI,EAAES,UAAU,CAACtC,qCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}