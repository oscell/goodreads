{"ast":null,"code":"import { useGridList as $2nLyh$useGridList } from \"@react-aria/gridlist\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $1642482277341dec$export$abb2211d46906a63(props, state, ref) {\n  let {\n    gridProps: gridProps\n  } = (0, $2nLyh$useGridList)(props, state, ref);\n  gridProps.role = 'treegrid';\n  return {\n    gridProps: gridProps\n  };\n}\nexport { $1642482277341dec$export$abb2211d46906a63 as useTreeGridList };","map":{"version":3,"names":["$1642482277341dec$export$abb2211d46906a63","props","state","ref","gridProps","$2nLyh$useGridList","role"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/tree/dist/packages/@react-aria/tree/src/useTreeGridList.ts"],"sourcesContent":["/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaGridListOptions, AriaGridListProps, GridListProps, useGridList} from '@react-aria/gridlist';\nimport {\n  DOMAttributes,\n  KeyboardDelegate,\n  RefObject\n} from '@react-types/shared';\nimport {TreeState} from '@react-stately/tree';\n\nexport interface TreeGridListProps<T> extends GridListProps<T> {}\n\nexport interface AriaTreeGridListProps<T> extends Omit<AriaGridListProps<T>, 'keyboardNavigationBehavior'> {}\nexport interface AriaTreeGridListOptions<T> extends Omit<AriaGridListOptions<T>, 'children' | 'shouldFocusWrap'> {\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\nexport interface TreeGridListAria {\n  /** Props for the treegrid element. */\n  gridProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a single column treegrid component with interactive children.\n * A tree grid provides users with a way to navigate nested hierarchical information.\n * @param props - Props for the treegrid.\n * @param state - State for the treegrid, as returned by `useTreeState`.\n * @param ref - The ref attached to the treegrid element.\n */\nexport function useTreeGridList<T>(props: AriaTreeGridListOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement | null>): TreeGridListAria {\n  let {gridProps} = useGridList(props, state, ref);\n  gridProps.role = 'treegrid';\n\n  return {\n    gridProps\n  };\n}\n"],"mappings":";;AAAA;;;;;;;;;;;AA2CO,SAASA,0CAAmBC,KAAiC,EAAEC,KAAmB,EAAEC,GAAkC;EAC3H,IAAI;IAAAC,SAAA,EAACA;EAAS,CAAC,GAAG,IAAAC,kBAAU,EAAEJ,KAAA,EAAOC,KAAA,EAAOC,GAAA;EAC5CC,SAAA,CAAUE,IAAI,GAAG;EAEjB,OAAO;eACLF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}