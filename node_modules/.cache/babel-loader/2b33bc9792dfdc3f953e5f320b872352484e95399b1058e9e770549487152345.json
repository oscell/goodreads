{"ast":null,"code":"import { TableView as $d14697b14e638114$export$b3c27e869d856b7 } from \"./TableView.mjs\";\nimport { TreeGridTableView as $be90f60881eac8aa$export$5669566ac2c90964 } from \"./TreeGridTableView.mjs\";\nimport $k3cyS$react from \"react\";\nimport { tableNestedRows as $k3cyS$tableNestedRows } from \"@react-stately/flags\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $9f67189e3f884740$var$TableViewWrapper(props, ref) {\n  let {\n    UNSTABLE_allowsExpandableRows: UNSTABLE_allowsExpandableRows,\n    ...otherProps\n  } = props;\n  if ((0, $k3cyS$tableNestedRows)() && UNSTABLE_allowsExpandableRows) return /*#__PURE__*/(0, $k3cyS$react).createElement((0, $be90f60881eac8aa$export$5669566ac2c90964), {\n    ...otherProps,\n    ref: ref\n  });else return /*#__PURE__*/(0, $k3cyS$react).createElement((0, $d14697b14e638114$export$b3c27e869d856b7), {\n    ...otherProps,\n    ref: ref\n  });\n}\n/**\n * Tables are containers for displaying information. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\n */\nconst $9f67189e3f884740$export$b3c27e869d856b7 = /*#__PURE__*/(0, $k3cyS$react).forwardRef($9f67189e3f884740$var$TableViewWrapper);\nexport { $9f67189e3f884740$export$b3c27e869d856b7 as TableView };","map":{"version":3,"names":["$9f67189e3f884740$var$TableViewWrapper","props","ref","UNSTABLE_allowsExpandableRows","otherProps","$k3cyS$tableNestedRows","$k3cyS$react","createElement","$be90f60881eac8aa$export$5669566ac2c90964","$d14697b14e638114$export$b3c27e869d856b7","$9f67189e3f884740$export$b3c27e869d856b7","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/table/dist/packages/@react-spectrum/table/src/TableViewWrapper.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {AriaLabelingProps, DisabledBehavior, DOMProps, DOMRef, Key, SpectrumSelectionProps, StyleProps} from '@react-types/shared';\nimport type {ColumnSize, TableProps} from '@react-types/table';\nimport type {DragAndDropHooks} from '@react-spectrum/dnd';\nimport React, {JSX, ReactElement} from 'react';\nimport {tableNestedRows} from '@react-stately/flags';\nimport {TableView} from './TableView';\nimport {TreeGridTableView} from './TreeGridTableView';\n\nexport interface SpectrumTableProps<T> extends TableProps<T>, SpectrumSelectionProps, DOMProps, AriaLabelingProps, StyleProps {\n  /**\n   * Sets the amount of vertical padding within each cell.\n   * @default 'regular'\n   */\n  density?: 'compact' | 'regular' | 'spacious',\n  /**\n   * Sets the overflow behavior for the cell contents.\n   * @default 'truncate'\n   */\n  overflowMode?: 'wrap' | 'truncate',\n  /** Whether the TableView should be displayed with a quiet style. */\n  isQuiet?: boolean,\n  /** Sets what the TableView should render when there is no content to display. */\n  renderEmptyState?: () => JSX.Element,\n  /**\n   * Whether `disabledKeys` applies to all interactions, or only selection.\n   * @default \"selection\"\n   */\n  disabledBehavior?: DisabledBehavior,\n  /** Handler that is called when a user performs an action on a row. */\n  onAction?: (key: Key) => void,\n  /**\n   * Handler that is called when a user starts a column resize.\n   */\n  onResizeStart?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called when a user performs a column resize.\n   * Can be used with the width property on columns to put the column widths into\n   * a controlled state.\n   */\n  onResize?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * Handler that is called after a user performs a column resize.\n   * Can be used to store the widths of columns for another future session.\n   */\n  onResizeEnd?: (widths: Map<Key, ColumnSize>) => void,\n  /**\n   * The drag and drop hooks returned by `useDragAndDrop` used to enable drag and drop behavior for the TableView.\n   * @version beta\n   */\n  dragAndDropHooks?: DragAndDropHooks['dragAndDropHooks'],\n  /**\n   * Whether the TableView should support expandable rows. Requires the feature flag to be enabled first, see https://react-spectrum.adobe.com/react-spectrum/TableView.html#expandable-rows.\n   * @version alpha\n   * @private\n   */\n  UNSTABLE_allowsExpandableRows?: boolean,\n  /**\n   * The currently expanded keys in the collection (controlled). Requires the feature flag to be\n   * enabled along with UNSTABLE_allowsExpandableRows, see https://react-spectrum.adobe.com/react-spectrum/TableView.html#expandable-rows.\n   * @version alpha\n   * @private\n   */\n  UNSTABLE_expandedKeys?: 'all' | Iterable<Key>,\n  /**\n   * The initial expanded keys in the collection (uncontrolled). Requires the feature flag to be\n   * enabled along with UNSTABLE_allowsExpandableRows, see https://react-spectrum.adobe.com/react-spectrum/TableView.html#expandable-rows.\n   * @version alpha\n   * @private\n   */\n  UNSTABLE_defaultExpandedKeys?: 'all' | Iterable<Key>,\n  /**\n   * Handler that is called when items are expanded or collapsed. Requires the feature flag to be\n   * enabled along with UNSTABLE_allowsExpandableRows, see https://react-spectrum.adobe.com/react-spectrum/TableView.html#expandable-rows.\n   * @version alpha\n   * @private\n   */\n  UNSTABLE_onExpandedChange?: (keys: Set<Key>) => any\n}\n\nfunction TableViewWrapper<T extends object>(props: SpectrumTableProps<T>, ref: DOMRef<HTMLDivElement>) {\n  let {UNSTABLE_allowsExpandableRows, ...otherProps} = props;\n  if (tableNestedRows() && UNSTABLE_allowsExpandableRows) {\n    return <TreeGridTableView {...otherProps} ref={ref} />;\n  } else {\n    return <TableView {...otherProps} ref={ref} />;\n  }\n}\n\n/**\n * Tables are containers for displaying information. They allow users to quickly scan, sort, compare, and take action on large amounts of data.\n */\nconst _TableViewWrapper = React.forwardRef(TableViewWrapper) as <T>(props: SpectrumTableProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\n\nexport {_TableViewWrapper as TableView};\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AA2FA,SAASA,uCAAmCC,KAA4B,EAAEC,GAA2B;EACnG,IAAI;IAAAC,6BAAA,EAACA,6BAA6B;IAAE,GAAGC;EAAA,CAAW,GAAGH,KAAA;EACrD,IAAI,IAAAI,sBAAc,OAAOF,6BAAA,EACvB,oBAAO,IAAAG,YAAA,EAAAC,aAAA,EAAC,GAAAC,yCAAgB;IAAG,GAAGJ,UAAU;IAAEF,GAAA,EAAKA;UAE/C,oBAAO,IAAAI,YAAA,EAAAC,aAAA,EAAC,GAAAE,wCAAQ;IAAG,GAAGL,UAAU;IAAEF,GAAA,EAAKA;;AAE3C;AAEA;;;AAGA,MAAMQ,wCAAA,gBAAoB,IAAAJ,YAAI,EAAEK,UAAU,CAACX,sCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}