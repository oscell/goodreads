{"ast":null,"code":"import { useColor as $aa90ad8b2b1d015f$export$5aadd9c0606af5c2 } from \"./useColor.mjs\";\nimport { useNumberFieldState as $52OvP$useNumberFieldState } from \"@react-stately/numberfield\";\nimport { useControlledState as $52OvP$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $52OvP$useMemo } from \"react\";\nfunction $31a863bb88e75dd6$export$b9fc0d69c9190c4a(props) {\n  let {\n    channel: channel,\n    colorSpace: colorSpace,\n    locale: locale\n  } = props;\n  let black = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)('#000');\n  let initialValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(props.value);\n  let initialDefaultValue = (0, $aa90ad8b2b1d015f$export$5aadd9c0606af5c2)(props.defaultValue);\n  let [colorValue, setColor] = (0, $52OvP$useControlledState)(initialValue, initialDefaultValue !== null && initialDefaultValue !== void 0 ? initialDefaultValue : null, props.onChange);\n  let color = (0, $52OvP$useMemo)(() => {\n    let nonNullColorValue = colorValue || black;\n    return colorSpace && nonNullColorValue ? nonNullColorValue.toFormat(colorSpace) : nonNullColorValue;\n  }, [black, colorValue, colorSpace]);\n  let value = color.getChannelValue(channel);\n  let range = color.getChannelRange(channel);\n  let formatOptions = (0, $52OvP$useMemo)(() => color.getChannelFormatOptions(channel), [color, channel]);\n  let multiplier = formatOptions.style === 'percent' && range.maxValue === 100 ? 100 : 1;\n  let numberFieldState = (0, $52OvP$useNumberFieldState)({\n    locale: locale,\n    value: colorValue === null ? NaN : value / multiplier,\n    onChange: v => {\n      if (!Number.isNaN(v)) setColor(color.withChannelValue(channel, v * multiplier));else setColor(null);\n    },\n    minValue: range.minValue / multiplier,\n    maxValue: range.maxValue / multiplier,\n    step: range.step / multiplier,\n    formatOptions: formatOptions\n  });\n  return {\n    ...numberFieldState,\n    colorValue: color\n  };\n}\nexport { $31a863bb88e75dd6$export$b9fc0d69c9190c4a as useColorChannelFieldState };","map":{"version":3,"names":["$31a863bb88e75dd6$export$b9fc0d69c9190c4a","props","channel","colorSpace","locale","black","$aa90ad8b2b1d015f$export$5aadd9c0606af5c2","initialValue","value","initialDefaultValue","defaultValue","colorValue","setColor","$52OvP$useControlledState","onChange","color","$52OvP$useMemo","nonNullColorValue","toFormat","getChannelValue","range","getChannelRange","formatOptions","getChannelFormatOptions","multiplier","style","maxValue","numberFieldState","$52OvP$useNumberFieldState","NaN","v","Number","isNaN","withChannelValue","minValue","step"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-stately/color/dist/packages/@react-stately/color/src/useColorChannelFieldState.ts"],"sourcesContent":["import {Color, ColorChannel, ColorFieldProps, ColorSpace} from '@react-types/color';\nimport {NumberFieldState, useNumberFieldState} from '@react-stately/numberfield';\nimport {useColor} from './useColor';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface ColorChannelFieldProps extends ColorFieldProps {\n  colorSpace?: ColorSpace,\n  channel: ColorChannel\n}\n\nexport interface ColorChannelFieldStateOptions extends ColorChannelFieldProps {\n  locale: string\n}\n\nexport interface ColorChannelFieldState extends NumberFieldState {\n  colorValue: Color\n}\n\n/**\n * Provides state management for a color channel field, allowing users to edit the\n * value of an individual color channel.\n */\nexport function useColorChannelFieldState(props: ColorChannelFieldStateOptions): ColorChannelFieldState {\n  let {channel, colorSpace, locale} = props;\n  let black = useColor('#000')!;\n  let initialValue = useColor(props.value);\n  let initialDefaultValue = useColor(props.defaultValue);\n  let [colorValue, setColor] = useControlledState(initialValue, initialDefaultValue ?? null, props.onChange);\n  let color = useMemo(() => {\n    let nonNullColorValue = colorValue || black;\n    return colorSpace && nonNullColorValue ? nonNullColorValue.toFormat(colorSpace) : nonNullColorValue;\n  }, [black, colorValue, colorSpace]);\n  let value = color.getChannelValue(channel);\n  let range = color.getChannelRange(channel);\n  let formatOptions = useMemo(() => color.getChannelFormatOptions(channel), [color, channel]);\n  let multiplier = formatOptions.style === 'percent' && range.maxValue === 100 ? 100 : 1;\n\n  let numberFieldState = useNumberFieldState({\n    locale,\n    value: colorValue === null ? NaN : value / multiplier,\n    onChange: (v) => {\n      if (!Number.isNaN(v)) {\n        setColor(color.withChannelValue(channel, v * multiplier));\n      } else {\n        setColor(null);\n      }\n    },\n    minValue: range.minValue / multiplier,\n    maxValue: range.maxValue / multiplier,\n    step: range.step / multiplier,\n    formatOptions\n  });\n\n  return {\n    ...numberFieldState,\n    colorValue: color\n  };\n}\n"],"mappings":";;;;AAuBO,SAASA,0CAA0BC,KAAoC;EAC5E,IAAI;IAAAC,OAAA,EAACA,OAAO;IAAAC,UAAA,EAAEA,UAAU;IAAAC,MAAA,EAAEA;EAAM,CAAC,GAAGH,KAAA;EACpC,IAAII,KAAA,GAAQ,IAAAC,yCAAO,EAAE;EACrB,IAAIC,YAAA,GAAe,IAAAD,yCAAO,EAAEL,KAAA,CAAMO,KAAK;EACvC,IAAIC,mBAAA,GAAsB,IAAAH,yCAAO,EAAEL,KAAA,CAAMS,YAAY;EACrD,IAAI,CAACC,UAAA,EAAYC,QAAA,CAAS,GAAG,IAAAC,yBAAiB,EAAEN,YAAA,EAAcE,mBAAA,aAAAA,mBAAA,cAAAA,mBAAA,GAAuB,MAAMR,KAAA,CAAMa,QAAQ;EACzG,IAAIC,KAAA,GAAQ,IAAAC,cAAM,EAAE;IAClB,IAAIC,iBAAA,GAAoBN,UAAA,IAAcN,KAAA;IACtC,OAAOF,UAAA,IAAcc,iBAAA,GAAoBA,iBAAA,CAAkBC,QAAQ,CAACf,UAAA,IAAcc,iBAAA;EACpF,GAAG,CAACZ,KAAA,EAAOM,UAAA,EAAYR,UAAA,CAAW;EAClC,IAAIK,KAAA,GAAQO,KAAA,CAAMI,eAAe,CAACjB,OAAA;EAClC,IAAIkB,KAAA,GAAQL,KAAA,CAAMM,eAAe,CAACnB,OAAA;EAClC,IAAIoB,aAAA,GAAgB,IAAAN,cAAM,EAAE,MAAMD,KAAA,CAAMQ,uBAAuB,CAACrB,OAAA,GAAU,CAACa,KAAA,EAAOb,OAAA,CAAQ;EAC1F,IAAIsB,UAAA,GAAaF,aAAA,CAAcG,KAAK,KAAK,aAAaL,KAAA,CAAMM,QAAQ,KAAK,MAAM,MAAM;EAErF,IAAIC,gBAAA,GAAmB,IAAAC,0BAAkB,EAAE;YACzCxB,MAAA;IACAI,KAAA,EAAOG,UAAA,KAAe,OAAOkB,GAAA,GAAMrB,KAAA,GAAQgB,UAAA;IAC3CV,QAAA,EAAWgB,CAAA;MACT,IAAI,CAACC,MAAA,CAAOC,KAAK,CAACF,CAAA,GAChBlB,QAAA,CAASG,KAAA,CAAMkB,gBAAgB,CAAC/B,OAAA,EAAS4B,CAAA,GAAIN,UAAA,QAE7CZ,QAAA,CAAS;IAEb;IACAsB,QAAA,EAAUd,KAAA,CAAMc,QAAQ,GAAGV,UAAA;IAC3BE,QAAA,EAAUN,KAAA,CAAMM,QAAQ,GAAGF,UAAA;IAC3BW,IAAA,EAAMf,KAAA,CAAMe,IAAI,GAAGX,UAAA;mBACnBF;EACF;EAEA,OAAO;IACL,GAAGK,gBAAgB;IACnBhB,UAAA,EAAYI;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}