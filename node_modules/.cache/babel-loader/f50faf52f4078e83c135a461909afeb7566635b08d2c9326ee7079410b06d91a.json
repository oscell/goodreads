{"ast":null,"code":"import { useDraggableCollection as $fvh6P$useDraggableCollection, useDraggableItem as $fvh6P$useDraggableItem, DragPreview as $fvh6P$DragPreview, useDroppableItem as $fvh6P$useDroppableItem, useDroppableCollection as $fvh6P$useDroppableCollection, useDropIndicator as $fvh6P$useDropIndicator, ListDropTargetDelegate as $fvh6P$ListDropTargetDelegate } from \"react-aria\";\nimport { useDraggableCollectionState as $fvh6P$useDraggableCollectionState, useDroppableCollectionState as $fvh6P$useDroppableCollectionState } from \"react-stately\";\nimport { isVirtualDragging as $fvh6P$isVirtualDragging } from \"@react-aria/dnd\";\nimport { useMemo as $fvh6P$useMemo } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d8f176866e6dc039$export$2cfc5be7a55829f6(options) {\n  let dragAndDropHooks = (0, $fvh6P$useMemo)(() => {\n    let {\n      onDrop: onDrop,\n      onInsert: onInsert,\n      onItemDrop: onItemDrop,\n      onReorder: onReorder,\n      onRootDrop: onRootDrop,\n      getItems: getItems,\n      renderDragPreview: renderDragPreview,\n      renderDropIndicator: renderDropIndicator,\n      dropTargetDelegate: dropTargetDelegate\n    } = options;\n    let isDraggable = !!getItems;\n    let isDroppable = !!(onDrop || onInsert || onItemDrop || onReorder || onRootDrop);\n    let hooks = {};\n    if (isDraggable) {\n      hooks.useDraggableCollectionState = function useDraggableCollectionStateOverride(props) {\n        return (0, $fvh6P$useDraggableCollectionState)({\n          ...props,\n          ...options\n        });\n      };\n      hooks.useDraggableCollection = (0, $fvh6P$useDraggableCollection);\n      hooks.useDraggableItem = (0, $fvh6P$useDraggableItem);\n      hooks.DragPreview = (0, $fvh6P$DragPreview);\n      hooks.renderDragPreview = renderDragPreview;\n      hooks.isVirtualDragging = (0, $fvh6P$isVirtualDragging);\n    }\n    if (isDroppable) {\n      hooks.useDroppableCollectionState = function useDroppableCollectionStateOverride(props) {\n        return (0, $fvh6P$useDroppableCollectionState)({\n          ...props,\n          ...options\n        });\n      };\n      hooks.useDroppableItem = (0, $fvh6P$useDroppableItem);\n      hooks.useDroppableCollection = function useDroppableCollectionOverride(props, state, ref) {\n        return (0, $fvh6P$useDroppableCollection)({\n          ...props,\n          ...options\n        }, state, ref);\n      };\n      hooks.useDropIndicator = (0, $fvh6P$useDropIndicator);\n      hooks.renderDropIndicator = renderDropIndicator;\n      hooks.dropTargetDelegate = dropTargetDelegate;\n      hooks.ListDropTargetDelegate = (0, $fvh6P$ListDropTargetDelegate);\n    }\n    return hooks;\n  }, [options]);\n  return {\n    dragAndDropHooks: dragAndDropHooks\n  };\n}\nexport { $d8f176866e6dc039$export$2cfc5be7a55829f6 as useDragAndDrop };","map":{"version":3,"names":["$d8f176866e6dc039$export$2cfc5be7a55829f6","options","dragAndDropHooks","$fvh6P$useMemo","onDrop","onInsert","onItemDrop","onReorder","onRootDrop","getItems","renderDragPreview","renderDropIndicator","dropTargetDelegate","isDraggable","isDroppable","hooks","useDraggableCollectionState","useDraggableCollectionStateOverride","props","$fvh6P$useDraggableCollectionState","useDraggableCollection","$fvh6P$useDraggableCollection","useDraggableItem","$fvh6P$useDraggableItem","DragPreview","$fvh6P$DragPreview","isVirtualDragging","$fvh6P$isVirtualDragging","useDroppableCollectionState","useDroppableCollectionStateOverride","$fvh6P$useDroppableCollectionState","useDroppableItem","$fvh6P$useDroppableItem","useDroppableCollection","useDroppableCollectionOverride","state","ref","$fvh6P$useDroppableCollection","useDropIndicator","$fvh6P$useDropIndicator","ListDropTargetDelegate","$fvh6P$ListDropTargetDelegate"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/useDragAndDrop.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  DropIndicatorProps as AriaDropIndicatorProps,\n  DraggableCollectionOptions,\n  DraggableItemProps,\n  DraggableItemResult,\n  DragItem,\n  DragPreview,\n  DropIndicatorAria,\n  DroppableCollectionOptions,\n  DroppableCollectionResult,\n  DroppableItemOptions,\n  DroppableItemResult,\n  DropTarget,\n  DropTargetDelegate,\n  ListDropTargetDelegate,\n  useDraggableCollection,\n  useDraggableItem,\n  useDropIndicator,\n  useDroppableCollection,\n  useDroppableItem\n} from 'react-aria';\nimport {DraggableCollectionProps, DroppableCollectionProps, Key, RefObject} from '@react-types/shared';\nimport {\n  DraggableCollectionState,\n  DraggableCollectionStateOptions,\n  DroppableCollectionState,\n  DroppableCollectionStateOptions,\n  useDraggableCollectionState,\n  useDroppableCollectionState\n} from 'react-stately';\nimport {isVirtualDragging} from '@react-aria/dnd';\nimport {JSX, useMemo} from 'react';\n\ninterface DraggableCollectionStateOpts extends Omit<DraggableCollectionStateOptions, 'getItems'> {}\n\ninterface DragHooks {\n  useDraggableCollectionState?: (props: DraggableCollectionStateOpts) => DraggableCollectionState,\n  useDraggableCollection?: (props: DraggableCollectionOptions, state: DraggableCollectionState, ref: RefObject<HTMLElement | null>) => void,\n  useDraggableItem?: (props: DraggableItemProps, state: DraggableCollectionState) => DraggableItemResult,\n  DragPreview?: typeof DragPreview,\n  renderDragPreview?: (items: DragItem[]) => JSX.Element,\n  isVirtualDragging?: () => boolean\n}\n\ninterface DropHooks {\n  useDroppableCollectionState?: (props: DroppableCollectionStateOptions) => DroppableCollectionState,\n  useDroppableCollection?: (props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) => DroppableCollectionResult,\n  useDroppableItem?: (options: DroppableItemOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) => DroppableItemResult,\n  useDropIndicator?: (props: AriaDropIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) => DropIndicatorAria,\n  renderDropIndicator?: (target: DropTarget) => JSX.Element,\n  dropTargetDelegate?: DropTargetDelegate,\n  ListDropTargetDelegate: typeof ListDropTargetDelegate\n}\n\nexport type DragAndDropHooks = DragHooks & DropHooks\n\nexport interface DragAndDrop {\n  /** Drag and drop hooks for the collection element.  */\n  dragAndDropHooks: DragAndDropHooks\n}\n\nexport interface DragAndDropOptions extends Omit<DraggableCollectionProps, 'preview' | 'getItems'>, DroppableCollectionProps {\n  /**\n   * A function that returns the items being dragged. If not specified, we assume that the collection is not draggable.\n   * @default () => []\n   */\n  getItems?: (keys: Set<Key>) => DragItem[],\n  /**\n   * A function that renders a drag preview, which is shown under the user's cursor while dragging.\n   * By default, a copy of the dragged element is rendered.\n   */\n  renderDragPreview?: (items: DragItem[]) => JSX.Element,\n  /**\n   * A function that renders a drop indicator element between two items in a collection.\n   * This should render a `<DropIndicator>` element. If this function is not provided, a\n   * default DropIndicator is provided.\n   */\n  renderDropIndicator?: (target: DropTarget) => JSX.Element,\n  /** A custom delegate object that provides drop targets for pointer coordinates within the collection. */\n  dropTargetDelegate?: DropTargetDelegate,\n  /** Whether the drag and drop events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Provides the hooks required to enable drag and drop behavior for a drag and drop compatible collection component.\n */\nexport function useDragAndDrop(options: DragAndDropOptions): DragAndDrop {\n  let dragAndDropHooks = useMemo(() => {\n    let {\n      onDrop,\n      onInsert,\n      onItemDrop,\n      onReorder,\n      onRootDrop,\n      getItems,\n      renderDragPreview,\n      renderDropIndicator,\n      dropTargetDelegate\n    } = options;\n\n    let isDraggable = !!getItems;\n    let isDroppable = !!(onDrop || onInsert || onItemDrop || onReorder || onRootDrop);\n\n    let hooks = {} as DragAndDropHooks;\n    if (isDraggable) {\n      hooks.useDraggableCollectionState = function useDraggableCollectionStateOverride(props: DraggableCollectionStateOpts) {\n        return useDraggableCollectionState({...props, ...options} as DraggableCollectionStateOptions);\n      };\n      hooks.useDraggableCollection = useDraggableCollection;\n      hooks.useDraggableItem = useDraggableItem;\n      hooks.DragPreview = DragPreview;\n      hooks.renderDragPreview = renderDragPreview;\n      hooks.isVirtualDragging = isVirtualDragging;\n    }\n\n    if (isDroppable) {\n      hooks.useDroppableCollectionState = function useDroppableCollectionStateOverride(props: DroppableCollectionStateOptions) {\n        return useDroppableCollectionState({...props, ...options});\n      };\n      hooks.useDroppableItem = useDroppableItem;\n      hooks.useDroppableCollection = function useDroppableCollectionOverride(props: DroppableCollectionOptions, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>) {\n        return useDroppableCollection({...props, ...options}, state, ref);\n      };\n      hooks.useDropIndicator = useDropIndicator;\n      hooks.renderDropIndicator = renderDropIndicator;\n      hooks.dropTargetDelegate = dropTargetDelegate;\n      hooks.ListDropTargetDelegate = ListDropTargetDelegate;\n    }\n\n    return hooks;\n  }, [options]);\n\n  return {\n    dragAndDropHooks\n  };\n}\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AAmGO,SAASA,0CAAeC,OAA2B;EACxD,IAAIC,gBAAA,GAAmB,IAAAC,cAAM,EAAE;IAC7B,IAAI;MAAAC,MAAA,EACFA,MAAM;MAAAC,QAAA,EACNA,QAAQ;MAAAC,UAAA,EACRA,UAAU;MAAAC,SAAA,EACVA,SAAS;MAAAC,UAAA,EACTA,UAAU;MAAAC,QAAA,EACVA,QAAQ;MAAAC,iBAAA,EACRA,iBAAiB;MAAAC,mBAAA,EACjBA,mBAAmB;MAAAC,kBAAA,EACnBA;IAAkB,CACnB,GAAGX,OAAA;IAEJ,IAAIY,WAAA,GAAc,CAAC,CAACJ,QAAA;IACpB,IAAIK,WAAA,GAAc,CAAC,EAAEV,MAAA,IAAUC,QAAA,IAAYC,UAAA,IAAcC,SAAA,IAAaC,UAAS;IAE/E,IAAIO,KAAA,GAAQ,CAAC;IACb,IAAIF,WAAA,EAAa;MACfE,KAAA,CAAMC,2BAA2B,GAAG,SAASC,oCAAoCC,KAAmC;QAClH,OAAO,IAAAC,kCAA0B,EAAE;UAAC,GAAGD,KAAK;UAAE,GAAGjB;QAAO;MAC1D;MACAc,KAAA,CAAMK,sBAAsB,IAAG,GAAAC,6BAAqB;MACpDN,KAAA,CAAMO,gBAAgB,IAAG,GAAAC,uBAAe;MACxCR,KAAA,CAAMS,WAAW,IAAG,GAAAC,kBAAU;MAC9BV,KAAA,CAAML,iBAAiB,GAAGA,iBAAA;MAC1BK,KAAA,CAAMW,iBAAiB,IAAG,GAAAC,wBAAgB;IAC5C;IAEA,IAAIb,WAAA,EAAa;MACfC,KAAA,CAAMa,2BAA2B,GAAG,SAASC,oCAAoCX,KAAsC;QACrH,OAAO,IAAAY,kCAA0B,EAAE;UAAC,GAAGZ,KAAK;UAAE,GAAGjB;QAAO;MAC1D;MACAc,KAAA,CAAMgB,gBAAgB,IAAG,GAAAC,uBAAe;MACxCjB,KAAA,CAAMkB,sBAAsB,GAAG,SAASC,+BAA+BhB,KAAiC,EAAEiB,KAA+B,EAAEC,GAAkC;QAC3K,OAAO,IAAAC,6BAAqB,EAAE;UAAC,GAAGnB,KAAK;UAAE,GAAGjB;QAAO,GAAGkC,KAAA,EAAOC,GAAA;MAC/D;MACArB,KAAA,CAAMuB,gBAAgB,IAAG,GAAAC,uBAAe;MACxCxB,KAAA,CAAMJ,mBAAmB,GAAGA,mBAAA;MAC5BI,KAAA,CAAMH,kBAAkB,GAAGA,kBAAA;MAC3BG,KAAA,CAAMyB,sBAAsB,IAAG,GAAAC,6BAAqB;IACtD;IAEA,OAAO1B,KAAA;EACT,GAAG,CAACd,OAAA,CAAQ;EAEZ,OAAO;sBACLC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}