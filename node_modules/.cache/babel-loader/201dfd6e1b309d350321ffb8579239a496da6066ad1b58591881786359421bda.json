{"ast":null,"code":"import { InsertionIndicator as $7ee9a922ee4e8032$export$2c0bab5914a9d088 } from \"./InsertionIndicator.mjs\";\nimport $7lS7h$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { Nubbin as $cb7d341e8868d81d$export$d9658cdf8c86807 } from \"./Nubbin.mjs\";\nimport { Resizer as $fc695d2eafc2b351$export$48a76196cafe3b93, ResizeStateContext as $fc695d2eafc2b351$export$b517d84d4ad20b24 } from \"./Resizer.mjs\";\nimport { RootDropIndicator as $4e6fc36ba71ba405$export$d30a7814cfd4033e } from \"./RootDropIndicator.mjs\";\nimport { DragPreview as $daa6ead3d9d3506a$export$905ab40ac2179daa } from \"./DragPreview.mjs\";\nimport \"./vars.bd693cb4.css\";\nimport $7lS7h$table_vars_cssmodulejs from \"./table_vars_css.mjs\";\nimport \"./table.11fc8462.css\";\nimport $7lS7h$table_cssmodulejs from \"./table_css.mjs\";\nimport { TableViewLayout as $5fb43af69b290859$export$725d101278f5a47b } from \"./TableViewLayout.mjs\";\nimport $7lS7h$spectrumiconsuiArrowDownSmall from \"@spectrum-icons/ui/ArrowDownSmall\";\nimport { Checkbox as $7lS7h$Checkbox } from \"@react-spectrum/checkbox\";\nimport $7lS7h$spectrumiconsuiChevronDownMedium from \"@spectrum-icons/ui/ChevronDownMedium\";\nimport $7lS7h$spectrumiconsuiChevronLeftMedium from \"@spectrum-icons/ui/ChevronLeftMedium\";\nimport $7lS7h$spectrumiconsuiChevronRightMedium from \"@spectrum-icons/ui/ChevronRightMedium\";\nimport { useStyleProps as $7lS7h$useStyleProps, useDOMRef as $7lS7h$useDOMRef, classNames as $7lS7h$classNames, useFocusableRef as $7lS7h$useFocusableRef, useUnwrapDOMRef as $7lS7h$useUnwrapDOMRef } from \"@react-spectrum/utils\";\nimport { useFocusRing as $7lS7h$useFocusRing, FocusScope as $7lS7h$FocusScope, FocusRing as $7lS7h$FocusRing } from \"@react-aria/focus\";\nimport { getInteractionModality as $7lS7h$getInteractionModality, usePress as $7lS7h$usePress, useHover as $7lS7h$useHover, isFocusVisible as $7lS7h$isFocusVisible } from \"@react-aria/interactions\";\nimport { mergeProps as $7lS7h$mergeProps, useLoadMore as $7lS7h$useLoadMore, scrollIntoView as $7lS7h$scrollIntoView, scrollIntoViewport as $7lS7h$scrollIntoViewport, isAndroid as $7lS7h$isAndroid } from \"@react-aria/utils\";\nimport { MenuTrigger as $7lS7h$MenuTrigger, Menu as $7lS7h$Menu, Item as $7lS7h$Item } from \"@react-spectrum/menu\";\nimport { useVirtualizerState as $7lS7h$useVirtualizerState } from \"@react-stately/virtualizer\";\nimport { setScrollLeft as $7lS7h$setScrollLeft, ScrollView as $7lS7h$ScrollView, layoutInfoToStyle as $7lS7h$layoutInfoToStyle, VirtualizerItem as $7lS7h$VirtualizerItem } from \"@react-aria/virtualizer\";\nimport $7lS7h$spectrumiconsuiListGripper from \"@spectrum-icons/ui/ListGripper\";\nimport { ListKeyboardDelegate as $7lS7h$ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { ProgressCircle as $7lS7h$ProgressCircle } from \"@react-spectrum/progress\";\nimport $7lS7h$react, { useContext as $7lS7h$useContext, useRef as $7lS7h$useRef, useEffect as $7lS7h$useEffect, useState as $7lS7h$useState, useMemo as $7lS7h$useMemo, useCallback as $7lS7h$useCallback } from \"react\";\nimport { useTableColumnResizeState as $7lS7h$useTableColumnResizeState } from \"@react-stately/table\";\nimport { TooltipTrigger as $7lS7h$TooltipTrigger, Tooltip as $7lS7h$Tooltip } from \"@react-spectrum/tooltip\";\nimport { useButton as $7lS7h$useButton } from \"@react-aria/button\";\nimport { useLocale as $7lS7h$useLocale, useLocalizedStringFormatter as $7lS7h$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useProviderProps as $7lS7h$useProviderProps, useProvider as $7lS7h$useProvider } from \"@react-spectrum/provider\";\nimport { useTable as $7lS7h$useTable, useTableRowGroup as $7lS7h$useTableRowGroup, useTableColumnHeader as $7lS7h$useTableColumnHeader, useTableSelectAllCheckbox as $7lS7h$useTableSelectAllCheckbox, useTableRow as $7lS7h$useTableRow, useTableHeaderRow as $7lS7h$useTableHeaderRow, useTableCell as $7lS7h$useTableCell, useTableSelectionCheckbox as $7lS7h$useTableSelectionCheckbox } from \"@react-aria/table\";\nimport { VisuallyHidden as $7lS7h$VisuallyHidden, useVisuallyHidden as $7lS7h$useVisuallyHidden } from \"@react-aria/visually-hidden\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $bd013581c0a4b065$var$DEFAULT_HEADER_HEIGHT = {\n  medium: 34,\n  large: 40\n};\nconst $bd013581c0a4b065$var$DEFAULT_HIDE_HEADER_CELL_WIDTH = {\n  medium: 38,\n  large: 46\n};\nconst $bd013581c0a4b065$var$ROW_HEIGHTS = {\n  compact: {\n    medium: 32,\n    large: 40\n  },\n  regular: {\n    medium: 40,\n    large: 50\n  },\n  spacious: {\n    medium: 48,\n    large: 60\n  }\n};\nconst $bd013581c0a4b065$var$SELECTION_CELL_DEFAULT_WIDTH = {\n  medium: 38,\n  large: 48\n};\nconst $bd013581c0a4b065$var$DRAG_BUTTON_CELL_DEFAULT_WIDTH = {\n  medium: 16,\n  large: 20\n};\nconst $bd013581c0a4b065$var$LEVEL_OFFSET_WIDTH = {\n  medium: 16,\n  large: 20\n};\nconst $bd013581c0a4b065$export$93e4b0b2cc49b648 = /*#__PURE__*/(0, $7lS7h$react).createContext(null);\nfunction $bd013581c0a4b065$export$3cb274deb6c2d854() {\n  return (0, $7lS7h$useContext)($bd013581c0a4b065$export$93e4b0b2cc49b648);\n}\nconst $bd013581c0a4b065$export$d288a7dd40372bc = /*#__PURE__*/(0, $7lS7h$react).createContext(null);\nfunction $bd013581c0a4b065$export$3f8f74b6bfd2c5df() {\n  return (0, $7lS7h$useContext)($bd013581c0a4b065$export$d288a7dd40372bc);\n}\nfunction $bd013581c0a4b065$var$TableViewBase(props, ref) {\n  var _dropState_target;\n  props = (0, $7lS7h$useProviderProps)(props);\n  let {\n    isQuiet: isQuiet,\n    onAction: onAction,\n    onResizeStart: propsOnResizeStart,\n    onResizeEnd: propsOnResizeEnd,\n    dragAndDropHooks: dragAndDropHooks,\n    state: state\n  } = props;\n  let isTableDraggable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);\n  let isTableDroppable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState);\n  let dragHooksProvided = (0, $7lS7h$useRef)(isTableDraggable);\n  let dropHooksProvided = (0, $7lS7h$useRef)(isTableDroppable);\n  (0, $7lS7h$useEffect)(() => {\n    if (dragHooksProvided.current !== isTableDraggable) console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    if (dropHooksProvided.current !== isTableDroppable) console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    if ('expandedKeys' in state && (isTableDraggable || isTableDroppable)) console.warn('Drag and drop is not yet fully supported with expandable rows and may produce unexpected results.');\n  }, [isTableDraggable, isTableDroppable, state]);\n  let {\n    styleProps: styleProps\n  } = (0, $7lS7h$useStyleProps)(props);\n  let {\n    scale: scale\n  } = (0, $7lS7h$useProvider)();\n  // Starts when the user selects resize from the menu, ends when resizing ends\n  // used to control the visibility of the resizer Nubbin\n  let [isInResizeMode, setIsInResizeMode] = (0, $7lS7h$useState)(false);\n  // Starts when the resizer is actually moved\n  // entering resizing/exiting resizing doesn't trigger a render\n  // with table layout, so we need to track it here\n  let [, setIsResizing] = (0, $7lS7h$useState)(false);\n  let domRef = (0, $7lS7h$useDOMRef)(ref);\n  let headerRef = (0, $7lS7h$useRef)(undefined);\n  let bodyRef = (0, $7lS7h$useRef)(undefined);\n  let density = props.density || 'regular';\n  let layout = (0, $7lS7h$useMemo)(() => new (0, $5fb43af69b290859$export$725d101278f5a47b)({\n    // If props.rowHeight is auto, then use estimated heights based on scale, otherwise use fixed heights.\n    rowHeight: props.overflowMode === 'wrap' ? null : $bd013581c0a4b065$var$ROW_HEIGHTS[density][scale],\n    estimatedRowHeight: props.overflowMode === 'wrap' ? $bd013581c0a4b065$var$ROW_HEIGHTS[density][scale] : null,\n    headingHeight: props.overflowMode === 'wrap' ? null : $bd013581c0a4b065$var$DEFAULT_HEADER_HEIGHT[scale],\n    estimatedHeadingHeight: props.overflowMode === 'wrap' ? $bd013581c0a4b065$var$DEFAULT_HEADER_HEIGHT[scale] : null\n  }),\n  // don't recompute when state.collection changes, only used for initial value\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.overflowMode, scale, density]);\n  let dragState;\n  let preview = (0, $7lS7h$useRef)(null);\n  if (isTableDraggable) {\n    dragState = dragAndDropHooks.useDraggableCollectionState({\n      collection: state.collection,\n      selectionManager: state.selectionManager,\n      preview: preview\n    });\n    dragAndDropHooks.useDraggableCollection({}, dragState, domRef);\n  }\n  let DragPreview = dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.DragPreview;\n  let dropState;\n  let droppableCollection;\n  let isRootDropTarget;\n  if (isTableDroppable) {\n    dropState = dragAndDropHooks.useDroppableCollectionState({\n      collection: state.collection,\n      selectionManager: state.selectionManager\n    });\n    droppableCollection = dragAndDropHooks.useDroppableCollection({\n      keyboardDelegate: new (0, $7lS7h$ListKeyboardDelegate)({\n        collection: state.collection,\n        disabledKeys: state.selectionManager.disabledKeys,\n        ref: domRef,\n        layoutDelegate: layout\n      }),\n      dropTargetDelegate: layout\n    }, dropState, domRef);\n    isRootDropTarget = dropState.isDropTarget({\n      type: 'root'\n    });\n  }\n  let {\n    gridProps: gridProps\n  } = (0, $7lS7h$useTable)({\n    ...props,\n    isVirtualized: true,\n    layoutDelegate: layout,\n    onRowAction: onAction,\n    scrollRef: bodyRef\n  }, state, domRef);\n  let [headerMenuOpen, setHeaderMenuOpen] = (0, $7lS7h$useState)(false);\n  let [headerRowHovered, setHeaderRowHovered] = (0, $7lS7h$useState)(false);\n  // This overrides collection view's renderWrapper to support DOM hierarchy.\n  let renderWrapper = (0, $7lS7h$useCallback)((parent, reusableView, children, renderChildren) => {\n    if (reusableView.viewType === 'rowgroup') return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableRowGroup, {\n      key: reusableView.key,\n      layoutInfo: reusableView.layoutInfo,\n      parent: parent === null || parent === void 0 ? void 0 : parent.layoutInfo,\n      // Override the default role=\"rowgroup\" with role=\"presentation\",\n      // in favor or adding role=\"rowgroup\" to the ScrollView with\n      // ref={bodyRef} in the TableVirtualizer below.\n      role: \"presentation\"\n    }, renderChildren(children));\n    if (reusableView.viewType === 'header') return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableHeader, {\n      key: reusableView.key,\n      layoutInfo: reusableView.layoutInfo,\n      parent: parent === null || parent === void 0 ? void 0 : parent.layoutInfo\n    }, renderChildren(children));\n    if (reusableView.viewType === 'row') return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableRow, {\n      key: reusableView.key,\n      item: reusableView.content,\n      layoutInfo: reusableView.layoutInfo,\n      parent: parent === null || parent === void 0 ? void 0 : parent.layoutInfo\n    }, renderChildren(children));\n    if (reusableView.viewType === 'headerrow') return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableHeaderRow, {\n      onHoverChange: setHeaderRowHovered,\n      key: reusableView.key,\n      layoutInfo: reusableView.layoutInfo,\n      parent: parent === null || parent === void 0 ? void 0 : parent.layoutInfo,\n      item: reusableView.content\n    }, renderChildren(children));\n    return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableCellWrapper, {\n      key: reusableView.key,\n      layoutInfo: reusableView.layoutInfo,\n      virtualizer: reusableView.virtualizer,\n      parent: parent\n    }, reusableView.rendered);\n  }, []);\n  let renderView = (0, $7lS7h$useCallback)((type, item) => {\n    switch (type) {\n      case 'header':\n      case 'rowgroup':\n      case 'section':\n      case 'row':\n      case 'headerrow':\n        return null;\n      case 'cell':\n        if (item.props.isSelectionCell) return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableCheckboxCell, {\n          cell: item\n        });\n        if (item.props.isDragButtonCell) return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableDragCell, {\n          cell: item\n        });\n        return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableCell, {\n          cell: item\n        });\n      case 'placeholder':\n        // TODO: move to react-aria?\n        return /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n          role: \"gridcell\",\n          \"aria-colindex\": item.index + 1,\n          \"aria-colspan\": item.colspan > 1 ? item.colspan : null\n        });\n      case 'column':\n        if (item.props.isSelectionCell) return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableSelectAllCell, {\n          column: item\n        });\n        if (item.props.isDragButtonCell) return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableDragHeaderCell, {\n          column: item\n        });\n        // TODO: consider this case, what if we have hidden headers and a empty table\n        if (item.props.hideHeader) return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$TooltipTrigger), {\n          placement: \"top\",\n          trigger: \"focus\"\n        }, /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableColumnHeader, {\n          column: item\n        }), /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$Tooltip), {\n          placement: \"top\"\n        }, item.rendered));\n        if (item.props.allowsResizing && !item.hasChildNodes) return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$ResizableTableColumnHeader, {\n          column: item\n        });\n        return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableColumnHeader, {\n          column: item\n        });\n      case 'loader':\n        return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$LoadingState, null);\n      case 'empty':\n        return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$EmptyState, null);\n    }\n  }, []);\n  let [isVerticalScrollbarVisible, setVerticalScollbarVisible] = (0, $7lS7h$useState)(false);\n  let [isHorizontalScrollbarVisible, setHorizontalScollbarVisible] = (0, $7lS7h$useState)(false);\n  let viewport = (0, $7lS7h$useRef)({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n  let onVisibleRectChange = (0, $7lS7h$useCallback)(e => {\n    if (viewport.current.width === e.width && viewport.current.height === e.height) return;\n    viewport.current = e;\n    if (bodyRef.current) {\n      setVerticalScollbarVisible(bodyRef.current.clientWidth + 2 < bodyRef.current.offsetWidth);\n      setHorizontalScollbarVisible(bodyRef.current.clientHeight + 2 < bodyRef.current.offsetHeight);\n    }\n  }, []);\n  let {\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $7lS7h$useFocusRing)();\n  let isEmpty = state.collection.size === 0;\n  let onFocusedResizer = () => {\n    bodyRef.current.scrollLeft = headerRef.current.scrollLeft;\n  };\n  let onResizeStart = (0, $7lS7h$useCallback)(widths => {\n    setIsResizing(true);\n    propsOnResizeStart === null || propsOnResizeStart === void 0 ? void 0 : propsOnResizeStart(widths);\n  }, [setIsResizing, propsOnResizeStart]);\n  let onResizeEnd = (0, $7lS7h$useCallback)(widths => {\n    setIsInResizeMode(false);\n    setIsResizing(false);\n    propsOnResizeEnd === null || propsOnResizeEnd === void 0 ? void 0 : propsOnResizeEnd(widths);\n  }, [propsOnResizeEnd, setIsInResizeMode, setIsResizing]);\n  let focusedKey = state.selectionManager.focusedKey;\n  let dropTargetKey = null;\n  if ((dropState === null || dropState === void 0 ? void 0 : (_dropState_target = dropState.target) === null || _dropState_target === void 0 ? void 0 : _dropState_target.type) === 'item') {\n    dropTargetKey = dropState.target.key;\n    if (dropState.target.dropPosition === 'before' && dropTargetKey !== state.collection.getFirstKey())\n      // Normalize to the \"after\" drop position since we only render those in the DOM.\n      // The exception to this is for the first row in the table, where we also render the \"before\" position.\n      dropTargetKey = state.collection.getKeyBefore(dropTargetKey);\n  }\n  let persistedKeys = (0, $7lS7h$useMemo)(() => {\n    return new Set([focusedKey, dropTargetKey].filter(k => k !== null));\n  }, [focusedKey, dropTargetKey]);\n  let mergedProps = (0, $7lS7h$mergeProps)(isTableDroppable && (droppableCollection === null || droppableCollection === void 0 ? void 0 : droppableCollection.collectionProps), gridProps, focusProps, (dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.isVirtualDragging()) && {\n    tabIndex: null\n  });\n  return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$export$93e4b0b2cc49b648.Provider, {\n    value: {\n      state: state,\n      dragState: dragState,\n      dropState: dropState,\n      dragAndDropHooks: dragAndDropHooks,\n      isTableDraggable: isTableDraggable,\n      isTableDroppable: isTableDroppable,\n      layout: layout,\n      onResizeStart: onResizeStart,\n      onResize: props.onResize,\n      onResizeEnd: onResizeEnd,\n      headerRowHovered: headerRowHovered,\n      isInResizeMode: isInResizeMode,\n      setIsInResizeMode: setIsInResizeMode,\n      isEmpty: isEmpty,\n      onFocusedResizer: onFocusedResizer,\n      headerMenuOpen: headerMenuOpen,\n      setHeaderMenuOpen: setHeaderMenuOpen,\n      renderEmptyState: props.renderEmptyState\n    }\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableVirtualizer, {\n    ...mergedProps,\n    ...styleProps,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table', `spectrum-Table--${density}`, {\n      'spectrum-Table--quiet': isQuiet,\n      'spectrum-Table--wrap': props.overflowMode === 'wrap',\n      'spectrum-Table--loadingMore': state.collection.body.props.loadingState === 'loadingMore',\n      'spectrum-Table--isVerticalScrollbarVisible': isVerticalScrollbarVisible,\n      'spectrum-Table--isHorizontalScrollbarVisible': isHorizontalScrollbarVisible\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table'), styleProps.className),\n    tableState: state,\n    layout: layout,\n    collection: state.collection,\n    persistedKeys: persistedKeys,\n    renderView: renderView,\n    renderWrapper: renderWrapper,\n    onVisibleRectChange: onVisibleRectChange,\n    domRef: domRef,\n    headerRef: headerRef,\n    bodyRef: bodyRef,\n    isFocusVisible: isFocusVisible,\n    isVirtualDragging: dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.isVirtualDragging(),\n    isRootDropTarget: isRootDropTarget\n  }), DragPreview && isTableDraggable && /*#__PURE__*/(0, $7lS7h$react).createElement(DragPreview, {\n    ref: preview\n  }, () => {\n    if (dragAndDropHooks.renderPreview) return dragAndDropHooks.renderPreview(dragState.draggingKeys, dragState.draggedKey);\n    let itemCount = dragState.draggingKeys.size;\n    let maxWidth = bodyRef.current.getBoundingClientRect().width;\n    let height = $bd013581c0a4b065$var$ROW_HEIGHTS[density][scale];\n    let itemText = state.collection.getTextValue(dragState.draggedKey);\n    return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $daa6ead3d9d3506a$export$905ab40ac2179daa), {\n      itemText: itemText,\n      itemCount: itemCount,\n      height: height,\n      maxWidth: maxWidth\n    });\n  }));\n}\n// This is a custom Virtualizer that also has a header that syncs its scroll position with the body.\nfunction $bd013581c0a4b065$var$TableVirtualizer(props) {\n  var _layout_getLayoutInfo;\n  let {\n    tableState: tableState,\n    layout: layout,\n    collection: collection,\n    persistedKeys: persistedKeys,\n    renderView: renderView,\n    renderWrapper: renderWrapper,\n    domRef: domRef,\n    bodyRef: bodyRef,\n    headerRef: headerRef,\n    onVisibleRectChange: onVisibleRectChangeProp,\n    isFocusVisible: isFocusVisible,\n    isVirtualDragging: isVirtualDragging,\n    isRootDropTarget: isRootDropTarget,\n    ...otherProps\n  } = props;\n  let {\n    direction: direction\n  } = (0, $7lS7h$useLocale)();\n  let loadingState = collection.body.props.loadingState;\n  let isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n  let onLoadMore = collection.body.props.onLoadMore;\n  let [tableWidth, setTableWidth] = (0, $7lS7h$useState)(0);\n  let {\n    scale: scale\n  } = (0, $7lS7h$useProvider)();\n  const getDefaultWidth = (0, $7lS7h$useCallback)(({\n    props: {\n      hideHeader: hideHeader,\n      isSelectionCell: isSelectionCell,\n      showDivider: showDivider,\n      isDragButtonCell: isDragButtonCell\n    }\n  }) => {\n    if (hideHeader) {\n      let width = $bd013581c0a4b065$var$DEFAULT_HIDE_HEADER_CELL_WIDTH[scale];\n      return showDivider ? width + 1 : width;\n    } else if (isSelectionCell) return $bd013581c0a4b065$var$SELECTION_CELL_DEFAULT_WIDTH[scale];else if (isDragButtonCell) return $bd013581c0a4b065$var$DRAG_BUTTON_CELL_DEFAULT_WIDTH[scale];\n  }, [scale]);\n  const getDefaultMinWidth = (0, $7lS7h$useCallback)(({\n    props: {\n      hideHeader: hideHeader,\n      isSelectionCell: isSelectionCell,\n      showDivider: showDivider,\n      isDragButtonCell: isDragButtonCell\n    }\n  }) => {\n    if (hideHeader) {\n      let width = $bd013581c0a4b065$var$DEFAULT_HIDE_HEADER_CELL_WIDTH[scale];\n      return showDivider ? width + 1 : width;\n    } else if (isSelectionCell) return $bd013581c0a4b065$var$SELECTION_CELL_DEFAULT_WIDTH[scale];else if (isDragButtonCell) return $bd013581c0a4b065$var$DRAG_BUTTON_CELL_DEFAULT_WIDTH[scale];\n    return 75;\n  }, [scale]);\n  let columnResizeState = (0, $7lS7h$useTableColumnResizeState)({\n    tableWidth: tableWidth,\n    getDefaultWidth: getDefaultWidth,\n    getDefaultMinWidth: getDefaultMinWidth\n  }, tableState);\n  let state = (0, $7lS7h$useVirtualizerState)({\n    layout: layout,\n    collection: collection,\n    renderView: renderView,\n    onVisibleRectChange(rect) {\n      bodyRef.current.scrollTop = rect.y;\n      (0, $7lS7h$setScrollLeft)(bodyRef.current, direction, rect.x);\n    },\n    persistedKeys: persistedKeys,\n    layoutOptions: (0, $7lS7h$useMemo)(() => ({\n      columnWidths: columnResizeState.columnWidths\n    }), [columnResizeState.columnWidths])\n  });\n  (0, $7lS7h$useLoadMore)({\n    isLoading: isLoading,\n    onLoadMore: onLoadMore,\n    scrollOffset: 1\n  }, bodyRef);\n  let onVisibleRectChange = (0, $7lS7h$useCallback)(rect => {\n    state.setVisibleRect(rect);\n  }, [state]);\n  let onVisibleRectChangeMemo = (0, $7lS7h$useCallback)(rect => {\n    setTableWidth(rect.width);\n    onVisibleRectChange(rect);\n    onVisibleRectChangeProp(rect);\n  }, [onVisibleRectChange, onVisibleRectChangeProp]);\n  // this effect runs whenever the contentSize changes, it doesn't matter what the content size is\n  // only that it changes in a resize, and when that happens, we want to sync the body to the\n  // header scroll position\n  (0, $7lS7h$useEffect)(() => {\n    if ((0, $7lS7h$getInteractionModality)() === 'keyboard' && headerRef.current.contains(document.activeElement)) {\n      (0, $7lS7h$scrollIntoView)(headerRef.current, document.activeElement);\n      (0, $7lS7h$scrollIntoViewport)(document.activeElement, {\n        containingElement: domRef.current\n      });\n      bodyRef.current.scrollLeft = headerRef.current.scrollLeft;\n    }\n  }, [state.contentSize, headerRef, bodyRef, domRef]);\n  let headerHeight = ((_layout_getLayoutInfo = layout.getLayoutInfo('header')) === null || _layout_getLayoutInfo === void 0 ? void 0 : _layout_getLayoutInfo.rect.height) || 0;\n  // Sync the scroll position from the table body to the header container.\n  let onScroll = (0, $7lS7h$useCallback)(() => {\n    headerRef.current.scrollLeft = bodyRef.current.scrollLeft;\n  }, [bodyRef, headerRef]);\n  let resizerPosition = columnResizeState.resizingColumn != null ? layout.getLayoutInfo(columnResizeState.resizingColumn).rect.maxX - 2 : 0;\n  let resizerAtEdge = resizerPosition > Math.max(state.virtualizer.contentSize.width, state.virtualizer.visibleRect.width) - 3;\n  // this should be fine, every movement of the resizer causes a rerender\n  // scrolling can cause it to lag for a moment, but it's always updated\n  let resizerInVisibleRegion = resizerPosition < state.virtualizer.visibleRect.maxX;\n  let shouldHardCornerResizeCorner = resizerAtEdge && resizerInVisibleRegion;\n  // minimize re-render caused on Resizers by memoing this\n  let resizingColumnWidth = columnResizeState.resizingColumn != null ? columnResizeState.getColumnWidth(columnResizeState.resizingColumn) : 0;\n  let resizingColumn = (0, $7lS7h$useMemo)(() => ({\n    width: resizingColumnWidth,\n    key: columnResizeState.resizingColumn\n  }), [resizingColumnWidth, columnResizeState.resizingColumn]);\n  let mergedProps = (0, $7lS7h$mergeProps)(otherProps, isVirtualDragging && {\n    tabIndex: null\n  });\n  let firstColumn = collection.columns[0];\n  let scrollPadding = 0;\n  if (firstColumn.props.isSelectionCell || firstColumn.props.isDragButtonCell) scrollPadding = columnResizeState.getColumnWidth(firstColumn.key);\n  let visibleViews = $bd013581c0a4b065$var$renderChildren(null, state.visibleViews, renderWrapper);\n  return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$export$d288a7dd40372bc.Provider, {\n    value: resizingColumn\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusScope), null, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...mergedProps,\n    ref: domRef\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    role: \"presentation\",\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headWrapper'),\n    style: {\n      height: headerHeight,\n      overflow: 'hidden',\n      position: 'relative',\n      willChange: state.isScrolling ? 'scroll-position' : undefined,\n      scrollPaddingInlineStart: scrollPadding\n    },\n    ref: headerRef\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement((0, $fc695d2eafc2b351$export$b517d84d4ad20b24).Provider, {\n    value: columnResizeState\n  }, visibleViews[0])), /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$ScrollView), {\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-body', {\n      'focus-ring': isFocusVisible,\n      'spectrum-Table-body--resizerAtTableEdge': shouldHardCornerResizeCorner\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-body', {\n      'react-spectrum-Table-body--dropTarget': !!isRootDropTarget\n    })),\n    //  Firefox and Chrome make generic elements using CSS overflow 'scroll' or 'auto' tabbable,\n    //  including them within the accessibility tree, which breaks the table structure in Firefox.\n    //  Using tabIndex={-1} prevents the ScrollView from being tabbable, and using role=\"rowgroup\"\n    //  here and role=\"presentation\" on the table body content fixes the table structure.\n    role: \"rowgroup\",\n    tabIndex: isVirtualDragging ? null : -1,\n    style: {\n      flex: 1,\n      scrollPaddingInlineStart: scrollPadding\n    },\n    innerStyle: {\n      overflow: 'visible'\n    },\n    ref: bodyRef,\n    contentSize: state.contentSize,\n    onVisibleRectChange: onVisibleRectChangeMemo,\n    onScrollStart: state.startScrolling,\n    onScrollEnd: state.endScrolling,\n    onScroll: onScroll\n  }, visibleViews[1], /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-bodyResizeIndicator'),\n    style: {\n      [direction === 'ltr' ? 'left' : 'right']: `${resizerPosition}px`,\n      height: `${Math.max(state.virtualizer.contentSize.height, state.virtualizer.visibleRect.height)}px`,\n      display: columnResizeState.resizingColumn ? 'block' : 'none'\n    }\n  })))));\n}\nfunction $bd013581c0a4b065$var$renderChildren(parent, views, renderWrapper) {\n  return views.map(view => {\n    return renderWrapper(parent, view, view.children ? Array.from(view.children) : [], childViews => $bd013581c0a4b065$var$renderChildren(view, childViews, renderWrapper));\n  });\n}\nfunction $bd013581c0a4b065$var$useStyle(layoutInfo, parent) {\n  let {\n    direction: direction\n  } = (0, $7lS7h$useLocale)();\n  let style = (0, $7lS7h$layoutInfoToStyle)(layoutInfo, direction, parent);\n  if (style.overflow === 'hidden') style.overflow = 'visible'; // needed to support position: sticky\n  return style;\n}\nfunction $bd013581c0a4b065$var$TableHeader({\n  children: children,\n  layoutInfo: layoutInfo,\n  parent: parent,\n  ...otherProps\n}) {\n  let {\n    rowGroupProps: rowGroupProps\n  } = (0, $7lS7h$useTableRowGroup)();\n  let style = $bd013581c0a4b065$var$useStyle(layoutInfo, parent);\n  return /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...rowGroupProps,\n    ...otherProps,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-head'),\n    style: style\n  }, children);\n}\nfunction $bd013581c0a4b065$var$TableColumnHeader(props) {\n  var _state_sortDescriptor, _state_sortDescriptor1, _state_sortDescriptor2, _state_sortDescriptor3;\n  let {\n    column: column\n  } = props;\n  let ref = (0, $7lS7h$useRef)(null);\n  let {\n    state: state,\n    isEmpty: isEmpty\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $7lS7h$usePress)({\n    isDisabled: isEmpty\n  });\n  let columnProps = column.props;\n  (0, $7lS7h$useEffect)(() => {\n    if (column.hasChildNodes && columnProps.allowsResizing) console.warn(`Column key: ${column.key}. Columns with child columns don't allow resizing.`);\n  }, [column.hasChildNodes, column.key, columnProps.allowsResizing]);\n  let {\n    columnHeaderProps: columnHeaderProps\n  } = (0, $7lS7h$useTableColumnHeader)({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $7lS7h$useHover)({\n    ...props,\n    isDisabled: isEmpty\n  });\n  const allProps = [columnHeaderProps, hoverProps, pressProps];\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...(0, $7lS7h$mergeProps)(...allProps),\n    ref: ref,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headCell', {\n      'is-active': isPressed,\n      'is-sortable': columnProps.allowsSorting,\n      'is-sorted-desc': ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === column.key && ((_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.direction) === 'descending',\n      'is-sorted-asc': ((_state_sortDescriptor2 = state.sortDescriptor) === null || _state_sortDescriptor2 === void 0 ? void 0 : _state_sortDescriptor2.column) === column.key && ((_state_sortDescriptor3 = state.sortDescriptor) === null || _state_sortDescriptor3 === void 0 ? void 0 : _state_sortDescriptor3.direction) === 'ascending',\n      'is-hovered': isHovered,\n      'spectrum-Table-cell--hideHeader': columnProps.hideHeader\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-cell', {\n      'react-spectrum-Table-cell--alignCenter': columnProps.align === 'center' || column.colspan > 1,\n      'react-spectrum-Table-cell--alignEnd': columnProps.align === 'end'\n    }))\n  }, columnProps.allowsSorting && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$spectrumiconsuiArrowDownSmall), {\n    UNSAFE_className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-sortedIcon')\n  }), columnProps.hideHeader ? /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$VisuallyHidden), null, column.rendered) : /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headCellContents')\n  }, column.rendered)));\n}\nlet $bd013581c0a4b065$var$_TableColumnHeaderButton = (props, ref) => {\n  let {\n    focusProps: focusProps,\n    alignment: alignment,\n    ...otherProps\n  } = props;\n  let {\n    isEmpty: isEmpty\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let domRef = (0, $7lS7h$useFocusableRef)(ref);\n  let {\n    buttonProps: buttonProps\n  } = (0, $7lS7h$useButton)({\n    ...otherProps,\n    elementType: 'div',\n    isDisabled: isEmpty\n  }, domRef);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $7lS7h$useHover)({\n    ...otherProps,\n    isDisabled: isEmpty\n  });\n  return /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headCellContents', {\n      'is-hovered': isHovered\n    }),\n    ...hoverProps\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headCellButton', {\n      'spectrum-Table-headCellButton--alignStart': alignment === 'start',\n      'spectrum-Table-headCellButton--alignCenter': alignment === 'center',\n      'spectrum-Table-headCellButton--alignEnd': alignment === 'end'\n    }),\n    ...(0, $7lS7h$mergeProps)(buttonProps, focusProps),\n    ref: domRef\n  }, props.children));\n};\nlet $bd013581c0a4b065$var$TableColumnHeaderButton = /*#__PURE__*/(0, $7lS7h$react).forwardRef($bd013581c0a4b065$var$_TableColumnHeaderButton);\nfunction $bd013581c0a4b065$var$ResizableTableColumnHeader(props) {\n  var _column_props, _state_sortDescriptor, _state_sortDescriptor1, _state_sortDescriptor2, _state_sortDescriptor3;\n  let {\n    column: column\n  } = props;\n  let ref = (0, $7lS7h$useRef)(null);\n  let triggerRef = (0, $7lS7h$useRef)(null);\n  let resizingRef = (0, $7lS7h$useRef)(null);\n  let {\n    state: state,\n    onResizeStart: onResizeStart,\n    onResize: onResize,\n    onResizeEnd: onResizeEnd,\n    headerRowHovered: headerRowHovered,\n    setIsInResizeMode: setIsInResizeMode,\n    isEmpty: isEmpty,\n    isInResizeMode: isInResizeMode,\n    headerMenuOpen: headerMenuOpen,\n    setHeaderMenuOpen: setHeaderMenuOpen\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let columnResizeState = (0, $7lS7h$useContext)((0, $fc695d2eafc2b351$export$b517d84d4ad20b24));\n  let stringFormatter = (0, $7lS7h$useLocalizedStringFormatter)((0, $parcel$interopDefault($7lS7h$intlStringsmodulejs)), '@react-spectrum/table');\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $7lS7h$usePress)({\n    isDisabled: isEmpty\n  });\n  let {\n    columnHeaderProps: columnHeaderProps\n  } = (0, $7lS7h$useTableColumnHeader)({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $7lS7h$useHover)({\n    ...props,\n    isDisabled: isEmpty || headerMenuOpen\n  });\n  const allProps = [columnHeaderProps, pressProps, hoverProps];\n  let columnProps = column.props;\n  let {\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $7lS7h$useFocusRing)();\n  const onMenuSelect = key => {\n    switch (key) {\n      case 'sort-asc':\n        state.sort(column.key, 'ascending');\n        break;\n      case 'sort-desc':\n        state.sort(column.key, 'descending');\n        break;\n      case 'resize':\n        columnResizeState.startResize(column.key);\n        setIsInResizeMode(true);\n        state.setKeyboardNavigationDisabled(true);\n        break;\n    }\n  };\n  let allowsSorting = (_column_props = column.props) === null || _column_props === void 0 ? void 0 : _column_props.allowsSorting;\n  let items = (0, $7lS7h$useMemo)(() => {\n    let options = [allowsSorting ? {\n      label: stringFormatter.format('sortAscending'),\n      id: 'sort-asc'\n    } : undefined, allowsSorting ? {\n      label: stringFormatter.format('sortDescending'),\n      id: 'sort-desc'\n    } : undefined, {\n      label: stringFormatter.format('resizeColumn'),\n      id: 'resize'\n    }];\n    return options;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allowsSorting]);\n  let resizingColumn = columnResizeState.resizingColumn;\n  let showResizer = !isEmpty && (headerRowHovered && (0, $7lS7h$getInteractionModality)() !== 'keyboard' || resizingColumn != null);\n  let alignment = 'start';\n  let menuAlign = 'start';\n  if (columnProps.align === 'center' || column.colspan > 1) alignment = 'center';else if (columnProps.align === 'end') {\n    alignment = 'end';\n    menuAlign = 'end';\n  }\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...(0, $7lS7h$mergeProps)(...allProps),\n    ref: ref,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headCell', {\n      'is-active': isPressed,\n      'is-resizable': columnProps.allowsResizing,\n      'is-sortable': columnProps.allowsSorting,\n      'is-sorted-desc': ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === column.key && ((_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.direction) === 'descending',\n      'is-sorted-asc': ((_state_sortDescriptor2 = state.sortDescriptor) === null || _state_sortDescriptor2 === void 0 ? void 0 : _state_sortDescriptor2.column) === column.key && ((_state_sortDescriptor3 = state.sortDescriptor) === null || _state_sortDescriptor3 === void 0 ? void 0 : _state_sortDescriptor3.direction) === 'ascending',\n      'is-hovered': isHovered,\n      'focus-ring': isFocusVisible,\n      'spectrum-Table-cell--hideHeader': columnProps.hideHeader\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-cell', {\n      'react-spectrum-Table-cell--alignCenter': alignment === 'center',\n      'react-spectrum-Table-cell--alignEnd': alignment === 'end'\n    }))\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$MenuTrigger), {\n    onOpenChange: setHeaderMenuOpen,\n    align: menuAlign\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableColumnHeaderButton, {\n    alignment: alignment,\n    ref: triggerRef,\n    focusProps: focusProps\n  }, columnProps.allowsSorting && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$spectrumiconsuiArrowDownSmall), {\n    UNSAFE_className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-sortedIcon')\n  }), columnProps.hideHeader ? /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$VisuallyHidden), null, column.rendered) : /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headerCellText')\n  }, column.rendered), columnProps.allowsResizing && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$spectrumiconsuiChevronDownMedium), {\n    UNSAFE_className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-menuChevron')\n  })), /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$Menu), {\n    onAction: onMenuSelect,\n    minWidth: \"size-2000\",\n    items: items\n  }, item => /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$Item), null, item.label))), /*#__PURE__*/(0, $7lS7h$react).createElement((0, $fc695d2eafc2b351$export$48a76196cafe3b93), {\n    ref: resizingRef,\n    column: column,\n    showResizer: showResizer,\n    onResizeStart: onResizeStart,\n    onResize: onResize,\n    onResizeEnd: onResizeEnd,\n    triggerRef: (0, $7lS7h$useUnwrapDOMRef)(triggerRef)\n  }), /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    \"aria-hidden\": true,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-colResizeIndicator', {\n      'spectrum-Table-colResizeIndicator--visible': resizingColumn != null,\n      'spectrum-Table-colResizeIndicator--resizing': resizingColumn === column.key\n    })\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-colResizeNubbin', {\n      'spectrum-Table-colResizeNubbin--visible': isInResizeMode && resizingColumn === column.key\n    })\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement((0, $cb7d341e8868d81d$export$d9658cdf8c86807), null)))));\n}\nfunction $bd013581c0a4b065$var$TableSelectAllCell({\n  column: column\n}) {\n  let ref = (0, $7lS7h$useRef)(undefined);\n  let {\n    state: state\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let isSingleSelectionMode = state.selectionManager.selectionMode === 'single';\n  let {\n    columnHeaderProps: columnHeaderProps\n  } = (0, $7lS7h$useTableColumnHeader)({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $7lS7h$useTableSelectAllCheckbox)(state);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $7lS7h$useHover)({});\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...(0, $7lS7h$mergeProps)(columnHeaderProps, hoverProps),\n    ref: ref,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headCell', 'spectrum-Table-checkboxCell', {\n      'is-hovered': isHovered\n    })\n  },\n  /*\n       In single selection mode, the checkbox will be hidden.\n       So to avoid leaving a column header with no accessible content,\n       we use a VisuallyHidden component to include the aria-label from the checkbox,\n       which for single selection will be \"Select.\"\n     */\n  isSingleSelectionMode && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$VisuallyHidden), null, checkboxProps['aria-label']), /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$Checkbox), {\n    ...checkboxProps,\n    isEmphasized: true,\n    UNSAFE_style: isSingleSelectionMode ? {\n      visibility: 'hidden'\n    } : undefined,\n    UNSAFE_className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-checkbox')\n  })));\n}\nfunction $bd013581c0a4b065$var$TableDragHeaderCell({\n  column: column\n}) {\n  let ref = (0, $7lS7h$useRef)(undefined);\n  let {\n    state: state\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let {\n    columnHeaderProps: columnHeaderProps\n  } = (0, $7lS7h$useTableColumnHeader)({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n  let stringFormatter = (0, $7lS7h$useLocalizedStringFormatter)((0, $parcel$interopDefault($7lS7h$intlStringsmodulejs)), '@react-spectrum/table');\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...columnHeaderProps,\n    ref: ref,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-headCell', (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-headCell', 'react-spectrum-Table-dragButtonHeadCell'))\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$VisuallyHidden), null, stringFormatter.format('drag'))));\n}\nfunction $bd013581c0a4b065$var$TableRowGroup({\n  children: children,\n  layoutInfo: layoutInfo,\n  parent: parent,\n  ...otherProps\n}) {\n  let {\n    rowGroupProps: rowGroupProps\n  } = (0, $7lS7h$useTableRowGroup)();\n  let {\n    isTableDroppable: isTableDroppable\n  } = (0, $7lS7h$useContext)($bd013581c0a4b065$export$93e4b0b2cc49b648);\n  let style = $bd013581c0a4b065$var$useStyle(layoutInfo, parent);\n  return /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...rowGroupProps,\n    style: style,\n    ...otherProps\n  }, isTableDroppable && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $4e6fc36ba71ba405$export$d30a7814cfd4033e), {\n    key: \"root\"\n  }), children);\n}\nfunction $bd013581c0a4b065$var$DragButton() {\n  let {\n    dragButtonProps: dragButtonProps,\n    dragButtonRef: dragButtonRef,\n    isFocusVisibleWithin: isFocusVisibleWithin\n  } = $bd013581c0a4b065$export$cd7c5802f9e21187();\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $7lS7h$useVisuallyHidden)();\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...dragButtonProps,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-dragButton'),\n    style: !isFocusVisibleWithin ? {\n      ...visuallyHiddenProps.style\n    } : {},\n    ref: dragButtonRef,\n    draggable: \"true\"\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$spectrumiconsuiListGripper), {\n    UNSAFE_className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)))\n  })));\n}\nconst $bd013581c0a4b065$var$TableRowContext = /*#__PURE__*/(0, $7lS7h$react).createContext(null);\nfunction $bd013581c0a4b065$export$cd7c5802f9e21187() {\n  return (0, $7lS7h$useContext)($bd013581c0a4b065$var$TableRowContext);\n}\nfunction $bd013581c0a4b065$var$TableRow({\n  item: item,\n  children: children,\n  layoutInfo: layoutInfo,\n  parent: parent,\n  ...otherProps\n}) {\n  var _state_collection_rows_find, _layout_getContentSize, _layout_virtualizer;\n  let ref = (0, $7lS7h$useRef)(undefined);\n  let {\n    state: state,\n    layout: layout,\n    dragAndDropHooks: dragAndDropHooks,\n    isTableDraggable: isTableDraggable,\n    isTableDroppable: isTableDroppable,\n    dragState: dragState,\n    dropState: dropState\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let {\n    rowProps: rowProps,\n    hasAction: hasAction,\n    allowsSelection: allowsSelection\n  } = (0, $7lS7h$useTableRow)({\n    node: item,\n    isVirtualized: true,\n    shouldSelectOnPressUp: isTableDraggable\n  }, state, ref);\n  let isDisabled = state.selectionManager.isDisabled(item.key);\n  let isInteractive = !isDisabled && (hasAction || allowsSelection || isTableDraggable);\n  let isDroppable = isTableDroppable && !isDisabled;\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $7lS7h$usePress)({\n    isDisabled: !isInteractive\n  });\n  // The row should show the focus background style when any cell inside it is focused.\n  // If the row itself is focused, then it should have a blue focus indicator on the left.\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = (0, $7lS7h$useFocusRing)({\n    within: true\n  });\n  let {\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $7lS7h$useFocusRing)();\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $7lS7h$useHover)({\n    isDisabled: !isInteractive\n  });\n  let isFirstRow = ((_state_collection_rows_find = state.collection.rows.find(row => row.level === 1)) === null || _state_collection_rows_find === void 0 ? void 0 : _state_collection_rows_find.key) === item.key;\n  let isLastRow = item.nextKey == null;\n  // Figure out if the TableView content is equal or greater in height to the container. If so, we'll need to round the bottom\n  // border corners of the last row when selected.\n  let isFlushWithContainerBottom = false;\n  if (isLastRow) {\n    if (((_layout_getContentSize = layout.getContentSize()) === null || _layout_getContentSize === void 0 ? void 0 : _layout_getContentSize.height) >= ((_layout_virtualizer = layout.virtualizer) === null || _layout_virtualizer === void 0 ? void 0 : _layout_virtualizer.visibleRect.height)) isFlushWithContainerBottom = true;\n  }\n  let draggableItem;\n  if (isTableDraggable) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    draggableItem = dragAndDropHooks.useDraggableItem({\n      key: item.key,\n      hasDragButton: true\n    }, dragState);\n    if (isDisabled) draggableItem = null;\n  }\n  let droppableItem;\n  let isDropTarget;\n  let dropIndicator;\n  let dropIndicatorRef = (0, $7lS7h$useRef)(undefined);\n  if (isTableDroppable) {\n    let target = {\n      type: 'item',\n      key: item.key,\n      dropPosition: 'on'\n    };\n    isDropTarget = dropState.isDropTarget(target);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    dropIndicator = dragAndDropHooks.useDropIndicator({\n      target: target\n    }, dropState, dropIndicatorRef);\n  }\n  let dragButtonRef = (0, $7lS7h$react).useRef(undefined);\n  let {\n    buttonProps: dragButtonProps\n  } = (0, $7lS7h$useButton)({\n    ...(draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragButtonProps),\n    elementType: 'div'\n  }, dragButtonRef);\n  let style = $bd013581c0a4b065$var$useStyle(layoutInfo, parent);\n  let props = (0, $7lS7h$mergeProps)(rowProps, otherProps, {\n    style: style\n  }, focusWithinProps, focusProps, hoverProps, pressProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps,\n  // Remove tab index from list row if performing a screenreader drag. This prevents TalkBack from focusing the row,\n  // allowing for single swipe navigation between row drop indicator\n  (dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.isVirtualDragging()) && {\n    tabIndex: null\n  });\n  let dropProps = isDroppable ? droppableItem === null || droppableItem === void 0 ? void 0 : droppableItem.dropProps : {\n    'aria-hidden': droppableItem === null || droppableItem === void 0 ? void 0 : droppableItem.dropProps['aria-hidden']\n  };\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $7lS7h$useVisuallyHidden)();\n  return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$TableRowContext.Provider, {\n    value: {\n      dragButtonProps: dragButtonProps,\n      dragButtonRef: dragButtonRef,\n      isFocusVisibleWithin: isFocusVisibleWithin\n    }\n  }, isTableDroppable && isFirstRow && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7ee9a922ee4e8032$export$2c0bab5914a9d088), {\n    rowProps: props,\n    key: `${item.key}-before`,\n    target: {\n      key: item.key,\n      type: 'item',\n      dropPosition: 'before'\n    }\n  }), isTableDroppable && !(dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isHidden) && /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    role: \"row\",\n    ...visuallyHiddenProps\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    role: \"gridcell\"\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    role: \"button\",\n    ...(dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.dropIndicatorProps),\n    ref: dropIndicatorRef\n  }))), /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...(0, $7lS7h$mergeProps)(props, dropProps),\n    ref: ref,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-row', {\n      'is-active': isPressed,\n      'is-selected': isSelected,\n      'spectrum-Table-row--highlightSelection': state.selectionManager.selectionBehavior === 'replace',\n      'is-next-selected': state.selectionManager.isSelected(item.nextKey),\n      'is-focused': isFocusVisibleWithin,\n      'focus-ring': isFocusVisible,\n      'is-hovered': isHovered,\n      'is-disabled': isDisabled,\n      'spectrum-Table-row--firstRow': isFirstRow,\n      'spectrum-Table-row--lastRow': isLastRow,\n      'spectrum-Table-row--isFlushBottom': isFlushWithContainerBottom\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-row', {\n      'react-spectrum-Table-row--dropTarget': isDropTarget\n    }))\n  }, children), isTableDroppable && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7ee9a922ee4e8032$export$2c0bab5914a9d088), {\n    rowProps: props,\n    key: `${item.key}-after`,\n    target: {\n      key: item.key,\n      type: 'item',\n      dropPosition: 'after'\n    }\n  }));\n}\nfunction $bd013581c0a4b065$var$TableHeaderRow({\n  item: item,\n  children: children,\n  layoutInfo: layoutInfo,\n  parent: parent,\n  ...props\n}) {\n  let {\n    state: state,\n    headerMenuOpen: headerMenuOpen\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let ref = (0, $7lS7h$useRef)(undefined);\n  let {\n    rowProps: rowProps\n  } = (0, $7lS7h$useTableHeaderRow)({\n    node: item,\n    isVirtualized: true\n  }, state, ref);\n  let {\n    hoverProps: hoverProps\n  } = (0, $7lS7h$useHover)({\n    ...props,\n    isDisabled: headerMenuOpen\n  });\n  let style = $bd013581c0a4b065$var$useStyle(layoutInfo, parent);\n  return /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...(0, $7lS7h$mergeProps)(rowProps, hoverProps),\n    ref: ref,\n    style: style\n  }, children);\n}\nfunction $bd013581c0a4b065$var$TableDragCell({\n  cell: cell\n}) {\n  let ref = (0, $7lS7h$useRef)(undefined);\n  let {\n    state: state,\n    isTableDraggable: isTableDraggable\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let isDisabled = state.selectionManager.isDisabled(cell.parentKey);\n  let {\n    gridCellProps: gridCellProps\n  } = (0, $7lS7h$useTableCell)({\n    node: cell,\n    isVirtualized: true\n  }, state, ref);\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...gridCellProps,\n    ref: ref,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-cell', {\n      'is-disabled': isDisabled\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-cell', 'react-spectrum-Table-dragButtonCell'))\n  }, isTableDraggable && !isDisabled && /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$DragButton, null)));\n}\nfunction $bd013581c0a4b065$var$TableCheckboxCell({\n  cell: cell\n}) {\n  let ref = (0, $7lS7h$useRef)(undefined);\n  let {\n    state: state\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  // The TableCheckbox should always render its disabled status if the row is disabled, regardless of disabledBehavior,\n  // but the cell itself should not render its disabled styles if disabledBehavior=\"selection\" because the row might have actions on it.\n  let isSelectionDisabled = state.disabledKeys.has(cell.parentKey);\n  let isDisabled = state.selectionManager.isDisabled(cell.parentKey);\n  let {\n    gridCellProps: gridCellProps\n  } = (0, $7lS7h$useTableCell)({\n    node: cell,\n    isVirtualized: true\n  }, state, ref);\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $7lS7h$useTableSelectionCheckbox)({\n    key: cell.parentKey\n  }, state);\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...gridCellProps,\n    ref: ref,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-cell', 'spectrum-Table-checkboxCell', {\n      'is-disabled': isDisabled\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-cell'))\n  }, state.selectionManager.selectionMode !== 'none' && /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$Checkbox), {\n    ...checkboxProps,\n    isEmphasized: true,\n    isDisabled: isSelectionDisabled,\n    UNSAFE_className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-checkbox')\n  })));\n}\nfunction $bd013581c0a4b065$var$TableCell({\n  cell: cell\n}) {\n  let {\n    scale: scale\n  } = (0, $7lS7h$useProvider)();\n  let {\n    state: state\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let isExpandableTable = 'expandedKeys' in state;\n  let ref = (0, $7lS7h$useRef)(undefined);\n  let columnProps = cell.column.props;\n  let isDisabled = state.selectionManager.isDisabled(cell.parentKey);\n  let {\n    gridCellProps: gridCellProps\n  } = (0, $7lS7h$useTableCell)({\n    node: cell,\n    isVirtualized: true\n  }, state, ref);\n  let {\n    id: id,\n    ...otherGridCellProps\n  } = gridCellProps;\n  let isFirstRowHeaderCell = state.collection.rowHeaderColumnKeys.keys().next().value === cell.column.key;\n  let isRowExpandable = false;\n  let showExpandCollapseButton = false;\n  let levelOffset = 0;\n  if ('expandedKeys' in state) {\n    var _state_keyMap_get_props_UNSTABLE_childItems, _state_keyMap_get, _state_keyMap_get_props_children, _state_keyMap_get_props, _state_keyMap_get1;\n    isRowExpandable = ((_state_keyMap_get = state.keyMap.get(cell.parentKey)) === null || _state_keyMap_get === void 0 ? void 0 : (_state_keyMap_get_props_UNSTABLE_childItems = _state_keyMap_get.props.UNSTABLE_childItems) === null || _state_keyMap_get_props_UNSTABLE_childItems === void 0 ? void 0 : _state_keyMap_get_props_UNSTABLE_childItems.length) > 0 || ((_state_keyMap_get1 = state.keyMap.get(cell.parentKey)) === null || _state_keyMap_get1 === void 0 ? void 0 : (_state_keyMap_get_props = _state_keyMap_get1.props) === null || _state_keyMap_get_props === void 0 ? void 0 : (_state_keyMap_get_props_children = _state_keyMap_get_props.children) === null || _state_keyMap_get_props_children === void 0 ? void 0 : _state_keyMap_get_props_children.length) > state.userColumnCount;\n    showExpandCollapseButton = isFirstRowHeaderCell && isRowExpandable;\n    // Offset based on level, and add additional offset if there is no expand/collapse button on a row\n    levelOffset = (cell.level - 2) * $bd013581c0a4b065$var$LEVEL_OFFSET_WIDTH[scale] + (!showExpandCollapseButton ? $bd013581c0a4b065$var$LEVEL_OFFSET_WIDTH[scale] * 2 : 0);\n  }\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$FocusRing), {\n    focusRingClass: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    ...otherGridCellProps,\n    \"aria-labelledby\": id,\n    ref: ref,\n    style: isExpandableTable && isFirstRowHeaderCell ? {\n      paddingInlineStart: levelOffset\n    } : {},\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-cell', {\n      'spectrum-Table-cell--divider': columnProps.showDivider && cell.column.nextKey !== null,\n      'spectrum-Table-cell--hideHeader': columnProps.hideHeader,\n      'spectrum-Table-cell--hasExpandCollapseButton': showExpandCollapseButton,\n      'is-disabled': isDisabled\n    }, (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-cell', {\n      'react-spectrum-Table-cell--alignStart': columnProps.align === 'start',\n      'react-spectrum-Table-cell--alignCenter': columnProps.align === 'center',\n      'react-spectrum-Table-cell--alignEnd': columnProps.align === 'end'\n    }))\n  }, showExpandCollapseButton && /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$ExpandableRowChevron, {\n    cell: cell\n  }), /*#__PURE__*/(0, $7lS7h$react).createElement(\"span\", {\n    id: id,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-cellContents')\n  }, cell.rendered)));\n}\nfunction $bd013581c0a4b065$var$TableCellWrapper({\n  layoutInfo: layoutInfo,\n  virtualizer: virtualizer,\n  parent: parent,\n  children: children\n}) {\n  let {\n    isTableDroppable: isTableDroppable,\n    dropState: dropState\n  } = (0, $7lS7h$useContext)($bd013581c0a4b065$export$93e4b0b2cc49b648);\n  let isDropTarget;\n  let isRootDroptarget;\n  if (isTableDroppable) {\n    if (parent.content) isDropTarget = dropState.isDropTarget({\n      type: 'item',\n      dropPosition: 'on',\n      key: parent.content.key\n    });\n    isRootDroptarget = dropState.isDropTarget({\n      type: 'root'\n    });\n  }\n  return /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$VirtualizerItem), {\n    layoutInfo: layoutInfo,\n    virtualizer: virtualizer,\n    parent: parent === null || parent === void 0 ? void 0 : parent.layoutInfo,\n    className: (0, $7lS7h$useMemo)(() => (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-cellWrapper', (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), {\n      'react-spectrum-Table-cellWrapper': !layoutInfo.estimatedSize,\n      'react-spectrum-Table-cellWrapper--dropTarget': isDropTarget || isRootDroptarget\n    })), [layoutInfo.estimatedSize, isDropTarget, isRootDroptarget])\n  }, children);\n}\nfunction $bd013581c0a4b065$var$ExpandableRowChevron({\n  cell: cell\n}) {\n  // TODO: move some/all of the chevron button setup into a separate hook?\n  let {\n    direction: direction\n  } = (0, $7lS7h$useLocale)();\n  let {\n    state: state\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let expandButtonRef = (0, $7lS7h$useRef)(undefined);\n  let stringFormatter = (0, $7lS7h$useLocalizedStringFormatter)((0, $parcel$interopDefault($7lS7h$intlStringsmodulejs)), '@react-spectrum/table');\n  let isExpanded;\n  if ('expandedKeys' in state) isExpanded = state.expandedKeys === 'all' || state.expandedKeys.has(cell.parentKey);\n  // Will need to keep the chevron as a button for iOS VO at all times since VO doesn't focus the cell. Also keep as button if cellAction is defined by the user in the future\n  let {\n    buttonProps: buttonProps\n  } = (0, $7lS7h$useButton)({\n    // Desktop and mobile both toggle expansion of a native expandable row on mouse/touch up\n    onPress: () => {\n      state.toggleKey(cell.parentKey);\n      if (!(0, $7lS7h$isFocusVisible)()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(cell.parentKey);\n      }\n    },\n    elementType: 'span',\n    'aria-label': isExpanded ? stringFormatter.format('collapse') : stringFormatter.format('expand')\n  }, expandButtonRef);\n  return /*#__PURE__*/(0, $7lS7h$react).createElement(\"span\", {\n    ...buttonProps,\n    ref: expandButtonRef,\n    // Override tabindex so that grid keyboard nav skips over it. Needs -1 so android talkback can actually \"focus\" it\n    tabIndex: (0, $7lS7h$isAndroid)() ? -1 : undefined,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_vars_cssmodulejs)), 'spectrum-Table-expandButton', {\n      'is-open': isExpanded\n    })\n  }, direction === 'ltr' ? /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$spectrumiconsuiChevronRightMedium), null) : /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$spectrumiconsuiChevronLeftMedium), null));\n}\nfunction $bd013581c0a4b065$var$LoadingState() {\n  let {\n    state: state\n  } = (0, $7lS7h$useContext)($bd013581c0a4b065$export$93e4b0b2cc49b648);\n  let stringFormatter = (0, $7lS7h$useLocalizedStringFormatter)((0, $parcel$interopDefault($7lS7h$intlStringsmodulejs)), '@react-spectrum/table');\n  return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$CenteredWrapper, null, /*#__PURE__*/(0, $7lS7h$react).createElement((0, $7lS7h$ProgressCircle), {\n    isIndeterminate: true,\n    \"aria-label\": state.collection.size > 0 ? stringFormatter.format('loadingMore') : stringFormatter.format('loading')\n  }));\n}\nfunction $bd013581c0a4b065$var$EmptyState() {\n  let {\n    renderEmptyState: renderEmptyState\n  } = (0, $7lS7h$useContext)($bd013581c0a4b065$export$93e4b0b2cc49b648);\n  let emptyState = renderEmptyState ? renderEmptyState() : null;\n  if (emptyState == null) return null;\n  return /*#__PURE__*/(0, $7lS7h$react).createElement($bd013581c0a4b065$var$CenteredWrapper, null, emptyState);\n}\nfunction $bd013581c0a4b065$var$CenteredWrapper({\n  children: children\n}) {\n  let {\n    state: state\n  } = $bd013581c0a4b065$export$3cb274deb6c2d854();\n  let rowProps;\n  if ('expandedKeys' in state) {\n    let topLevelRowCount = [...state.keyMap.get(state.collection.body.key).childNodes].length;\n    rowProps = {\n      'aria-level': 1,\n      'aria-posinset': topLevelRowCount + 1,\n      'aria-setsize': topLevelRowCount + 1\n    };\n  } else rowProps = {\n    'aria-rowindex': state.collection.headerRows.length + state.collection.size + 1\n  };\n  return /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    role: \"row\",\n    ...rowProps,\n    className: (0, $7lS7h$classNames)((0, $parcel$interopDefault($7lS7h$table_cssmodulejs)), 'react-spectrum-Table-centeredWrapper')\n  }, /*#__PURE__*/(0, $7lS7h$react).createElement(\"div\", {\n    role: \"rowheader\",\n    \"aria-colspan\": state.collection.columns.length\n  }, children));\n}\nconst $bd013581c0a4b065$export$517e02184d273d69 = /*#__PURE__*/(0, $7lS7h$react).forwardRef($bd013581c0a4b065$var$TableViewBase);\nexport { $bd013581c0a4b065$export$93e4b0b2cc49b648 as TableContext, $bd013581c0a4b065$export$3cb274deb6c2d854 as useTableContext, $bd013581c0a4b065$export$d288a7dd40372bc as VirtualizerContext, $bd013581c0a4b065$export$3f8f74b6bfd2c5df as useVirtualizerContext, $bd013581c0a4b065$export$cd7c5802f9e21187 as useTableRowContext, $bd013581c0a4b065$export$517e02184d273d69 as TableViewBase };","map":{"version":3,"names":["$bd013581c0a4b065$var$DEFAULT_HEADER_HEIGHT","medium","large","$bd013581c0a4b065$var$DEFAULT_HIDE_HEADER_CELL_WIDTH","$bd013581c0a4b065$var$ROW_HEIGHTS","compact","regular","spacious","$bd013581c0a4b065$var$SELECTION_CELL_DEFAULT_WIDTH","$bd013581c0a4b065$var$DRAG_BUTTON_CELL_DEFAULT_WIDTH","$bd013581c0a4b065$var$LEVEL_OFFSET_WIDTH","$bd013581c0a4b065$export$93e4b0b2cc49b648","$7lS7h$react","createContext","$bd013581c0a4b065$export$3cb274deb6c2d854","$7lS7h$useContext","$bd013581c0a4b065$export$d288a7dd40372bc","$bd013581c0a4b065$export$3f8f74b6bfd2c5df","$bd013581c0a4b065$var$TableViewBase","props","ref","_dropState_target","$7lS7h$useProviderProps","isQuiet","onAction","onResizeStart","propsOnResizeStart","onResizeEnd","propsOnResizeEnd","dragAndDropHooks","state","isTableDraggable","useDraggableCollectionState","isTableDroppable","useDroppableCollectionState","dragHooksProvided","$7lS7h$useRef","dropHooksProvided","$7lS7h$useEffect","current","console","warn","styleProps","$7lS7h$useStyleProps","scale","$7lS7h$useProvider","isInResizeMode","setIsInResizeMode","$7lS7h$useState","setIsResizing","domRef","$7lS7h$useDOMRef","headerRef","undefined","bodyRef","density","layout","$7lS7h$useMemo","$5fb43af69b290859$export$725d101278f5a47b","rowHeight","overflowMode","estimatedRowHeight","headingHeight","estimatedHeadingHeight","dragState","preview","collection","selectionManager","useDraggableCollection","DragPreview","dropState","droppableCollection","isRootDropTarget","useDroppableCollection","keyboardDelegate","$7lS7h$ListKeyboardDelegate","disabledKeys","layoutDelegate","dropTargetDelegate","isDropTarget","type","gridProps","$7lS7h$useTable","isVirtualized","onRowAction","scrollRef","headerMenuOpen","setHeaderMenuOpen","headerRowHovered","setHeaderRowHovered","renderWrapper","$7lS7h$useCallback","parent","reusableView","children","renderChildren","viewType","createElement","$bd013581c0a4b065$var$TableRowGroup","key","layoutInfo","role","$bd013581c0a4b065$var$TableHeader","$bd013581c0a4b065$var$TableRow","item","content","$bd013581c0a4b065$var$TableHeaderRow","onHoverChange","$bd013581c0a4b065$var$TableCellWrapper","virtualizer","rendered","renderView","isSelectionCell","$bd013581c0a4b065$var$TableCheckboxCell","cell","isDragButtonCell","$bd013581c0a4b065$var$TableDragCell","$bd013581c0a4b065$var$TableCell","index","colspan","$bd013581c0a4b065$var$TableSelectAllCell","column","$bd013581c0a4b065$var$TableDragHeaderCell","hideHeader","$7lS7h$TooltipTrigger","placement","trigger","$bd013581c0a4b065$var$TableColumnHeader","$7lS7h$Tooltip","allowsResizing","hasChildNodes","$bd013581c0a4b065$var$ResizableTableColumnHeader","$bd013581c0a4b065$var$LoadingState","$bd013581c0a4b065$var$EmptyState","isVerticalScrollbarVisible","setVerticalScollbarVisible","isHorizontalScrollbarVisible","setHorizontalScollbarVisible","viewport","x","y","width","height","onVisibleRectChange","e","clientWidth","offsetWidth","clientHeight","offsetHeight","isFocusVisible","focusProps","$7lS7h$useFocusRing","isEmpty","size","onFocusedResizer","scrollLeft","widths","focusedKey","dropTargetKey","target","dropPosition","getFirstKey","getKeyBefore","persistedKeys","Set","filter","k","mergedProps","$7lS7h$mergeProps","collectionProps","isVirtualDragging","tabIndex","Provider","value","onResize","renderEmptyState","$bd013581c0a4b065$var$TableVirtualizer","className","$7lS7h$classNames","$parcel$interopDefault","$7lS7h$table_vars_cssmodulejs","body","loadingState","$7lS7h$table_cssmodulejs","tableState","renderPreview","draggingKeys","draggedKey","itemCount","maxWidth","getBoundingClientRect","itemText","getTextValue","$daa6ead3d9d3506a$export$905ab40ac2179daa","_layout_getLayoutInfo","onVisibleRectChangeProp","otherProps","direction","$7lS7h$useLocale","isLoading","onLoadMore","tableWidth","setTableWidth","getDefaultWidth","showDivider","getDefaultMinWidth","columnResizeState","$7lS7h$useTableColumnResizeState","$7lS7h$useVirtualizerState","rect","scrollTop","$7lS7h$setScrollLeft","layoutOptions","columnWidths","$7lS7h$useLoadMore","scrollOffset","setVisibleRect","onVisibleRectChangeMemo","$7lS7h$getInteractionModality","contains","document","activeElement","$7lS7h$scrollIntoView","$7lS7h$scrollIntoViewport","containingElement","contentSize","headerHeight","getLayoutInfo","onScroll","resizerPosition","resizingColumn","maxX","resizerAtEdge","Math","max","visibleRect","resizerInVisibleRegion","shouldHardCornerResizeCorner","resizingColumnWidth","getColumnWidth","firstColumn","columns","scrollPadding","visibleViews","$bd013581c0a4b065$var$renderChildren","$7lS7h$FocusScope","style","overflow","position","willChange","isScrolling","scrollPaddingInlineStart","$fc695d2eafc2b351$export$b517d84d4ad20b24","$7lS7h$ScrollView","flex","innerStyle","onScrollStart","startScrolling","onScrollEnd","endScrolling","display","views","map","view","Array","from","childViews","$bd013581c0a4b065$var$useStyle","$7lS7h$layoutInfoToStyle","rowGroupProps","$7lS7h$useTableRowGroup","_state_sortDescriptor","_state_sortDescriptor1","_state_sortDescriptor2","_state_sortDescriptor3","pressProps","isPressed","$7lS7h$usePress","isDisabled","columnProps","columnHeaderProps","$7lS7h$useTableColumnHeader","node","hoverProps","isHovered","$7lS7h$useHover","allProps","$7lS7h$FocusRing","focusRingClass","allowsSorting","sortDescriptor","align","$7lS7h$spectrumiconsuiArrowDownSmall","UNSAFE_className","$7lS7h$VisuallyHidden","$bd013581c0a4b065$var$_TableColumnHeaderButton","alignment","$7lS7h$useFocusableRef","buttonProps","$7lS7h$useButton","elementType","$bd013581c0a4b065$var$TableColumnHeaderButton","forwardRef","_column_props","triggerRef","resizingRef","stringFormatter","$7lS7h$useLocalizedStringFormatter","$7lS7h$intlStringsmodulejs","onMenuSelect","sort","startResize","setKeyboardNavigationDisabled","items","options","label","format","id","showResizer","menuAlign","$7lS7h$MenuTrigger","onOpenChange","$7lS7h$spectrumiconsuiChevronDownMedium","$7lS7h$Menu","minWidth","$7lS7h$Item","$fc695d2eafc2b351$export$48a76196cafe3b93","$7lS7h$useUnwrapDOMRef","$cb7d341e8868d81d$export$d9658cdf8c86807","isSingleSelectionMode","selectionMode","checkboxProps","$7lS7h$useTableSelectAllCheckbox","$7lS7h$Checkbox","isEmphasized","UNSAFE_style","visibility","$4e6fc36ba71ba405$export$d30a7814cfd4033e","$bd013581c0a4b065$var$DragButton","dragButtonProps","dragButtonRef","isFocusVisibleWithin","$bd013581c0a4b065$export$cd7c5802f9e21187","visuallyHiddenProps","$7lS7h$useVisuallyHidden","draggable","$7lS7h$spectrumiconsuiListGripper","$bd013581c0a4b065$var$TableRowContext","_state_collection_rows_find","_layout_getContentSize","_layout_virtualizer","isSelected","rowProps","hasAction","allowsSelection","$7lS7h$useTableRow","shouldSelectOnPressUp","isInteractive","isDroppable","focusWithinProps","within","isFirstRow","rows","find","row","level","isLastRow","nextKey","isFlushWithContainerBottom","getContentSize","draggableItem","useDraggableItem","hasDragButton","droppableItem","dropIndicator","dropIndicatorRef","useDropIndicator","useRef","dragProps","dropProps","$7ee9a922ee4e8032$export$2c0bab5914a9d088","isHidden","dropIndicatorProps","selectionBehavior","$7lS7h$useTableHeaderRow","parentKey","gridCellProps","$7lS7h$useTableCell","isSelectionDisabled","has","$7lS7h$useTableSelectionCheckbox","isExpandableTable","otherGridCellProps","isFirstRowHeaderCell","rowHeaderColumnKeys","keys","next","isRowExpandable","showExpandCollapseButton","levelOffset","_state_keyMap_get_props_UNSTABLE_childItems","_state_keyMap_get","_state_keyMap_get_props_children","_state_keyMap_get_props","_state_keyMap_get1","keyMap","get","UNSTABLE_childItems","length","userColumnCount","paddingInlineStart","$bd013581c0a4b065$var$ExpandableRowChevron","isRootDroptarget","$7lS7h$VirtualizerItem","estimatedSize","expandButtonRef","isExpanded","expandedKeys","onPress","toggleKey","$7lS7h$isFocusVisible","setFocused","setFocusedKey","$7lS7h$isAndroid","$7lS7h$spectrumiconsuiChevronRightMedium","$7lS7h$spectrumiconsuiChevronLeftMedium","$bd013581c0a4b065$var$CenteredWrapper","$7lS7h$ProgressCircle","isIndeterminate","emptyState","topLevelRowCount","childNodes","headerRows","$bd013581c0a4b065$export$517e02184d273d69"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/table/dist/packages/@react-spectrum/table/src/TableViewBase.tsx"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport ArrowDownSmall from '@spectrum-icons/ui/ArrowDownSmall';\nimport {Checkbox} from '@react-spectrum/checkbox';\nimport ChevronDownMedium from '@spectrum-icons/ui/ChevronDownMedium';\nimport ChevronLeftMedium from '@spectrum-icons/ui/ChevronLeftMedium';\nimport ChevronRightMedium from '@spectrum-icons/ui/ChevronRightMedium';\nimport {\n  classNames,\n  useDOMRef,\n  useFocusableRef,\n  useStyleProps,\n  useUnwrapDOMRef\n} from '@react-spectrum/utils';\nimport {ColumnSize, SpectrumColumnProps, TableCollection} from '@react-types/table';\nimport {DOMRef, DropTarget, FocusableElement, FocusableRef, Key, RefObject} from '@react-types/shared';\nimport type {DragAndDropHooks} from '@react-spectrum/dnd';\nimport type {DraggableCollectionState, DroppableCollectionState} from '@react-stately/dnd';\nimport type {DraggableItemResult, DropIndicatorAria, DroppableCollectionResult, DroppableItemResult} from '@react-aria/dnd';\nimport {FocusRing, FocusScope, useFocusRing} from '@react-aria/focus';\nimport {getInteractionModality, isFocusVisible, useHover, usePress} from '@react-aria/interactions';\nimport {GridNode} from '@react-types/grid';\nimport {InsertionIndicator} from './InsertionIndicator';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {isAndroid, mergeProps, scrollIntoView, scrollIntoViewport, useLoadMore} from '@react-aria/utils';\nimport {Item, Menu, MenuTrigger} from '@react-spectrum/menu';\nimport {LayoutInfo, Rect, ReusableView, useVirtualizerState} from '@react-stately/virtualizer';\nimport {layoutInfoToStyle, ScrollView, setScrollLeft, VirtualizerItem} from '@react-aria/virtualizer';\nimport ListGripper from '@spectrum-icons/ui/ListGripper';\nimport {ListKeyboardDelegate} from '@react-aria/selection';\nimport {Nubbin} from './Nubbin';\nimport {ProgressCircle} from '@react-spectrum/progress';\nimport React, {DOMAttributes, HTMLAttributes, ReactElement, ReactNode, useCallback, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {Resizer, ResizeStateContext} from './Resizer';\nimport {RootDropIndicator} from './RootDropIndicator';\nimport {DragPreview as SpectrumDragPreview} from './DragPreview';\nimport {SpectrumTableProps} from './TableViewWrapper';\nimport styles from '@adobe/spectrum-css-temp/components/table/vars.css';\nimport stylesOverrides from './table.css';\nimport {TableState, TreeGridState, useTableColumnResizeState} from '@react-stately/table';\nimport {TableViewLayout} from './TableViewLayout';\nimport {Tooltip, TooltipTrigger} from '@react-spectrum/tooltip';\nimport {useButton} from '@react-aria/button';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProvider, useProviderProps} from '@react-spectrum/provider';\nimport {\n  useTable,\n  useTableCell,\n  useTableColumnHeader,\n  useTableHeaderRow,\n  useTableRow,\n  useTableRowGroup,\n  useTableSelectAllCheckbox,\n  useTableSelectionCheckbox\n} from '@react-aria/table';\nimport {useVisuallyHidden, VisuallyHidden} from '@react-aria/visually-hidden';\n\nconst DEFAULT_HEADER_HEIGHT = {\n  medium: 34,\n  large: 40\n};\n\nconst DEFAULT_HIDE_HEADER_CELL_WIDTH = {\n  medium: 38,\n  large: 46\n};\n\nconst ROW_HEIGHTS = {\n  compact: {\n    medium: 32,\n    large: 40\n  },\n  regular: {\n    medium: 40,\n    large: 50\n  },\n  spacious: {\n    medium: 48,\n    large: 60\n  }\n};\n\nconst SELECTION_CELL_DEFAULT_WIDTH = {\n  medium: 38,\n  large: 48\n};\n\nconst DRAG_BUTTON_CELL_DEFAULT_WIDTH = {\n  medium: 16,\n  large: 20\n};\n\nconst LEVEL_OFFSET_WIDTH = {\n  medium: 16,\n  large: 20\n};\n\nexport interface TableContextValue<T> {\n  state: TableState<T> | TreeGridState<T>,\n  dragState: DraggableCollectionState,\n  dropState: DroppableCollectionState,\n  dragAndDropHooks: DragAndDropHooks['dragAndDropHooks'],\n  isTableDraggable: boolean,\n  isTableDroppable: boolean,\n  layout: TableViewLayout<T>,\n  headerRowHovered: boolean,\n  isInResizeMode: boolean,\n  setIsInResizeMode: (val: boolean) => void,\n  isEmpty: boolean,\n  onFocusedResizer: () => void,\n  onResizeStart: (widths: Map<Key, ColumnSize>) => void,\n  onResize: (widths: Map<Key, ColumnSize>) => void,\n  onResizeEnd: (widths: Map<Key, ColumnSize>) => void,\n  headerMenuOpen: boolean,\n  setHeaderMenuOpen: (val: boolean) => void,\n  renderEmptyState?: () => ReactElement\n}\n\nexport const TableContext = React.createContext<TableContextValue<unknown>>(null);\nexport function useTableContext() {\n  return useContext(TableContext);\n}\n\nexport const VirtualizerContext = React.createContext(null);\nexport function useVirtualizerContext() {\n  return useContext(VirtualizerContext);\n}\n\ninterface TableBaseProps<T> extends SpectrumTableProps<T> {\n  state: TableState<T> | TreeGridState<T>\n}\n\ntype View = ReusableView<GridNode<unknown>, ReactNode>;\n\nfunction TableViewBase<T extends object>(props: TableBaseProps<T>, ref: DOMRef<HTMLDivElement>) {\n  props = useProviderProps(props);\n  let {\n    isQuiet,\n    onAction,\n    onResizeStart: propsOnResizeStart,\n    onResizeEnd: propsOnResizeEnd,\n    dragAndDropHooks,\n    state\n  } = props;\n  let isTableDraggable = !!dragAndDropHooks?.useDraggableCollectionState;\n  let isTableDroppable = !!dragAndDropHooks?.useDroppableCollectionState;\n  let dragHooksProvided = useRef(isTableDraggable);\n  let dropHooksProvided = useRef(isTableDroppable);\n  useEffect(() => {\n    if (dragHooksProvided.current !== isTableDraggable) {\n      console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if (dropHooksProvided.current !== isTableDroppable) {\n      console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');\n    }\n    if ('expandedKeys' in state && (isTableDraggable || isTableDroppable)) {\n      console.warn('Drag and drop is not yet fully supported with expandable rows and may produce unexpected results.');\n    }\n  }, [isTableDraggable, isTableDroppable, state]);\n\n  let {styleProps} = useStyleProps(props);\n  let {scale} = useProvider();\n\n  // Starts when the user selects resize from the menu, ends when resizing ends\n  // used to control the visibility of the resizer Nubbin\n  let [isInResizeMode, setIsInResizeMode] = useState(false);\n  // Starts when the resizer is actually moved\n  // entering resizing/exiting resizing doesn't trigger a render\n  // with table layout, so we need to track it here\n  let [, setIsResizing] = useState(false);\n\n  let domRef = useDOMRef(ref);\n  let headerRef = useRef<HTMLDivElement>(undefined);\n  let bodyRef = useRef<HTMLDivElement>(undefined);\n\n  let density = props.density || 'regular';\n  let layout = useMemo(() => new TableViewLayout({\n    // If props.rowHeight is auto, then use estimated heights based on scale, otherwise use fixed heights.\n    rowHeight: props.overflowMode === 'wrap'\n      ? null\n      : ROW_HEIGHTS[density][scale],\n    estimatedRowHeight: props.overflowMode === 'wrap'\n      ? ROW_HEIGHTS[density][scale]\n      : null,\n    headingHeight: props.overflowMode === 'wrap'\n      ? null\n      : DEFAULT_HEADER_HEIGHT[scale],\n    estimatedHeadingHeight: props.overflowMode === 'wrap'\n      ? DEFAULT_HEADER_HEIGHT[scale]\n      : null\n  }),\n    // don't recompute when state.collection changes, only used for initial value\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [props.overflowMode, scale, density]\n  );\n\n  let dragState: DraggableCollectionState;\n  let preview = useRef(null);\n  if (isTableDraggable) {\n    dragState = dragAndDropHooks.useDraggableCollectionState({\n      collection: state.collection,\n      selectionManager: state.selectionManager,\n      preview\n    });\n    dragAndDropHooks.useDraggableCollection({}, dragState, domRef);\n  }\n\n  let DragPreview = dragAndDropHooks?.DragPreview;\n  let dropState: DroppableCollectionState;\n  let droppableCollection: DroppableCollectionResult;\n  let isRootDropTarget: boolean;\n  if (isTableDroppable) {\n    dropState = dragAndDropHooks.useDroppableCollectionState({\n      collection: state.collection,\n      selectionManager: state.selectionManager\n    });\n    droppableCollection = dragAndDropHooks.useDroppableCollection({\n      keyboardDelegate: new ListKeyboardDelegate({\n        collection: state.collection,\n        disabledKeys: state.selectionManager.disabledKeys,\n        ref: domRef,\n        layoutDelegate: layout\n      }),\n      dropTargetDelegate: layout\n    }, dropState, domRef);\n\n    isRootDropTarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  let {gridProps} = useTable({\n    ...props,\n    isVirtualized: true,\n    layoutDelegate: layout,\n    onRowAction: onAction,\n    scrollRef: bodyRef\n  }, state, domRef);\n  let [headerMenuOpen, setHeaderMenuOpen] = useState(false);\n  let [headerRowHovered, setHeaderRowHovered] = useState(false);\n\n  // This overrides collection view's renderWrapper to support DOM hierarchy.\n  let renderWrapper = useCallback((parent: View, reusableView: View, children: View[], renderChildren: (views: View[]) => ReactElement[]) => {\n    if (reusableView.viewType === 'rowgroup') {\n      return (\n        <TableRowGroup\n          key={reusableView.key}\n          layoutInfo={reusableView.layoutInfo}\n          parent={parent?.layoutInfo}\n          // Override the default role=\"rowgroup\" with role=\"presentation\",\n          // in favor or adding role=\"rowgroup\" to the ScrollView with\n          // ref={bodyRef} in the TableVirtualizer below.\n          role=\"presentation\">\n          {renderChildren(children)}\n        </TableRowGroup>\n      );\n    }\n\n    if (reusableView.viewType === 'header') {\n      return (\n        <TableHeader\n          key={reusableView.key}\n          layoutInfo={reusableView.layoutInfo}\n          parent={parent?.layoutInfo}>\n          {renderChildren(children)}\n        </TableHeader>\n      );\n    }\n\n    if (reusableView.viewType === 'row') {\n      return (\n        <TableRow\n          key={reusableView.key}\n          item={reusableView.content}\n          layoutInfo={reusableView.layoutInfo}\n          parent={parent?.layoutInfo}>\n          {renderChildren(children)}\n        </TableRow>\n      );\n    }\n\n    if (reusableView.viewType === 'headerrow') {\n      return (\n        <TableHeaderRow\n          onHoverChange={setHeaderRowHovered}\n          key={reusableView.key}\n          layoutInfo={reusableView.layoutInfo}\n          parent={parent?.layoutInfo}\n          item={reusableView.content}>\n          {renderChildren(children)}\n        </TableHeaderRow>\n      );\n    }\n\n    return (\n      <TableCellWrapper\n        key={reusableView.key}\n        layoutInfo={reusableView.layoutInfo}\n        virtualizer={reusableView.virtualizer}\n        parent={parent}>\n        {reusableView.rendered}\n      </TableCellWrapper>\n    );\n  }, []);\n\n  let renderView = useCallback((type: string, item: GridNode<T>) => {\n    switch (type) {\n      case 'header':\n      case 'rowgroup':\n      case 'section':\n      case 'row':\n      case 'headerrow':\n        return null;\n      case 'cell': {\n        if (item.props.isSelectionCell) {\n          return <TableCheckboxCell cell={item} />;\n        }\n\n        if (item.props.isDragButtonCell) {\n          return <TableDragCell cell={item} />;\n        }\n\n        return <TableCell cell={item} />;\n      }\n      case 'placeholder':\n        // TODO: move to react-aria?\n        return (\n          <div\n            role=\"gridcell\"\n            aria-colindex={item.index + 1}\n            aria-colspan={item.colspan > 1 ? item.colspan : null} />\n        );\n      case 'column':\n        if (item.props.isSelectionCell) {\n          return <TableSelectAllCell column={item} />;\n        }\n\n        if (item.props.isDragButtonCell) {\n          return <TableDragHeaderCell column={item} />;\n        }\n\n        // TODO: consider this case, what if we have hidden headers and a empty table\n        if (item.props.hideHeader) {\n          return (\n            <TooltipTrigger placement=\"top\" trigger=\"focus\">\n              <TableColumnHeader column={item} />\n              <Tooltip placement=\"top\">{item.rendered}</Tooltip>\n            </TooltipTrigger>\n          );\n        }\n\n        if (item.props.allowsResizing && !item.hasChildNodes) {\n          return <ResizableTableColumnHeader column={item} />;\n        }\n\n        return (\n          <TableColumnHeader column={item} />\n        );\n      case 'loader':\n        return <LoadingState />;\n      case 'empty': {\n        return <EmptyState />;\n      }\n    }\n  }, []);\n\n  let [isVerticalScrollbarVisible, setVerticalScollbarVisible] = useState(false);\n  let [isHorizontalScrollbarVisible, setHorizontalScollbarVisible] = useState(false);\n  let viewport = useRef({x: 0, y: 0, width: 0, height: 0});\n  let onVisibleRectChange = useCallback((e) => {\n    if (viewport.current.width === e.width && viewport.current.height === e.height) {\n      return;\n    }\n    viewport.current = e;\n    if (bodyRef.current) {\n      setVerticalScollbarVisible(bodyRef.current.clientWidth + 2 < bodyRef.current.offsetWidth);\n      setHorizontalScollbarVisible(bodyRef.current.clientHeight + 2 < bodyRef.current.offsetHeight);\n    }\n  }, []);\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let isEmpty = state.collection.size === 0;\n\n  let onFocusedResizer = () => {\n    bodyRef.current.scrollLeft = headerRef.current.scrollLeft;\n  };\n\n  let onResizeStart = useCallback((widths) => {\n    setIsResizing(true);\n    propsOnResizeStart?.(widths);\n  }, [setIsResizing, propsOnResizeStart]);\n  let onResizeEnd = useCallback((widths) => {\n    setIsInResizeMode(false);\n    setIsResizing(false);\n    propsOnResizeEnd?.(widths);\n  }, [propsOnResizeEnd, setIsInResizeMode, setIsResizing]);\n\n  let focusedKey = state.selectionManager.focusedKey;\n  let dropTargetKey: Key | null = null;\n  if (dropState?.target?.type === 'item') {\n    dropTargetKey = dropState.target.key;\n    if (dropState.target.dropPosition === 'before' && dropTargetKey !== state.collection.getFirstKey()) {\n      // Normalize to the \"after\" drop position since we only render those in the DOM.\n      // The exception to this is for the first row in the table, where we also render the \"before\" position.\n      dropTargetKey = state.collection.getKeyBefore(dropTargetKey);\n    }\n  }\n\n  let persistedKeys = useMemo(() => {\n    return new Set([focusedKey, dropTargetKey].filter(k => k !== null));\n  }, [focusedKey, dropTargetKey]);\n\n  let mergedProps = mergeProps(\n    isTableDroppable && droppableCollection?.collectionProps,\n    gridProps,\n    focusProps,\n    dragAndDropHooks?.isVirtualDragging() && {tabIndex: null}\n  );\n\n  return (\n    <TableContext.Provider\n      value={{\n        state,\n        dragState,\n        dropState,\n        dragAndDropHooks,\n        isTableDraggable,\n        isTableDroppable,\n        layout,\n        onResizeStart,\n        onResize: props.onResize,\n        onResizeEnd,\n        headerRowHovered,\n        isInResizeMode,\n        setIsInResizeMode,\n        isEmpty,\n        onFocusedResizer,\n        headerMenuOpen,\n        setHeaderMenuOpen,\n        renderEmptyState: props.renderEmptyState\n      }}>\n      <TableVirtualizer\n        {...mergedProps}\n        {...styleProps}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table',\n            `spectrum-Table--${density}`,\n            {\n              'spectrum-Table--quiet': isQuiet,\n              'spectrum-Table--wrap': props.overflowMode === 'wrap',\n              'spectrum-Table--loadingMore': state.collection.body.props.loadingState === 'loadingMore',\n              'spectrum-Table--isVerticalScrollbarVisible': isVerticalScrollbarVisible,\n              'spectrum-Table--isHorizontalScrollbarVisible': isHorizontalScrollbarVisible\n            },\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table'\n            ),\n            styleProps.className\n          )\n        }\n        tableState={state}\n        layout={layout}\n        collection={state.collection}\n        persistedKeys={persistedKeys}\n        renderView={renderView}\n        renderWrapper={renderWrapper}\n        onVisibleRectChange={onVisibleRectChange}\n        domRef={domRef}\n        headerRef={headerRef}\n        bodyRef={bodyRef}\n        isFocusVisible={isFocusVisible}\n        isVirtualDragging={dragAndDropHooks?.isVirtualDragging()}\n        isRootDropTarget={isRootDropTarget} />\n      {DragPreview && isTableDraggable &&\n        <DragPreview ref={preview}>\n          {() => {\n            if (dragAndDropHooks.renderPreview) {\n              return dragAndDropHooks.renderPreview(dragState.draggingKeys, dragState.draggedKey);\n            }\n            let itemCount = dragState.draggingKeys.size;\n            let maxWidth = bodyRef.current.getBoundingClientRect().width;\n            let height = ROW_HEIGHTS[density][scale];\n            let itemText = state.collection.getTextValue(dragState.draggedKey);\n            return <SpectrumDragPreview itemText={itemText} itemCount={itemCount} height={height} maxWidth={maxWidth} />;\n          }}\n        </DragPreview>\n      }\n    </TableContext.Provider>\n  );\n}\n\ninterface TableVirtualizerProps<T> extends HTMLAttributes<HTMLElement> {\n  tableState: TableState<T>,\n  layout: TableViewLayout<T>,\n  collection: TableCollection<T>,\n  persistedKeys: Set<Key> | null,\n  renderView: (type: string, content: GridNode<T>) => ReactElement,\n  renderWrapper?: (\n    parent: View | null,\n    reusableView: View,\n    children: View[],\n    renderChildren: (views: View[]) => ReactElement[]\n  ) => ReactElement,\n  domRef: RefObject<HTMLDivElement>,\n  bodyRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  onVisibleRectChange: (rect: Rect) => void,\n  isFocusVisible: boolean,\n  isVirtualDragging: boolean,\n  isRootDropTarget: boolean\n}\n\n// This is a custom Virtualizer that also has a header that syncs its scroll position with the body.\nfunction TableVirtualizer<T>(props: TableVirtualizerProps<T>) {\n  let {tableState, layout, collection, persistedKeys, renderView, renderWrapper, domRef, bodyRef, headerRef, onVisibleRectChange: onVisibleRectChangeProp, isFocusVisible, isVirtualDragging, isRootDropTarget, ...otherProps} = props;\n  let {direction} = useLocale();\n  let loadingState = collection.body.props.loadingState;\n  let isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n  let onLoadMore = collection.body.props.onLoadMore;\n  let [tableWidth, setTableWidth] = useState(0);\n  let {scale} = useProvider();\n\n  const getDefaultWidth = useCallback(({props: {hideHeader, isSelectionCell, showDivider, isDragButtonCell}}: GridNode<T>): ColumnSize | null | undefined => {\n    if (hideHeader) {\n      let width = DEFAULT_HIDE_HEADER_CELL_WIDTH[scale];\n      return showDivider ? width + 1 : width;\n    } else if (isSelectionCell) {\n      return SELECTION_CELL_DEFAULT_WIDTH[scale];\n    } else if (isDragButtonCell) {\n      return DRAG_BUTTON_CELL_DEFAULT_WIDTH[scale];\n    }\n  }, [scale]);\n\n  const getDefaultMinWidth = useCallback(({props: {hideHeader, isSelectionCell, showDivider, isDragButtonCell}}: GridNode<T>): ColumnSize | null | undefined => {\n    if (hideHeader) {\n      let width = DEFAULT_HIDE_HEADER_CELL_WIDTH[scale];\n      return showDivider ? width + 1 : width;\n    } else if (isSelectionCell) {\n      return SELECTION_CELL_DEFAULT_WIDTH[scale];\n    } else if (isDragButtonCell) {\n      return DRAG_BUTTON_CELL_DEFAULT_WIDTH[scale];\n    }\n    return 75;\n  }, [scale]);\n\n  let columnResizeState = useTableColumnResizeState({\n    tableWidth,\n    getDefaultWidth,\n    getDefaultMinWidth\n  }, tableState);\n\n  let state = useVirtualizerState<GridNode<unknown>, ReactNode>({\n    layout,\n    collection,\n    renderView,\n    onVisibleRectChange(rect) {\n      bodyRef.current.scrollTop = rect.y;\n      setScrollLeft(bodyRef.current, direction, rect.x);\n    },\n    persistedKeys,\n    layoutOptions: useMemo(() => ({\n      columnWidths: columnResizeState.columnWidths\n    }), [columnResizeState.columnWidths])\n  });\n\n  useLoadMore({isLoading, onLoadMore, scrollOffset: 1}, bodyRef);\n  let onVisibleRectChange = useCallback((rect: Rect) => {\n    state.setVisibleRect(rect);\n  }, [state]);\n\n  let onVisibleRectChangeMemo = useCallback(rect => {\n    setTableWidth(rect.width);\n    onVisibleRectChange(rect);\n    onVisibleRectChangeProp(rect);\n  }, [onVisibleRectChange, onVisibleRectChangeProp]);\n\n  // this effect runs whenever the contentSize changes, it doesn't matter what the content size is\n  // only that it changes in a resize, and when that happens, we want to sync the body to the\n  // header scroll position\n  useEffect(() => {\n    if (getInteractionModality() === 'keyboard' && headerRef.current.contains(document.activeElement)) {\n      scrollIntoView(headerRef.current, document.activeElement as HTMLElement);\n      scrollIntoViewport(document.activeElement, {containingElement: domRef.current});\n      bodyRef.current.scrollLeft = headerRef.current.scrollLeft;\n    }\n  }, [state.contentSize, headerRef, bodyRef, domRef]);\n\n  let headerHeight = layout.getLayoutInfo('header')?.rect.height || 0;\n\n  // Sync the scroll position from the table body to the header container.\n  let onScroll = useCallback(() => {\n    headerRef.current.scrollLeft = bodyRef.current.scrollLeft;\n  }, [bodyRef, headerRef]);\n\n  let resizerPosition = columnResizeState.resizingColumn != null ? layout.getLayoutInfo(columnResizeState.resizingColumn).rect.maxX - 2 : 0;\n\n  let resizerAtEdge = resizerPosition > Math.max(state.virtualizer.contentSize.width, state.virtualizer.visibleRect.width) - 3;\n  // this should be fine, every movement of the resizer causes a rerender\n  // scrolling can cause it to lag for a moment, but it's always updated\n  let resizerInVisibleRegion = resizerPosition < state.virtualizer.visibleRect.maxX;\n  let shouldHardCornerResizeCorner = resizerAtEdge && resizerInVisibleRegion;\n\n  // minimize re-render caused on Resizers by memoing this\n  let resizingColumnWidth = columnResizeState.resizingColumn != null ? columnResizeState.getColumnWidth(columnResizeState.resizingColumn) : 0;\n  let resizingColumn = useMemo(() => ({\n    width: resizingColumnWidth,\n    key: columnResizeState.resizingColumn\n  }), [resizingColumnWidth, columnResizeState.resizingColumn]);\n  let mergedProps = mergeProps(\n    otherProps,\n    isVirtualDragging && {tabIndex: null}\n  );\n\n  let firstColumn = collection.columns[0];\n  let scrollPadding = 0;\n  if (firstColumn.props.isSelectionCell || firstColumn.props.isDragButtonCell) {\n    scrollPadding = columnResizeState.getColumnWidth(firstColumn.key);\n  }\n\n  let visibleViews = renderChildren(null, state.visibleViews, renderWrapper);\n\n  return (\n    <VirtualizerContext.Provider value={resizingColumn}>\n      <FocusScope>\n        <div\n          {...mergedProps}\n          ref={domRef}>\n          <div\n            role=\"presentation\"\n            className={classNames(styles, 'spectrum-Table-headWrapper')}\n            style={{\n              height: headerHeight,\n              overflow: 'hidden',\n              position: 'relative',\n              willChange: state.isScrolling ? 'scroll-position' : undefined,\n              scrollPaddingInlineStart: scrollPadding\n            }}\n            ref={headerRef}>\n            <ResizeStateContext.Provider value={columnResizeState}>\n              {visibleViews[0]}\n            </ResizeStateContext.Provider>\n          </div>\n          <ScrollView\n            className={\n              classNames(\n                styles,\n                'spectrum-Table-body',\n                {\n                  'focus-ring': isFocusVisible,\n                  'spectrum-Table-body--resizerAtTableEdge': shouldHardCornerResizeCorner\n                },\n                classNames(\n                  stylesOverrides,\n                  'react-spectrum-Table-body',\n                  {\n                    'react-spectrum-Table-body--dropTarget': !!isRootDropTarget\n                  }\n                )\n              )\n            }\n            //  Firefox and Chrome make generic elements using CSS overflow 'scroll' or 'auto' tabbable,\n            //  including them within the accessibility tree, which breaks the table structure in Firefox.\n            //  Using tabIndex={-1} prevents the ScrollView from being tabbable, and using role=\"rowgroup\"\n            //  here and role=\"presentation\" on the table body content fixes the table structure.\n            role=\"rowgroup\"\n            tabIndex={isVirtualDragging ? null : -1}\n            style={{\n              flex: 1,\n              scrollPaddingInlineStart: scrollPadding\n            }}\n            innerStyle={{overflow: 'visible'}}\n            ref={bodyRef}\n            contentSize={state.contentSize}\n            onVisibleRectChange={onVisibleRectChangeMemo}\n            onScrollStart={state.startScrolling}\n            onScrollEnd={state.endScrolling}\n            onScroll={onScroll}>\n            {visibleViews[1]}\n            <div\n              className={classNames(styles, 'spectrum-Table-bodyResizeIndicator')}\n              style={{[direction === 'ltr' ? 'left' : 'right']: `${resizerPosition}px`, height: `${Math.max(state.virtualizer.contentSize.height, state.virtualizer.visibleRect.height)}px`, display: columnResizeState.resizingColumn ? 'block' : 'none'}} />\n          </ScrollView>\n        </div>\n      </FocusScope>\n    </VirtualizerContext.Provider>\n  );\n}\n\nfunction renderChildren<T extends object>(parent: View | null, views: View[], renderWrapper: TableVirtualizerProps<T>['renderWrapper']) {\n  return views.map(view => {\n    return renderWrapper(\n      parent,\n      view,\n      view.children ? Array.from(view.children) : [],\n      childViews => renderChildren(view, childViews, renderWrapper)\n    );\n  });\n}\n\nfunction useStyle(layoutInfo: LayoutInfo, parent: LayoutInfo | null) {\n  let {direction} = useLocale();\n  let style = layoutInfoToStyle(layoutInfo, direction, parent);\n  if (style.overflow === 'hidden') {\n    style.overflow = 'visible'; // needed to support position: sticky\n  }\n  return style;\n}\n\nfunction TableHeader({children, layoutInfo, parent, ...otherProps}) {\n  let {rowGroupProps} = useTableRowGroup();\n  let style = useStyle(layoutInfo, parent);\n\n  return (\n    <div {...rowGroupProps} {...otherProps} className={classNames(styles, 'spectrum-Table-head')} style={style}>\n      {children}\n    </div>\n  );\n}\n\nfunction TableColumnHeader(props) {\n  let {column} = props;\n  let ref = useRef<HTMLDivElement>(null);\n  let {state, isEmpty} = useTableContext();\n  let {pressProps, isPressed} = usePress({isDisabled: isEmpty});\n  let columnProps = column.props as SpectrumColumnProps<unknown>;\n  useEffect(() => {\n    if (column.hasChildNodes && columnProps.allowsResizing) {\n      console.warn(`Column key: ${column.key}. Columns with child columns don't allow resizing.`);\n    }\n  }, [column.hasChildNodes, column.key, columnProps.allowsResizing]);\n\n  let {columnHeaderProps} = useTableColumnHeader({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n\n  let {hoverProps, isHovered} = useHover({...props, isDisabled: isEmpty});\n\n  const allProps = [columnHeaderProps, hoverProps, pressProps];\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...mergeProps(...allProps)}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-headCell',\n            {\n              'is-active': isPressed,\n              'is-sortable': columnProps.allowsSorting,\n              'is-sorted-desc': state.sortDescriptor?.column === column.key && state.sortDescriptor?.direction === 'descending',\n              'is-sorted-asc': state.sortDescriptor?.column === column.key && state.sortDescriptor?.direction === 'ascending',\n              'is-hovered': isHovered,\n              'spectrum-Table-cell--hideHeader': columnProps.hideHeader\n            },\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table-cell',\n              {\n                'react-spectrum-Table-cell--alignCenter': columnProps.align === 'center' || column.colspan > 1,\n                'react-spectrum-Table-cell--alignEnd': columnProps.align === 'end'\n              }\n            )\n          )\n        }>\n        {columnProps.allowsSorting &&\n          <ArrowDownSmall UNSAFE_className={classNames(styles, 'spectrum-Table-sortedIcon')} />\n        }\n        {columnProps.hideHeader ?\n          <VisuallyHidden>{column.rendered}</VisuallyHidden> :\n          <div className={classNames(styles, 'spectrum-Table-headCellContents')}>{column.rendered}</div>\n        }\n      </div>\n    </FocusRing>\n  );\n}\n\nlet _TableColumnHeaderButton = (props, ref: FocusableRef<HTMLDivElement>) => {\n  let {focusProps, alignment, ...otherProps} = props;\n  let {isEmpty} = useTableContext();\n  let domRef = useFocusableRef(ref);\n  let {buttonProps} = useButton({...otherProps, elementType: 'div', isDisabled: isEmpty}, domRef);\n  let {hoverProps, isHovered} = useHover({...otherProps, isDisabled: isEmpty});\n\n  return (\n    <div\n      className={\n        classNames(\n          styles,\n          'spectrum-Table-headCellContents',\n          {\n            'is-hovered': isHovered\n          }\n        )\n      }\n      {...hoverProps}>\n      <div\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-headCellButton',\n            {\n              'spectrum-Table-headCellButton--alignStart': alignment === 'start',\n              'spectrum-Table-headCellButton--alignCenter': alignment === 'center',\n              'spectrum-Table-headCellButton--alignEnd': alignment === 'end'\n            }\n          )\n        }\n        {...mergeProps(buttonProps, focusProps)}\n        ref={domRef}>\n        {props.children}\n      </div>\n    </div>\n  );\n};\nlet TableColumnHeaderButton = React.forwardRef(_TableColumnHeaderButton);\n\nfunction ResizableTableColumnHeader(props) {\n  let {column} = props;\n  let ref = useRef(null);\n  let triggerRef = useRef(null);\n  let resizingRef = useRef(null);\n  let {\n    state,\n    onResizeStart,\n    onResize,\n    onResizeEnd,\n    headerRowHovered,\n    setIsInResizeMode,\n    isEmpty,\n    isInResizeMode,\n    headerMenuOpen,\n    setHeaderMenuOpen\n  } = useTableContext();\n  let columnResizeState = useContext(ResizeStateContext);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/table');\n  let {pressProps, isPressed} = usePress({isDisabled: isEmpty});\n  let {columnHeaderProps} = useTableColumnHeader({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n\n  let {hoverProps, isHovered} = useHover({...props, isDisabled: isEmpty || headerMenuOpen});\n\n  const allProps = [columnHeaderProps, pressProps, hoverProps];\n\n  let columnProps = column.props as SpectrumColumnProps<unknown>;\n\n  let {isFocusVisible, focusProps} = useFocusRing();\n\n  const onMenuSelect = (key) => {\n    switch (key) {\n      case 'sort-asc':\n        state.sort(column.key, 'ascending');\n        break;\n      case 'sort-desc':\n        state.sort(column.key, 'descending');\n        break;\n      case 'resize':\n        columnResizeState.startResize(column.key);\n        setIsInResizeMode(true);\n        state.setKeyboardNavigationDisabled(true);\n        break;\n    }\n  };\n  let allowsSorting = column.props?.allowsSorting;\n  let items = useMemo(() => {\n    let options = [\n      allowsSorting ? {\n        label: stringFormatter.format('sortAscending'),\n        id: 'sort-asc'\n      } : undefined,\n      allowsSorting ? {\n        label: stringFormatter.format('sortDescending'),\n        id: 'sort-desc'\n      } : undefined,\n      {\n        label: stringFormatter.format('resizeColumn'),\n        id: 'resize'\n      }\n    ];\n    return options;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allowsSorting]);\n\n  let resizingColumn = columnResizeState.resizingColumn;\n  let showResizer = !isEmpty && ((headerRowHovered && getInteractionModality() !== 'keyboard') || resizingColumn != null);\n  let alignment = 'start';\n  let menuAlign = 'start' as 'start' | 'end';\n  if (columnProps.align === 'center' || column.colspan > 1) {\n    alignment = 'center';\n  } else if (columnProps.align === 'end') {\n    alignment = 'end';\n    menuAlign = 'end';\n  }\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...mergeProps(...allProps)}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-headCell',\n            {\n              'is-active': isPressed,\n              'is-resizable': columnProps.allowsResizing,\n              'is-sortable': columnProps.allowsSorting,\n              'is-sorted-desc': state.sortDescriptor?.column === column.key && state.sortDescriptor?.direction === 'descending',\n              'is-sorted-asc': state.sortDescriptor?.column === column.key && state.sortDescriptor?.direction === 'ascending',\n              'is-hovered': isHovered,\n              'focus-ring': isFocusVisible,\n              'spectrum-Table-cell--hideHeader': columnProps.hideHeader\n            },\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table-cell',\n              {\n                'react-spectrum-Table-cell--alignCenter': alignment === 'center',\n                'react-spectrum-Table-cell--alignEnd': alignment === 'end'\n              }\n            )\n          )\n        }>\n        <MenuTrigger onOpenChange={setHeaderMenuOpen} align={menuAlign}>\n          <TableColumnHeaderButton alignment={alignment} ref={triggerRef} focusProps={focusProps}>\n            {columnProps.allowsSorting &&\n              <ArrowDownSmall UNSAFE_className={classNames(styles, 'spectrum-Table-sortedIcon')} />\n            }\n            {columnProps.hideHeader ?\n              <VisuallyHidden>{column.rendered}</VisuallyHidden> :\n              <div className={classNames(styles, 'spectrum-Table-headerCellText')}>{column.rendered}</div>\n            }\n            {\n              columnProps.allowsResizing && <ChevronDownMedium UNSAFE_className={classNames(styles, 'spectrum-Table-menuChevron')} />\n            }\n          </TableColumnHeaderButton>\n          <Menu onAction={onMenuSelect} minWidth=\"size-2000\" items={items}>\n            {(item) => (\n              <Item>\n                {item.label}\n              </Item>\n            )}\n          </Menu>\n        </MenuTrigger>\n        <Resizer\n          ref={resizingRef}\n          column={column}\n          showResizer={showResizer}\n          onResizeStart={onResizeStart}\n          onResize={onResize}\n          onResizeEnd={onResizeEnd}\n          triggerRef={useUnwrapDOMRef(triggerRef)} />\n        <div\n          aria-hidden\n          className={classNames(\n            styles,\n            'spectrum-Table-colResizeIndicator',\n            {\n              'spectrum-Table-colResizeIndicator--visible': resizingColumn != null,\n              'spectrum-Table-colResizeIndicator--resizing': resizingColumn === column.key\n            }\n          )}>\n          <div\n            className={classNames(\n              styles,\n              'spectrum-Table-colResizeNubbin',\n              {\n                'spectrum-Table-colResizeNubbin--visible': isInResizeMode && resizingColumn === column.key\n              }\n            )}>\n            <Nubbin />\n          </div>\n        </div>\n      </div>\n    </FocusRing>\n  );\n}\n\nfunction TableSelectAllCell({column}) {\n  let ref = useRef(undefined);\n  let {state} = useTableContext();\n  let isSingleSelectionMode = state.selectionManager.selectionMode === 'single';\n  let {columnHeaderProps} = useTableColumnHeader({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n\n  let {checkboxProps} = useTableSelectAllCheckbox(state);\n  let {hoverProps, isHovered} = useHover({});\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...mergeProps(columnHeaderProps, hoverProps)}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-headCell',\n            'spectrum-Table-checkboxCell',\n            {\n              'is-hovered': isHovered\n            }\n          )\n        }>\n        {\n          /*\n            In single selection mode, the checkbox will be hidden.\n            So to avoid leaving a column header with no accessible content,\n            we use a VisuallyHidden component to include the aria-label from the checkbox,\n            which for single selection will be \"Select.\"\n          */\n          isSingleSelectionMode &&\n          <VisuallyHidden>{checkboxProps['aria-label']}</VisuallyHidden>\n        }\n        <Checkbox\n          {...checkboxProps}\n          isEmphasized\n          UNSAFE_style={isSingleSelectionMode ? {visibility: 'hidden'} : undefined}\n          UNSAFE_className={classNames(styles, 'spectrum-Table-checkbox')} />\n      </div>\n    </FocusRing>\n  );\n}\n\nfunction TableDragHeaderCell({column}) {\n  let ref = useRef(undefined);\n  let {state} = useTableContext();\n  let {columnHeaderProps} = useTableColumnHeader({\n    node: column,\n    isVirtualized: true\n  }, state, ref);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/table');\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...columnHeaderProps}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-headCell',\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table-headCell',\n              'react-spectrum-Table-dragButtonHeadCell'\n            )\n          )\n        }>\n        <VisuallyHidden>{stringFormatter.format('drag')}</VisuallyHidden>\n      </div>\n    </FocusRing>\n  );\n}\n\nfunction TableRowGroup({children, layoutInfo, parent, ...otherProps}) {\n  let {rowGroupProps} = useTableRowGroup();\n  let {isTableDroppable} = useContext(TableContext);\n  let style = useStyle(layoutInfo, parent);\n\n  return (\n    <div {...rowGroupProps} style={style} {...otherProps}>\n      {isTableDroppable &&\n        <RootDropIndicator key=\"root\" />\n      }\n      {children}\n    </div>\n  );\n}\n\nfunction DragButton() {\n  let {dragButtonProps, dragButtonRef, isFocusVisibleWithin} = useTableRowContext();\n  let {visuallyHiddenProps} = useVisuallyHidden();\n  return (\n    <FocusRing focusRingClass={classNames(stylesOverrides, 'focus-ring')}>\n      <div\n        {...dragButtonProps as React.HTMLAttributes<HTMLElement>}\n        className={\n          classNames(\n            stylesOverrides,\n            'react-spectrum-Table-dragButton'\n          )\n        }\n        style={!isFocusVisibleWithin ? {...visuallyHiddenProps.style} : {}}\n        ref={dragButtonRef}\n        draggable=\"true\">\n        <ListGripper UNSAFE_className={classNames(stylesOverrides)} />\n      </div>\n    </FocusRing>\n  );\n}\n\ninterface TableRowContextValue {\n  dragButtonProps: React.HTMLAttributes<HTMLDivElement>,\n  dragButtonRef: React.MutableRefObject<undefined>,\n  isFocusVisibleWithin: boolean\n}\n\n\nconst TableRowContext = React.createContext<TableRowContextValue>(null);\nexport function useTableRowContext() {\n  return useContext(TableRowContext);\n}\n\nfunction TableRow({item, children, layoutInfo, parent, ...otherProps}) {\n  let ref = useRef(undefined);\n  let {state, layout, dragAndDropHooks, isTableDraggable, isTableDroppable, dragState, dropState} = useTableContext();\n  let isSelected = state.selectionManager.isSelected(item.key);\n  let {rowProps, hasAction, allowsSelection} = useTableRow({\n    node: item,\n    isVirtualized: true,\n    shouldSelectOnPressUp: isTableDraggable\n  }, state, ref);\n\n  let isDisabled = state.selectionManager.isDisabled(item.key);\n  let isInteractive = !isDisabled && (hasAction || allowsSelection || isTableDraggable);\n  let isDroppable = isTableDroppable && !isDisabled;\n  let {pressProps, isPressed} = usePress({isDisabled: !isInteractive});\n\n  // The row should show the focus background style when any cell inside it is focused.\n  // If the row itself is focused, then it should have a blue focus indicator on the left.\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = useFocusRing({within: true});\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let {hoverProps, isHovered} = useHover({isDisabled: !isInteractive});\n  let isFirstRow = state.collection.rows.find(row => row.level === 1)?.key === item.key;\n  let isLastRow = item.nextKey == null;\n  // Figure out if the TableView content is equal or greater in height to the container. If so, we'll need to round the bottom\n  // border corners of the last row when selected.\n  let isFlushWithContainerBottom = false;\n  if (isLastRow) {\n    if (layout.getContentSize()?.height >= layout.virtualizer?.visibleRect.height) {\n      isFlushWithContainerBottom = true;\n    }\n  }\n\n  let draggableItem: DraggableItemResult;\n  if (isTableDraggable) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    draggableItem = dragAndDropHooks.useDraggableItem({key: item.key, hasDragButton: true}, dragState);\n    if (isDisabled) {\n      draggableItem = null;\n    }\n  }\n  let droppableItem: DroppableItemResult;\n  let isDropTarget: boolean;\n  let dropIndicator: DropIndicatorAria;\n  let dropIndicatorRef = useRef(undefined);\n  if (isTableDroppable) {\n    let target = {type: 'item', key: item.key, dropPosition: 'on'} as DropTarget;\n    isDropTarget = dropState.isDropTarget(target);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    dropIndicator = dragAndDropHooks.useDropIndicator({target}, dropState, dropIndicatorRef);\n  }\n\n  let dragButtonRef = React.useRef(undefined);\n  let {buttonProps: dragButtonProps} = useButton({\n    ...draggableItem?.dragButtonProps,\n    elementType: 'div'\n  }, dragButtonRef);\n\n  let style = useStyle(layoutInfo, parent);\n\n  let props = mergeProps(\n    rowProps,\n    otherProps,\n    {style},\n    focusWithinProps,\n    focusProps,\n    hoverProps,\n    pressProps,\n    draggableItem?.dragProps,\n    // Remove tab index from list row if performing a screenreader drag. This prevents TalkBack from focusing the row,\n    // allowing for single swipe navigation between row drop indicator\n    dragAndDropHooks?.isVirtualDragging() && {tabIndex: null}\n  ) as HTMLAttributes<HTMLElement> & DOMAttributes<FocusableElement>;\n\n  let dropProps = isDroppable ? droppableItem?.dropProps : {'aria-hidden': droppableItem?.dropProps['aria-hidden']};\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  return (\n    <TableRowContext.Provider value={{dragButtonProps, dragButtonRef, isFocusVisibleWithin}}>\n      {isTableDroppable && isFirstRow &&\n        <InsertionIndicator\n          rowProps={props}\n          key={`${item.key}-before`}\n          target={{key: item.key, type: 'item', dropPosition: 'before'}} />\n      }\n      {isTableDroppable && !dropIndicator?.isHidden &&\n        <div role=\"row\" {...visuallyHiddenProps}>\n          <div role=\"gridcell\">\n            <div role=\"button\" {...dropIndicator?.dropIndicatorProps} ref={dropIndicatorRef} />\n          </div>\n        </div>\n      }\n      <div\n        {...mergeProps(props, dropProps)}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-row',\n            {\n              'is-active': isPressed,\n              'is-selected': isSelected,\n              'spectrum-Table-row--highlightSelection': state.selectionManager.selectionBehavior === 'replace',\n              'is-next-selected': state.selectionManager.isSelected(item.nextKey),\n              'is-focused': isFocusVisibleWithin,\n              'focus-ring': isFocusVisible,\n              'is-hovered': isHovered,\n              'is-disabled': isDisabled,\n              'spectrum-Table-row--firstRow': isFirstRow,\n              'spectrum-Table-row--lastRow': isLastRow,\n              'spectrum-Table-row--isFlushBottom': isFlushWithContainerBottom\n            },\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table-row',\n              {'react-spectrum-Table-row--dropTarget': isDropTarget}\n            )\n          )\n        }>\n        {children}\n      </div>\n      {isTableDroppable &&\n        <InsertionIndicator\n          rowProps={props}\n          key={`${item.key}-after`}\n          target={{key: item.key, type: 'item', dropPosition: 'after'}} />\n      }\n    </TableRowContext.Provider>\n  );\n}\n\nfunction TableHeaderRow({item, children, layoutInfo, parent, ...props}) {\n  let {state, headerMenuOpen} = useTableContext();\n  let ref = useRef(undefined);\n  let {rowProps} = useTableHeaderRow({node: item, isVirtualized: true}, state, ref);\n  let {hoverProps} = useHover({...props, isDisabled: headerMenuOpen});\n  let style = useStyle(layoutInfo, parent);\n\n  return (\n    <div {...mergeProps(rowProps, hoverProps)} ref={ref} style={style}>\n      {children}\n    </div>\n  );\n}\n\nfunction TableDragCell({cell}) {\n  let ref = useRef(undefined);\n  let {state, isTableDraggable} = useTableContext();\n  let isDisabled = state.selectionManager.isDisabled(cell.parentKey);\n  let {gridCellProps} = useTableCell({\n    node: cell,\n    isVirtualized: true\n  }, state, ref);\n\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...gridCellProps}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-cell',\n            {\n              'is-disabled': isDisabled\n            },\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table-cell',\n              'react-spectrum-Table-dragButtonCell'\n            )\n          )\n        }>\n        {isTableDraggable && !isDisabled && <DragButton />}\n      </div>\n    </FocusRing>\n  );\n}\n\nfunction TableCheckboxCell({cell}) {\n  let ref = useRef(undefined);\n  let {state} = useTableContext();\n  // The TableCheckbox should always render its disabled status if the row is disabled, regardless of disabledBehavior,\n  // but the cell itself should not render its disabled styles if disabledBehavior=\"selection\" because the row might have actions on it.\n  let isSelectionDisabled = state.disabledKeys.has(cell.parentKey);\n  let isDisabled = state.selectionManager.isDisabled(cell.parentKey);\n  let {gridCellProps} = useTableCell({\n    node: cell,\n    isVirtualized: true\n  }, state, ref);\n\n  let {checkboxProps} = useTableSelectionCheckbox({key: cell.parentKey}, state);\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...gridCellProps}\n        ref={ref}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-cell',\n            'spectrum-Table-checkboxCell',\n            {\n              'is-disabled': isDisabled\n            },\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table-cell'\n            )\n          )\n        }>\n        {state.selectionManager.selectionMode !== 'none' &&\n          <Checkbox\n            {...checkboxProps}\n            isEmphasized\n            isDisabled={isSelectionDisabled}\n            UNSAFE_className={classNames(styles, 'spectrum-Table-checkbox')} />\n        }\n      </div>\n    </FocusRing>\n  );\n}\n\nfunction TableCell({cell}) {\n  let {scale} = useProvider();\n  let {state} = useTableContext();\n  let isExpandableTable = 'expandedKeys' in state;\n  let ref = useRef(undefined);\n  let columnProps = cell.column.props as SpectrumColumnProps<unknown>;\n  let isDisabled = state.selectionManager.isDisabled(cell.parentKey);\n  let {gridCellProps} = useTableCell({\n    node: cell,\n    isVirtualized: true\n  }, state, ref);\n  let {id, ...otherGridCellProps} = gridCellProps;\n  let isFirstRowHeaderCell = state.collection.rowHeaderColumnKeys.keys().next().value === cell.column.key;\n  let isRowExpandable = false;\n  let showExpandCollapseButton = false;\n  let levelOffset = 0;\n\n  if ('expandedKeys' in state) {\n    isRowExpandable = state.keyMap.get(cell.parentKey)?.props.UNSTABLE_childItems?.length > 0 || state.keyMap.get(cell.parentKey)?.props?.children?.length > state.userColumnCount;\n    showExpandCollapseButton = isFirstRowHeaderCell && isRowExpandable;\n    // Offset based on level, and add additional offset if there is no expand/collapse button on a row\n    levelOffset = (cell.level - 2) * LEVEL_OFFSET_WIDTH[scale] + (!showExpandCollapseButton ? LEVEL_OFFSET_WIDTH[scale] * 2 : 0);\n  }\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')}>\n      <div\n        {...otherGridCellProps}\n        aria-labelledby={id}\n        ref={ref}\n        style={isExpandableTable && isFirstRowHeaderCell ? {paddingInlineStart: levelOffset} : {}}\n        className={\n          classNames(\n            styles,\n            'spectrum-Table-cell',\n            {\n              'spectrum-Table-cell--divider': columnProps.showDivider && cell.column.nextKey !== null,\n              'spectrum-Table-cell--hideHeader': columnProps.hideHeader,\n              'spectrum-Table-cell--hasExpandCollapseButton': showExpandCollapseButton,\n              'is-disabled': isDisabled\n            },\n            classNames(\n              stylesOverrides,\n              'react-spectrum-Table-cell',\n              {\n                'react-spectrum-Table-cell--alignStart': columnProps.align === 'start',\n                'react-spectrum-Table-cell--alignCenter': columnProps.align === 'center',\n                'react-spectrum-Table-cell--alignEnd': columnProps.align === 'end'\n              }\n            )\n          )\n        }>\n        {showExpandCollapseButton && <ExpandableRowChevron cell={cell} />}\n        <span\n          id={id}\n          className={\n            classNames(\n              styles,\n              'spectrum-Table-cellContents'\n            )\n        }>\n          {cell.rendered}\n        </span>\n      </div>\n    </FocusRing>\n  );\n}\n\nfunction TableCellWrapper({layoutInfo, virtualizer, parent, children}) {\n  let {isTableDroppable, dropState} = useContext(TableContext);\n  let isDropTarget: boolean;\n  let isRootDroptarget: boolean;\n  if (isTableDroppable) {\n    if (parent.content) {\n      isDropTarget = dropState.isDropTarget({type: 'item', dropPosition: 'on', key: parent.content.key});\n    }\n    isRootDroptarget = dropState.isDropTarget({type: 'root'});\n  }\n\n  return (\n    <VirtualizerItem\n      layoutInfo={layoutInfo}\n      virtualizer={virtualizer}\n      parent={parent?.layoutInfo}\n      className={\n        useMemo(() => classNames(\n          styles,\n          'spectrum-Table-cellWrapper',\n          classNames(\n            stylesOverrides,\n            {\n              'react-spectrum-Table-cellWrapper': !layoutInfo.estimatedSize,\n              'react-spectrum-Table-cellWrapper--dropTarget': isDropTarget || isRootDroptarget\n            }\n          )\n        ), [layoutInfo.estimatedSize, isDropTarget, isRootDroptarget])\n      }>\n      {children}\n    </VirtualizerItem>\n  );\n}\n\nfunction ExpandableRowChevron({cell}) {\n   // TODO: move some/all of the chevron button setup into a separate hook?\n  let {direction} = useLocale();\n  let {state} = useTableContext();\n  let expandButtonRef = useRef(undefined);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/table');\n  let isExpanded;\n\n  if ('expandedKeys' in state) {\n    isExpanded = state.expandedKeys === 'all' || state.expandedKeys.has(cell.parentKey);\n  }\n\n  // Will need to keep the chevron as a button for iOS VO at all times since VO doesn't focus the cell. Also keep as button if cellAction is defined by the user in the future\n  let {buttonProps} = useButton({\n    // Desktop and mobile both toggle expansion of a native expandable row on mouse/touch up\n    onPress: () => {\n      (state as TreeGridState<unknown>).toggleKey(cell.parentKey);\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(cell.parentKey);\n      }\n    },\n    elementType: 'span',\n    'aria-label': isExpanded ? stringFormatter.format('collapse') : stringFormatter.format('expand')\n  }, expandButtonRef);\n\n  return (\n    <span\n      {...buttonProps}\n      ref={expandButtonRef}\n      // Override tabindex so that grid keyboard nav skips over it. Needs -1 so android talkback can actually \"focus\" it\n      tabIndex={isAndroid() ? -1 : undefined}\n      className={\n        classNames(\n          styles,\n          'spectrum-Table-expandButton',\n          {\n            'is-open': isExpanded\n          }\n        )\n      }>\n      {direction === 'ltr' ? <ChevronRightMedium /> : <ChevronLeftMedium />}\n    </span>\n  );\n}\n\nfunction LoadingState() {\n  let {state} = useContext(TableContext);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/table');\n  return (\n    <CenteredWrapper>\n      <ProgressCircle\n        isIndeterminate\n        aria-label={state.collection.size > 0 ? stringFormatter.format('loadingMore') : stringFormatter.format('loading')} />\n    </CenteredWrapper>\n  );\n}\n\nfunction EmptyState() {\n  let {renderEmptyState} = useContext(TableContext);\n  let emptyState = renderEmptyState ? renderEmptyState() : null;\n  if (emptyState == null) {\n    return null;\n  }\n\n  return (\n    <CenteredWrapper>\n      {emptyState}\n    </CenteredWrapper>\n  );\n}\n\nfunction CenteredWrapper({children}) {\n  let {state} = useTableContext();\n  let rowProps;\n\n  if ('expandedKeys' in state) {\n    let topLevelRowCount = [...state.keyMap.get(state.collection.body.key).childNodes].length;\n    rowProps = {\n      'aria-level': 1,\n      'aria-posinset': topLevelRowCount + 1,\n      'aria-setsize': topLevelRowCount + 1\n    };\n  } else {\n    rowProps = {\n      'aria-rowindex': state.collection.headerRows.length + state.collection.size + 1\n    };\n  }\n\n  return (\n    <div\n      role=\"row\"\n      {...rowProps}\n      className={classNames(stylesOverrides, 'react-spectrum-Table-centeredWrapper')}>\n      <div role=\"rowheader\" aria-colspan={state.collection.columns.length}>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nconst _TableViewBase = React.forwardRef(TableViewBase) as <T>(props: TableBaseProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\n\nexport {_TableViewBase as TableViewBase};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}