{"ast":null,"code":"import { getRowId as $ce9b18daab526bbd$export$f45c25170b9a99c2, listMap as $ce9b18daab526bbd$export$5b9bb410392e3991 } from \"./utils.mjs\";\nimport { useSlotId as $lxFUG$useSlotId, chain as $lxFUG$chain, scrollIntoViewport as $lxFUG$scrollIntoViewport, getScrollParent as $lxFUG$getScrollParent, useSyntheticLinkProps as $lxFUG$useSyntheticLinkProps, mergeProps as $lxFUG$mergeProps } from \"@react-aria/utils\";\nimport { focusSafely as $lxFUG$focusSafely, getFocusableTreeWalker as $lxFUG$getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { getLastItem as $lxFUG$getLastItem } from \"@react-stately/collections\";\nimport { useRef as $lxFUG$useRef } from \"react\";\nimport { isFocusVisible as $lxFUG$isFocusVisible } from \"@react-aria/interactions\";\nimport { useSelectableItem as $lxFUG$useSelectableItem } from \"@react-aria/selection\";\nimport { useLocale as $lxFUG$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $4e8b0456ef72939f$var$EXPANSION_KEYS = {\n  'expand': {\n    ltr: 'ArrowRight',\n    rtl: 'ArrowLeft'\n  },\n  'collapse': {\n    ltr: 'ArrowLeft',\n    rtl: 'ArrowRight'\n  }\n};\nfunction $4e8b0456ef72939f$export$9610e69494fadfd2(props, state, ref) {\n  var _node_props, _node_props1;\n  // Copied from useGridCell + some modifications to make it not so grid specific\n  let {\n    node: node,\n    isVirtualized: isVirtualized,\n    shouldSelectOnPressUp: shouldSelectOnPressUp\n  } = props;\n  // let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/gridlist');\n  let {\n    direction: direction\n  } = (0, $lxFUG$useLocale)();\n  let {\n    onAction: onAction,\n    linkBehavior: linkBehavior,\n    keyboardNavigationBehavior: keyboardNavigationBehavior\n  } = (0, $ce9b18daab526bbd$export$5b9bb410392e3991).get(state);\n  let descriptionId = (0, $lxFUG$useSlotId)();\n  // We need to track the key of the item at the time it was last focused so that we force\n  // focus to go to the item when the DOM node is reused for a different item in a virtualizer.\n  let keyWhenFocused = (0, $lxFUG$useRef)(null);\n  let focus = () => {\n    var _ref_current;\n    // Don't shift focus to the row if the active element is a element within the row already\n    // (e.g. clicking on a row button)\n    if (keyWhenFocused.current != null && node.key !== keyWhenFocused.current || !((_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.contains(document.activeElement))) (0, $lxFUG$focusSafely)(ref.current);\n  };\n  let treeGridRowProps = {};\n  let hasChildRows;\n  let hasLink = state.selectionManager.isLink(node.key);\n  if (node != null && 'expandedKeys' in state) {\n    // TODO: ideally node.hasChildNodes would be a way to tell if a row has child nodes, but the row's contents make it so that value is always\n    // true...\n    hasChildRows = [...state.collection.getChildren(node.key)].length > 1;\n    if (onAction == null && !hasLink && state.selectionManager.selectionMode === 'none' && hasChildRows) onAction = () => state.toggleKey(node.key);\n    let isExpanded = hasChildRows ? state.expandedKeys.has(node.key) : undefined;\n    treeGridRowProps = {\n      'aria-expanded': isExpanded,\n      'aria-level': node.level + 1,\n      'aria-posinset': (node === null || node === void 0 ? void 0 : node.index) + 1,\n      'aria-setsize': node.level > 0 ? (0, $lxFUG$getLastItem)(state.collection.getChildren(node === null || node === void 0 ? void 0 : node.parentKey)).index + 1 : [...state.collection].filter(row => row.level === 0).at(-1).index + 1\n    };\n  }\n  let {\n    itemProps: itemProps,\n    ...itemStates\n  } = (0, $lxFUG$useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref: ref,\n    isVirtualized: isVirtualized,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onAction || ((_node_props = node.props) === null || _node_props === void 0 ? void 0 : _node_props.onAction) ? (0, $lxFUG$chain)((_node_props1 = node.props) === null || _node_props1 === void 0 ? void 0 : _node_props1.onAction, onAction ? () => onAction(node.key) : undefined) : undefined,\n    focus: focus,\n    linkBehavior: linkBehavior\n  });\n  let onKeyDown = e => {\n    if (!e.currentTarget.contains(e.target)) return;\n    let walker = (0, $lxFUG$getFocusableTreeWalker)(ref.current);\n    walker.currentNode = document.activeElement;\n    if ('expandedKeys' in state && document.activeElement === ref.current) {\n      if (e.key === $4e8b0456ef72939f$var$EXPANSION_KEYS['expand'][direction] && state.selectionManager.focusedKey === node.key && hasChildRows && !state.expandedKeys.has(node.key)) {\n        state.toggleKey(node.key);\n        e.stopPropagation();\n        return;\n      } else if (e.key === $4e8b0456ef72939f$var$EXPANSION_KEYS['collapse'][direction] && state.selectionManager.focusedKey === node.key && hasChildRows && state.expandedKeys.has(node.key)) {\n        state.toggleKey(node.key);\n        e.stopPropagation();\n        return;\n      }\n    }\n    switch (e.key) {\n      case 'ArrowLeft':\n        if (keyboardNavigationBehavior === 'arrow') {\n          // Find the next focusable element within the row.\n          let focusable = direction === 'rtl' ? walker.nextNode() : walker.previousNode();\n          if (focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            (0, $lxFUG$focusSafely)(focusable);\n            (0, $lxFUG$scrollIntoViewport)(focusable, {\n              containingElement: (0, $lxFUG$getScrollParent)(ref.current)\n            });\n          } else {\n            // If there is no next focusable child, then return focus back to the row\n            e.preventDefault();\n            e.stopPropagation();\n            if (direction === 'rtl') {\n              (0, $lxFUG$focusSafely)(ref.current);\n              (0, $lxFUG$scrollIntoViewport)(ref.current, {\n                containingElement: (0, $lxFUG$getScrollParent)(ref.current)\n              });\n            } else {\n              walker.currentNode = ref.current;\n              let lastElement = $4e8b0456ef72939f$var$last(walker);\n              if (lastElement) {\n                (0, $lxFUG$focusSafely)(lastElement);\n                (0, $lxFUG$scrollIntoViewport)(lastElement, {\n                  containingElement: (0, $lxFUG$getScrollParent)(ref.current)\n                });\n              }\n            }\n          }\n        }\n        break;\n      case 'ArrowRight':\n        if (keyboardNavigationBehavior === 'arrow') {\n          let focusable = direction === 'rtl' ? walker.previousNode() : walker.nextNode();\n          if (focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            (0, $lxFUG$focusSafely)(focusable);\n            (0, $lxFUG$scrollIntoViewport)(focusable, {\n              containingElement: (0, $lxFUG$getScrollParent)(ref.current)\n            });\n          } else {\n            e.preventDefault();\n            e.stopPropagation();\n            if (direction === 'ltr') {\n              (0, $lxFUG$focusSafely)(ref.current);\n              (0, $lxFUG$scrollIntoViewport)(ref.current, {\n                containingElement: (0, $lxFUG$getScrollParent)(ref.current)\n              });\n            } else {\n              walker.currentNode = ref.current;\n              let lastElement = $4e8b0456ef72939f$var$last(walker);\n              if (lastElement) {\n                (0, $lxFUG$focusSafely)(lastElement);\n                (0, $lxFUG$scrollIntoViewport)(lastElement, {\n                  containingElement: (0, $lxFUG$getScrollParent)(ref.current)\n                });\n              }\n            }\n          }\n        }\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        // Prevent this event from reaching row children, e.g. menu buttons. We want arrow keys to navigate\n        // to the row above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));\n        }\n        break;\n      case 'Tab':\n        if (keyboardNavigationBehavior === 'tab') {\n          // If there is another focusable element within this item, stop propagation so the tab key\n          // is handled by the browser and not by useSelectableCollection (which would take us out of the list).\n          let walker = (0, $lxFUG$getFocusableTreeWalker)(ref.current, {\n            tabbable: true\n          });\n          walker.currentNode = document.activeElement;\n          let next = e.shiftKey ? walker.previousNode() : walker.nextNode();\n          if (next) e.stopPropagation();\n        }\n    }\n  };\n  let onFocus = e => {\n    keyWhenFocused.current = node.key;\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the row itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row\n      // in that case since the list should act like a single tab stop.\n      if (!(0, $lxFUG$isFocusVisible)()) state.selectionManager.setFocusedKey(node.key);\n      return;\n    }\n  };\n  let syntheticLinkProps = (0, $lxFUG$useSyntheticLinkProps)(node.props);\n  let linkProps = itemStates.hasAction ? syntheticLinkProps : {};\n  // TODO: re-add when we get translations and fix this for iOS VO\n  // let rowAnnouncement;\n  // if (onAction) {\n  //   rowAnnouncement = stringFormatter.format('hasActionAnnouncement');\n  // } else if (hasLink) {\n  //   rowAnnouncement = stringFormatter.format('hasLinkAnnouncement', {\n  //     link: node.props.href\n  //   });\n  // }\n  let rowProps = (0, $lxFUG$mergeProps)(itemProps, linkProps, {\n    role: 'row',\n    onKeyDownCapture: onKeyDown,\n    onFocus: onFocus,\n    // 'aria-label': [(node.textValue || undefined), rowAnnouncement].filter(Boolean).join(', '),\n    'aria-label': node.textValue || undefined,\n    'aria-selected': state.selectionManager.canSelectItem(node.key) ? state.selectionManager.isSelected(node.key) : undefined,\n    'aria-disabled': state.selectionManager.isDisabled(node.key) || undefined,\n    'aria-labelledby': descriptionId && node.textValue ? `${(0, $ce9b18daab526bbd$export$f45c25170b9a99c2)(state, node.key)} ${descriptionId}` : undefined,\n    id: (0, $ce9b18daab526bbd$export$f45c25170b9a99c2)(state, node.key)\n  });\n  if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1;\n  let gridCellProps = {\n    role: 'gridcell',\n    'aria-colindex': 1\n  };\n  // TODO: should isExpanded and hasChildRows be a item state that gets returned by the hook?\n  return {\n    rowProps: {\n      ...(0, $lxFUG$mergeProps)(rowProps, treeGridRowProps)\n    },\n    gridCellProps: gridCellProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    ...itemStates\n  };\n}\nfunction $4e8b0456ef72939f$var$last(walker) {\n  let next;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nexport { $4e8b0456ef72939f$export$9610e69494fadfd2 as useGridListItem };","map":{"version":3,"names":["$4e8b0456ef72939f$var$EXPANSION_KEYS","ltr","rtl","$4e8b0456ef72939f$export$9610e69494fadfd2","props","state","ref","_node_props","_node_props1","node","isVirtualized","shouldSelectOnPressUp","direction","$lxFUG$useLocale","onAction","linkBehavior","keyboardNavigationBehavior","$ce9b18daab526bbd$export$5b9bb410392e3991","get","descriptionId","$lxFUG$useSlotId","keyWhenFocused","$lxFUG$useRef","focus","_ref_current","current","key","contains","document","activeElement","$lxFUG$focusSafely","treeGridRowProps","hasChildRows","hasLink","selectionManager","isLink","collection","getChildren","length","selectionMode","toggleKey","isExpanded","expandedKeys","has","undefined","level","index","$lxFUG$getLastItem","parentKey","filter","row","at","itemProps","itemStates","$lxFUG$useSelectableItem","$lxFUG$chain","onKeyDown","e","currentTarget","target","walker","$lxFUG$getFocusableTreeWalker","currentNode","focusedKey","stopPropagation","focusable","nextNode","previousNode","preventDefault","$lxFUG$scrollIntoViewport","containingElement","$lxFUG$getScrollParent","lastElement","$4e8b0456ef72939f$var$last","altKey","parentElement","dispatchEvent","KeyboardEvent","nativeEvent","type","tabbable","next","shiftKey","onFocus","$lxFUG$isFocusVisible","setFocusedKey","syntheticLinkProps","$lxFUG$useSyntheticLinkProps","linkProps","hasAction","rowProps","$lxFUG$mergeProps","role","onKeyDownCapture","textValue","canSelectItem","isSelected","isDisabled","$ce9b18daab526bbd$export$f45c25170b9a99c2","id","gridCellProps","descriptionProps","last","lastChild"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-aria/gridlist/dist/packages/@react-aria/gridlist/src/useGridListItem.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, getScrollParent, mergeProps, scrollIntoViewport, useSlotId, useSyntheticLinkProps} from '@react-aria/utils';\nimport {DOMAttributes, FocusableElement, RefObject, Node as RSNode} from '@react-types/shared';\nimport {focusSafely, getFocusableTreeWalker} from '@react-aria/focus';\nimport {getLastItem} from '@react-stately/collections';\nimport {getRowId, listMap} from './utils';\nimport {HTMLAttributes, KeyboardEvent as ReactKeyboardEvent, useRef} from 'react';\nimport {isFocusVisible} from '@react-aria/interactions';\nimport type {ListState} from '@react-stately/list';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\nimport type {TreeState} from '@react-stately/tree';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface AriaGridListItemOptions {\n  /** An object representing the list item. Contains all the relevant information that makes up the list row. */\n  node: RSNode<unknown>,\n  /** Whether the list row is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean\n}\n\nexport interface GridListItemAria extends SelectableItemStates {\n  /** Props for the list row element. */\n  rowProps: DOMAttributes,\n  /** Props for the grid cell element within the list row. */\n  gridCellProps: DOMAttributes,\n  /** Props for the list item description element, if any. */\n  descriptionProps: DOMAttributes\n}\n\nconst EXPANSION_KEYS = {\n  'expand': {\n    ltr: 'ArrowRight',\n    rtl: 'ArrowLeft'\n  },\n  'collapse': {\n    ltr: 'ArrowLeft',\n    rtl: 'ArrowRight'\n  }\n};\n\n/**\n * Provides the behavior and accessibility implementation for a row in a grid list.\n * @param props - Props for the row.\n * @param state - State of the parent list, as returned by `useListState`.\n * @param ref - The ref attached to the row element.\n */\nexport function useGridListItem<T>(props: AriaGridListItemOptions, state: ListState<T> | TreeState<T>, ref: RefObject<FocusableElement | null>): GridListItemAria {\n  // Copied from useGridCell + some modifications to make it not so grid specific\n  let {\n    node,\n    isVirtualized,\n    shouldSelectOnPressUp\n  } = props;\n\n  // let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/gridlist');\n  let {direction} = useLocale();\n  let {onAction, linkBehavior, keyboardNavigationBehavior} = listMap.get(state);\n  let descriptionId = useSlotId();\n\n  // We need to track the key of the item at the time it was last focused so that we force\n  // focus to go to the item when the DOM node is reused for a different item in a virtualizer.\n  let keyWhenFocused = useRef(null);\n  let focus = () => {\n    // Don't shift focus to the row if the active element is a element within the row already\n    // (e.g. clicking on a row button)\n    if (\n      (keyWhenFocused.current != null && node.key !== keyWhenFocused.current) ||\n      !ref.current?.contains(document.activeElement)\n    ) {\n      focusSafely(ref.current);\n    }\n  };\n\n  let treeGridRowProps: HTMLAttributes<HTMLElement> = {};\n  let hasChildRows;\n  let hasLink = state.selectionManager.isLink(node.key);\n  if (node != null && 'expandedKeys' in state) {\n    // TODO: ideally node.hasChildNodes would be a way to tell if a row has child nodes, but the row's contents make it so that value is always\n    // true...\n    hasChildRows = [...state.collection.getChildren(node.key)].length > 1;\n    if (onAction == null && !hasLink && state.selectionManager.selectionMode === 'none' && hasChildRows) {\n      onAction = () => state.toggleKey(node.key);\n    }\n\n    let isExpanded = hasChildRows ? state.expandedKeys.has(node.key) : undefined;\n    treeGridRowProps = {\n      'aria-expanded': isExpanded,\n      'aria-level': node.level + 1,\n      'aria-posinset': node?.index + 1,\n      'aria-setsize': node.level > 0 ?\n        (getLastItem(state.collection.getChildren(node?.parentKey))).index + 1 :\n        [...state.collection].filter(row => row.level === 0).at(-1).index + 1\n    };\n  }\n\n  let {itemProps, ...itemStates} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction: onAction || node.props?.onAction ? chain(node.props?.onAction, onAction ? () => onAction(node.key) : undefined) : undefined,\n    focus,\n    linkBehavior\n  });\n\n  let onKeyDown = (e: ReactKeyboardEvent) => {\n    if (!e.currentTarget.contains(e.target as Element)) {\n      return;\n    }\n\n    let walker = getFocusableTreeWalker(ref.current);\n    walker.currentNode = document.activeElement;\n\n    if ('expandedKeys' in state && document.activeElement === ref.current) {\n      if ((e.key === EXPANSION_KEYS['expand'][direction]) && state.selectionManager.focusedKey === node.key && hasChildRows && !state.expandedKeys.has(node.key)) {\n        state.toggleKey(node.key);\n        e.stopPropagation();\n        return;\n      } else if ((e.key === EXPANSION_KEYS['collapse'][direction]) && state.selectionManager.focusedKey === node.key && hasChildRows && state.expandedKeys.has(node.key)) {\n        state.toggleKey(node.key);\n        e.stopPropagation();\n        return;\n      }\n    }\n\n    switch (e.key) {\n      case 'ArrowLeft': {\n        if (keyboardNavigationBehavior === 'arrow') {\n          // Find the next focusable element within the row.\n          let focusable = direction === 'rtl'\n            ? walker.nextNode() as FocusableElement\n            : walker.previousNode() as FocusableElement;\n\n          if (focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            focusSafely(focusable);\n            scrollIntoViewport(focusable, {containingElement: getScrollParent(ref.current)});\n          } else {\n            // If there is no next focusable child, then return focus back to the row\n            e.preventDefault();\n            e.stopPropagation();\n            if (direction === 'rtl') {\n              focusSafely(ref.current);\n              scrollIntoViewport(ref.current, {containingElement: getScrollParent(ref.current)});\n            } else {\n              walker.currentNode = ref.current;\n              let lastElement = last(walker);\n              if (lastElement) {\n                focusSafely(lastElement);\n                scrollIntoViewport(lastElement, {containingElement: getScrollParent(ref.current)});\n              }\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowRight': {\n        if (keyboardNavigationBehavior === 'arrow') {\n          let focusable = direction === 'rtl'\n            ? walker.previousNode() as FocusableElement\n            : walker.nextNode() as FocusableElement;\n\n          if (focusable) {\n            e.preventDefault();\n            e.stopPropagation();\n            focusSafely(focusable);\n            scrollIntoViewport(focusable, {containingElement: getScrollParent(ref.current)});\n          } else {\n            e.preventDefault();\n            e.stopPropagation();\n            if (direction === 'ltr') {\n              focusSafely(ref.current);\n              scrollIntoViewport(ref.current, {containingElement: getScrollParent(ref.current)});\n            } else {\n              walker.currentNode = ref.current;\n              let lastElement = last(walker);\n              if (lastElement) {\n                focusSafely(lastElement);\n                scrollIntoViewport(lastElement, {containingElement: getScrollParent(ref.current)});\n              }\n            }\n          }\n        }\n        break;\n      }\n      case 'ArrowUp':\n      case 'ArrowDown':\n        // Prevent this event from reaching row children, e.g. menu buttons. We want arrow keys to navigate\n        // to the row above/below instead. We need to re-dispatch the event from a higher parent so it still\n        // bubbles and gets handled by useSelectableCollection.\n        if (!e.altKey && ref.current.contains(e.target as Element)) {\n          e.stopPropagation();\n          e.preventDefault();\n          ref.current.parentElement.dispatchEvent(\n            new KeyboardEvent(e.nativeEvent.type, e.nativeEvent)\n          );\n        }\n        break;\n      case 'Tab': {\n        if (keyboardNavigationBehavior === 'tab') {\n          // If there is another focusable element within this item, stop propagation so the tab key\n          // is handled by the browser and not by useSelectableCollection (which would take us out of the list).\n          let walker = getFocusableTreeWalker(ref.current, {tabbable: true});\n          walker.currentNode = document.activeElement;\n          let next = e.shiftKey ? walker.previousNode() : walker.nextNode();\n          if (next) {\n            e.stopPropagation();\n          }\n        }\n      }\n    }\n  };\n\n  let onFocus = (e) => {\n    keyWhenFocused.current = node.key;\n    if (e.target !== ref.current) {\n      // useSelectableItem only handles setting the focused key when\n      // the focused element is the row itself. We also want to\n      // set the focused key when a child element receives focus.\n      // If focus is currently visible (e.g. the user is navigating with the keyboard),\n      // then skip this. We want to restore focus to the previously focused row\n      // in that case since the list should act like a single tab stop.\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocusedKey(node.key);\n      }\n      return;\n    }\n  };\n\n  let syntheticLinkProps = useSyntheticLinkProps(node.props);\n  let linkProps = itemStates.hasAction ? syntheticLinkProps : {};\n  // TODO: re-add when we get translations and fix this for iOS VO\n  // let rowAnnouncement;\n  // if (onAction) {\n  //   rowAnnouncement = stringFormatter.format('hasActionAnnouncement');\n  // } else if (hasLink) {\n  //   rowAnnouncement = stringFormatter.format('hasLinkAnnouncement', {\n  //     link: node.props.href\n  //   });\n  // }\n\n  let rowProps: DOMAttributes = mergeProps(itemProps, linkProps, {\n    role: 'row',\n    onKeyDownCapture: onKeyDown,\n    onFocus,\n    // 'aria-label': [(node.textValue || undefined), rowAnnouncement].filter(Boolean).join(', '),\n    'aria-label': node.textValue || undefined,\n    'aria-selected': state.selectionManager.canSelectItem(node.key) ? state.selectionManager.isSelected(node.key) : undefined,\n    'aria-disabled': state.selectionManager.isDisabled(node.key) || undefined,\n    'aria-labelledby': descriptionId && node.textValue ? `${getRowId(state, node.key)} ${descriptionId}` : undefined,\n    id: getRowId(state, node.key)\n  });\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = node.index + 1;\n  }\n\n  let gridCellProps = {\n    role: 'gridcell',\n    'aria-colindex': 1\n  };\n\n  // TODO: should isExpanded and hasChildRows be a item state that gets returned by the hook?\n  return {\n    rowProps: {...mergeProps(rowProps, treeGridRowProps)},\n    gridCellProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    ...itemStates\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}