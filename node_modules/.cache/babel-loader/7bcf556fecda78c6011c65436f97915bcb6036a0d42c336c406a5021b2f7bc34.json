{"ast":null,"code":"import { OpenTransition as $bc765a7a041310da$export$b847a40ee92eff38 } from \"./OpenTransition.mjs\";\nimport { Provider as $eIXW5$Provider } from \"@react-spectrum/provider\";\nimport $eIXW5$react, { useState as $eIXW5$useState, useCallback as $eIXW5$useCallback } from \"react\";\nimport { Overlay as $eIXW5$Overlay } from \"@react-aria/overlays\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $70305dc5fb729c3b$var$Overlay(props, ref) {\n  let {\n    children: children,\n    isOpen: isOpen,\n    disableFocusManagement: disableFocusManagement,\n    container: container,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    nodeRef: nodeRef\n  } = props;\n  let [exited, setExited] = (0, $eIXW5$useState)(!isOpen);\n  let handleEntered = (0, $eIXW5$useCallback)(() => {\n    setExited(false);\n    if (onEntered) onEntered();\n  }, [onEntered]);\n  let handleExited = (0, $eIXW5$useCallback)(() => {\n    setExited(true);\n    if (onExited) onExited();\n  }, [onExited]);\n  // Don't un-render the overlay while it's transitioning out.\n  let mountOverlay = isOpen || !exited;\n  if (!mountOverlay)\n    // Don't bother showing anything if we don't have to.\n    return null;\n  return /*#__PURE__*/(0, $eIXW5$react).createElement((0, $eIXW5$Overlay), {\n    portalContainer: container,\n    disableFocusManagement: disableFocusManagement,\n    isExiting: !isOpen\n  }, /*#__PURE__*/(0, $eIXW5$react).createElement((0, $eIXW5$Provider), {\n    ref: ref,\n    UNSAFE_style: {\n      background: 'transparent',\n      isolation: 'isolate'\n    },\n    isDisabled: false\n  }, /*#__PURE__*/(0, $eIXW5$react).createElement((0, $bc765a7a041310da$export$b847a40ee92eff38), {\n    in: isOpen,\n    appear: true,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: handleExited,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: handleEntered,\n    nodeRef: nodeRef\n  }, children)));\n}\nlet $70305dc5fb729c3b$export$c6fdb837b070b4ff = /*#__PURE__*/(0, $eIXW5$react).forwardRef($70305dc5fb729c3b$var$Overlay);\nexport { $70305dc5fb729c3b$export$c6fdb837b070b4ff as Overlay };","map":{"version":3,"names":["$70305dc5fb729c3b$var$Overlay","props","ref","children","isOpen","disableFocusManagement","container","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef","exited","setExited","$eIXW5$useState","handleEntered","$eIXW5$useCallback","handleExited","mountOverlay","$eIXW5$react","createElement","$eIXW5$Overlay","portalContainer","isExiting","$eIXW5$Provider","UNSAFE_style","background","isolation","isDisabled","$bc765a7a041310da$export$b847a40ee92eff38","in","appear","$70305dc5fb729c3b$export$c6fdb837b070b4ff","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/overlays/dist/packages/@react-spectrum/overlays/src/Overlay.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMRef} from '@react-types/shared';\nimport {OpenTransition} from './OpenTransition';\nimport {OverlayProps} from '@react-types/overlays';\nimport {Provider} from '@react-spectrum/provider';\nimport React, {useCallback, useState} from 'react';\nimport {Overlay as ReactAriaOverlay} from '@react-aria/overlays';\n\nfunction Overlay(props: OverlayProps, ref: DOMRef<HTMLDivElement>) {\n  let {\n    children,\n    isOpen,\n    disableFocusManagement,\n    container,\n    onEnter,\n    onEntering,\n    onEntered,\n    onExit,\n    onExiting,\n    onExited,\n    nodeRef\n  } = props;\n\n  let [exited, setExited] = useState(!isOpen);\n\n  let handleEntered = useCallback(() => {\n    setExited(false);\n    if (onEntered) {\n      onEntered();\n    }\n  }, [onEntered]);\n\n  let handleExited = useCallback(() => {\n    setExited(true);\n    if (onExited) {\n      onExited();\n    }\n  }, [onExited]);\n\n  // Don't un-render the overlay while it's transitioning out.\n  let mountOverlay = isOpen || !exited;\n  if (!mountOverlay) {\n    // Don't bother showing anything if we don't have to.\n    return null;\n  }\n\n  return (\n    <ReactAriaOverlay portalContainer={container} disableFocusManagement={disableFocusManagement} isExiting={!isOpen}>\n      <Provider ref={ref} UNSAFE_style={{background: 'transparent', isolation: 'isolate'}} isDisabled={false}>\n        <OpenTransition\n          in={isOpen}\n          appear\n          onExit={onExit}\n          onExiting={onExiting}\n          onExited={handleExited}\n          onEnter={onEnter}\n          onEntering={onEntering}\n          onEntered={handleEntered}\n          nodeRef={nodeRef}>\n          {children}\n        </OpenTransition>\n      </Provider>\n    </ReactAriaOverlay>\n  );\n}\n\nlet _Overlay = React.forwardRef(Overlay);\nexport {_Overlay as Overlay};\n"],"mappings":";;;;;AAAA;;;;;;;;;;;;AAmBA,SAASA,8BAAQC,KAAmB,EAAEC,GAA2B;EAC/D,IAAI;IAAAC,QAAA,EACFA,QAAQ;IAAAC,MAAA,EACRA,MAAM;IAAAC,sBAAA,EACNA,sBAAsB;IAAAC,SAAA,EACtBA,SAAS;IAAAC,OAAA,EACTA,OAAO;IAAAC,UAAA,EACPA,UAAU;IAAAC,SAAA,EACVA,SAAS;IAAAC,MAAA,EACTA,MAAM;IAAAC,SAAA,EACNA,SAAS;IAAAC,QAAA,EACTA,QAAQ;IAAAC,OAAA,EACRA;EAAO,CACR,GAAGZ,KAAA;EAEJ,IAAI,CAACa,MAAA,EAAQC,SAAA,CAAU,GAAG,IAAAC,eAAO,EAAE,CAACZ,MAAA;EAEpC,IAAIa,aAAA,GAAgB,IAAAC,kBAAU,EAAE;IAC9BH,SAAA,CAAU;IACV,IAAIN,SAAA,EACFA,SAAA;EAEJ,GAAG,CAACA,SAAA,CAAU;EAEd,IAAIU,YAAA,GAAe,IAAAD,kBAAU,EAAE;IAC7BH,SAAA,CAAU;IACV,IAAIH,QAAA,EACFA,QAAA;EAEJ,GAAG,CAACA,QAAA,CAAS;EAEb;EACA,IAAIQ,YAAA,GAAehB,MAAA,IAAU,CAACU,MAAA;EAC9B,IAAI,CAACM,YAAA;IACH;IACA,OAAO;EAGT,oBACE,IAAAC,YAAA,EAAAC,aAAA,EAAC,GAAAC,cAAe;IAAEC,eAAA,EAAiBlB,SAAA;IAAWD,sBAAA,EAAwBA,sBAAA;IAAwBoB,SAAA,EAAW,CAACrB;kBACxG,IAAAiB,YAAA,EAAAC,aAAA,EAAC,GAAAI,eAAO;IAAExB,GAAA,EAAKA,GAAA;IAAKyB,YAAA,EAAc;MAACC,UAAA,EAAY;MAAeC,SAAA,EAAW;IAAS;IAAGC,UAAA,EAAY;kBAC/F,IAAAT,YAAA,EAAAC,aAAA,EAAC,GAAAS,yCAAa;IACZC,EAAA,EAAI5B,MAAA;IACJ6B,MAAA;IACAvB,MAAA,EAAQA,MAAA;IACRC,SAAA,EAAWA,SAAA;IACXC,QAAA,EAAUO,YAAA;IACVZ,OAAA,EAASA,OAAA;IACTC,UAAA,EAAYA,UAAA;IACZC,SAAA,EAAWQ,aAAA;IACXJ,OAAA,EAASA;KACRV,QAAA;AAKX;AAEA,IAAI+B,yCAAA,gBAAW,IAAAb,YAAI,EAAEc,UAAU,CAACnC,6BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}