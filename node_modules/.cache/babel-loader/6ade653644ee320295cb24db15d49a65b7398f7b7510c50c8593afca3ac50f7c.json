{"ast":null,"code":"import { useContextProps as $64fa3d84918910a7$export$29f1550f4b0d4415, useRenderProps as $64fa3d84918910a7$export$4d86445c2cf5e3, useSlot as $64fa3d84918910a7$export$9d4c57ee4c6ffdd8 } from \"./utils.mjs\";\nimport { LabelContext as $01b77f81d0f07f68$export$75b6ee27786ba447 } from \"./Label.mjs\";\nimport { useProgressBar as $hU2kz$useProgressBar } from \"react-aria\";\nimport { clamp as $hU2kz$clamp } from \"@react-stately/utils\";\nimport $hU2kz$react, { createContext as $hU2kz$createContext, forwardRef as $hU2kz$forwardRef } from \"react\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $0393f8ab869a0f1a$export$e9f3bf65a26ce129 = /*#__PURE__*/(0, $hU2kz$createContext)(null);\nfunction $0393f8ab869a0f1a$var$ProgressBar(props, ref) {\n  [props, ref] = (0, $64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $0393f8ab869a0f1a$export$e9f3bf65a26ce129);\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    isIndeterminate = false\n  } = props;\n  value = (0, $hU2kz$clamp)(value, minValue, maxValue);\n  let [labelRef, label] = (0, $64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();\n  let {\n    progressBarProps: progressBarProps,\n    labelProps: labelProps\n  } = (0, $hU2kz$useProgressBar)({\n    ...props,\n    label: label\n  });\n  // Calculate the width of the progress bar as a percentage\n  let percentage = isIndeterminate ? undefined : (value - minValue) / (maxValue - minValue) * 100;\n  let renderProps = (0, $64fa3d84918910a7$export$4d86445c2cf5e3)({\n    ...props,\n    defaultClassName: 'react-aria-ProgressBar',\n    values: {\n      percentage: percentage,\n      valueText: progressBarProps['aria-valuetext'],\n      isIndeterminate: isIndeterminate\n    }\n  });\n  return /*#__PURE__*/(0, $hU2kz$react).createElement(\"div\", {\n    ...progressBarProps,\n    ...renderProps,\n    ref: ref,\n    slot: props.slot || undefined\n  }, /*#__PURE__*/(0, $hU2kz$react).createElement((0, $01b77f81d0f07f68$export$75b6ee27786ba447).Provider, {\n    value: {\n      ...labelProps,\n      ref: labelRef,\n      elementType: 'span'\n    }\n  }, renderProps.children));\n}\n/**\n * Progress bars show either determinate or indeterminate progress of an operation\n * over time.\n */\nconst $0393f8ab869a0f1a$export$c17561cb55d4db30 = /*#__PURE__*/(0, $hU2kz$forwardRef)($0393f8ab869a0f1a$var$ProgressBar);\nexport { $0393f8ab869a0f1a$export$e9f3bf65a26ce129 as ProgressBarContext, $0393f8ab869a0f1a$export$c17561cb55d4db30 as ProgressBar };","map":{"version":3,"names":["$0393f8ab869a0f1a$export$e9f3bf65a26ce129","$hU2kz$createContext","$0393f8ab869a0f1a$var$ProgressBar","props","ref","$64fa3d84918910a7$export$29f1550f4b0d4415","value","minValue","maxValue","isIndeterminate","$hU2kz$clamp","labelRef","label","$64fa3d84918910a7$export$9d4c57ee4c6ffdd8","progressBarProps","labelProps","$hU2kz$useProgressBar","percentage","undefined","renderProps","$64fa3d84918910a7$export$4d86445c2cf5e3","defaultClassName","values","valueText","$hU2kz$react","createElement","slot","$01b77f81d0f07f68$export$75b6ee27786ba447","Provider","elementType","children","$0393f8ab869a0f1a$export$c17561cb55d4db30","$hU2kz$forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/react-aria-components/dist/packages/react-aria-components/src/ProgressBar.tsx"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaProgressBarProps, useProgressBar} from 'react-aria';\nimport {clamp} from '@react-stately/utils';\nimport {ContextValue, RenderProps, SlotProps, useContextProps, useRenderProps, useSlot} from './utils';\nimport {LabelContext} from './Label';\nimport React, {createContext, ForwardedRef, forwardRef} from 'react';\n\nexport interface ProgressBarProps extends Omit<AriaProgressBarProps, 'label'>, RenderProps<ProgressBarRenderProps>, SlotProps {}\n\nexport interface ProgressBarRenderProps {\n  /**\n   * The value as a percentage between the minimum and maximum.\n   */\n  percentage?: number,\n  /**\n   * A formatted version of the value.\n   * @selector [aria-valuetext]\n   */\n  valueText: string | undefined,\n  /**\n   * Whether the progress bar is indeterminate.\n   * @selector :not([aria-valuenow])\n   */\n  isIndeterminate: boolean\n}\n\nexport const ProgressBarContext = createContext<ContextValue<ProgressBarProps, HTMLDivElement>>(null);\n\nfunction ProgressBar(props: ProgressBarProps, ref: ForwardedRef<HTMLDivElement>) {\n  [props, ref] = useContextProps(props, ref, ProgressBarContext);\n  let {\n    value = 0,\n    minValue = 0,\n    maxValue = 100,\n    isIndeterminate = false\n  } = props;\n  value = clamp(value, minValue, maxValue);\n\n  let [labelRef, label] = useSlot();\n  let {\n    progressBarProps,\n    labelProps\n  } = useProgressBar({...props, label});\n\n  // Calculate the width of the progress bar as a percentage\n  let percentage = isIndeterminate ? undefined : (value - minValue) / (maxValue - minValue) * 100;\n\n  let renderProps = useRenderProps({\n    ...props,\n    defaultClassName: 'react-aria-ProgressBar',\n    values: {\n      percentage,\n      valueText: progressBarProps['aria-valuetext'],\n      isIndeterminate\n    }\n  });\n\n  return (\n    <div {...progressBarProps} {...renderProps} ref={ref} slot={props.slot || undefined}>\n      <LabelContext.Provider value={{...labelProps, ref: labelRef, elementType: 'span'}}>\n        {renderProps.children}\n      </LabelContext.Provider>\n    </div>\n  );\n}\n\n/**\n * Progress bars show either determinate or indeterminate progress of an operation\n * over time.\n */\nconst _ProgressBar = forwardRef(ProgressBar);\nexport {_ProgressBar as ProgressBar};\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AAqCO,MAAMA,yCAAA,gBAAqB,IAAAC,oBAAY,EAAkD;AAEhG,SAASC,kCAAYC,KAAuB,EAAEC,GAAiC;EAC7E,CAACD,KAAA,EAAOC,GAAA,CAAI,GAAG,IAAAC,yCAAc,EAAEF,KAAA,EAAOC,GAAA,EAAKJ,yCAAA;EAC3C,IAAI;IACFM,KAAA,GAAQ;IACRC,QAAA,GAAW;IACXC,QAAA,GAAW;IACXC,eAAA,GAAkB;EAAA,CACnB,GAAGN,KAAA;EACJG,KAAA,GAAQ,IAAAI,YAAI,EAAEJ,KAAA,EAAOC,QAAA,EAAUC,QAAA;EAE/B,IAAI,CAACG,QAAA,EAAUC,KAAA,CAAM,GAAG,IAAAC,yCAAM;EAC9B,IAAI;IAAAC,gBAAA,EACFA,gBAAgB;IAAAC,UAAA,EAChBA;EAAU,CACX,GAAG,IAAAC,qBAAa,EAAE;IAAC,GAAGb,KAAK;WAAES;EAAK;EAEnC;EACA,IAAIK,UAAA,GAAaR,eAAA,GAAkBS,SAAA,GAAY,CAACZ,KAAA,GAAQC,QAAO,KAAMC,QAAA,GAAWD,QAAO,IAAK;EAE5F,IAAIY,WAAA,GAAc,IAAAC,uCAAa,EAAE;IAC/B,GAAGjB,KAAK;IACRkB,gBAAA,EAAkB;IAClBC,MAAA,EAAQ;kBACNL,UAAA;MACAM,SAAA,EAAWT,gBAAgB,CAAC,iBAAiB;uBAC7CL;IACF;EACF;EAEA,oBACE,IAAAe,YAAA,EAAAC,aAAA,CAAC;IAAK,GAAGX,gBAAgB;IAAG,GAAGK,WAAW;IAAEf,GAAA,EAAKA,GAAA;IAAKsB,IAAA,EAAMvB,KAAA,CAAMuB,IAAI,IAAIR;kBACxE,IAAAM,YAAA,EAAAC,aAAA,CAAC,IAAAE,yCAAW,EAAEC,QAAQ;IAACtB,KAAA,EAAO;MAAC,GAAGS,UAAU;MAAEX,GAAA,EAAKO,QAAA;MAAUkB,WAAA,EAAa;IAAM;KAC7EV,WAAA,CAAYW,QAAQ;AAI7B;AAEA;;;;AAIA,MAAMC,yCAAA,gBAAe,IAAAC,iBAAS,EAAE9B,iCAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}