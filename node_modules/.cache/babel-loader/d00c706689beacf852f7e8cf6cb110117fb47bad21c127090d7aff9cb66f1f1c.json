{"ast":null,"code":"import $l1zrX$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./vars.6caec7fe.css\";\nimport $l1zrX$button_vars_cssmodulejs from \"./button_vars_css.mjs\";\nimport { useSlotProps as $l1zrX$useSlotProps, useFocusableRef as $l1zrX$useFocusableRef, useStyleProps as $l1zrX$useStyleProps, useHasChild as $l1zrX$useHasChild, classNames as $l1zrX$classNames, SlotProvider as $l1zrX$SlotProvider } from \"@react-spectrum/utils\";\nimport { FocusRing as $l1zrX$FocusRing } from \"@react-aria/focus\";\nimport { useId as $l1zrX$useId, isAppleDevice as $l1zrX$isAppleDevice, isFirefox as $l1zrX$isFirefox, mergeProps as $l1zrX$mergeProps } from \"@react-aria/utils\";\nimport { ProgressCircle as $l1zrX$ProgressCircle } from \"@react-spectrum/progress\";\nimport $l1zrX$react, { useState as $l1zrX$useState, useEffect as $l1zrX$useEffect } from \"react\";\nimport { Text as $l1zrX$Text } from \"@react-spectrum/text\";\nimport { useButton as $l1zrX$useButton } from \"@react-aria/button\";\nimport { useHover as $l1zrX$useHover, useFocus as $l1zrX$useFocus } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $l1zrX$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useProviderProps as $l1zrX$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $b865a6f0049e2d66$var$disablePendingProps(props) {\n  // Don't allow interaction while isPending is true\n  if (props.isPending) {\n    props.onPress = undefined;\n    props.onPressStart = undefined;\n    props.onPressEnd = undefined;\n    props.onPressChange = undefined;\n    props.onPressUp = undefined;\n    props.onKeyDown = undefined;\n    props.onKeyUp = undefined;\n    props.onClick = undefined;\n    props.href = undefined;\n  }\n  return props;\n}\nfunction $b865a6f0049e2d66$var$Button(props, ref) {\n  var _buttonProps_arialabelledby;\n  props = (0, $l1zrX$useProviderProps)(props);\n  props = (0, $l1zrX$useSlotProps)(props, 'button');\n  props = $b865a6f0049e2d66$var$disablePendingProps(props);\n  let {\n    elementType: Element = 'button',\n    children: children,\n    variant: variant,\n    style = variant === 'accent' || variant === 'cta' ? 'fill' : 'outline',\n    staticColor: staticColor,\n    isDisabled: isDisabled,\n    isPending: isPending,\n    autoFocus: autoFocus,\n    ...otherProps\n  } = props;\n  let domRef = (0, $l1zrX$useFocusableRef)(ref);\n  let {\n    buttonProps: buttonProps,\n    isPressed: isPressed\n  } = (0, $l1zrX$useButton)(props, domRef);\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $l1zrX$useHover)({\n    isDisabled: isDisabled\n  });\n  let [isFocused, onFocusChange] = (0, $l1zrX$useState)(false);\n  let {\n    focusProps: focusProps\n  } = (0, $l1zrX$useFocus)({\n    onFocusChange: onFocusChange,\n    isDisabled: isDisabled\n  });\n  let stringFormatter = (0, $l1zrX$useLocalizedStringFormatter)((0, $parcel$interopDefault($l1zrX$intlStringsmodulejs)), '@react-spectrum/button');\n  let {\n    styleProps: styleProps\n  } = (0, $l1zrX$useStyleProps)(otherProps);\n  let hasLabel = (0, $l1zrX$useHasChild)(`.${(0, $parcel$interopDefault($l1zrX$button_vars_cssmodulejs))['spectrum-Button-label']}`, domRef);\n  let hasIcon = (0, $l1zrX$useHasChild)(`.${(0, $parcel$interopDefault($l1zrX$button_vars_cssmodulejs))['spectrum-Icon']}`, domRef);\n  // an aria label will block children and their labels from being read, this is undesirable for pending state\n  let hasAriaLabel = !!buttonProps['aria-label'] || !!buttonProps['aria-labelledby'];\n  let [isProgressVisible, setIsProgressVisible] = (0, $l1zrX$useState)(false);\n  let backupButtonId = (0, $l1zrX$useId)();\n  let buttonId = buttonProps.id || backupButtonId;\n  let iconId = (0, $l1zrX$useId)();\n  let textId = (0, $l1zrX$useId)();\n  let spinnerId = (0, $l1zrX$useId)();\n  (0, $l1zrX$useEffect)(() => {\n    let timeout;\n    if (isPending)\n      // Start timer when isPending is set to true.\n      timeout = setTimeout(() => {\n        setIsProgressVisible(true);\n      }, 1000);else\n      // Exit loading state when isPending is set to false. */\n      setIsProgressVisible(false);\n    return () => {\n      // Clean up on unmount or when user removes isPending prop before entering loading state.\n      clearTimeout(timeout);\n    };\n  }, [isPending]);\n  if (variant === 'cta') variant = 'accent';else if (variant === 'overBackground') {\n    variant = 'primary';\n    staticColor = 'white';\n  }\n  const isPendingAriaLiveLabel = `${hasAriaLabel ? buttonProps['aria-label'] : ''} ${stringFormatter.format('pending')}`.trim();\n  var _buttonProps_arialabelledby_replace;\n  const isPendingAriaLiveLabelledby = hasAriaLabel ? (_buttonProps_arialabelledby_replace = (_buttonProps_arialabelledby = buttonProps['aria-labelledby']) === null || _buttonProps_arialabelledby === void 0 ? void 0 : _buttonProps_arialabelledby.replace(buttonId, spinnerId)) !== null && _buttonProps_arialabelledby_replace !== void 0 ? _buttonProps_arialabelledby_replace : spinnerId : `${hasIcon ? iconId : ''} ${hasLabel ? textId : ''} ${spinnerId}`.trim();\n  let ariaLive = 'polite';\n  if ((0, $l1zrX$isAppleDevice)() && (!hasAriaLabel || (0, $l1zrX$isFirefox)())) ariaLive = 'off';\n  let isPendingProps = isPending ? {\n    onClick: e => {\n      if (e.currentTarget instanceof HTMLButtonElement) e.preventDefault();\n    }\n  } : {\n    // no-op. \n    // Not sure why, but TypeScript wouldn't allow to have an empty object `{}`.\n    onClick: () => {}\n  };\n  return /*#__PURE__*/(0, $l1zrX$react).createElement((0, $l1zrX$FocusRing), {\n    focusRingClass: (0, $l1zrX$classNames)((0, $parcel$interopDefault($l1zrX$button_vars_cssmodulejs)), 'focus-ring'),\n    autoFocus: autoFocus\n  }, /*#__PURE__*/(0, $l1zrX$react).createElement(Element, {\n    ...styleProps,\n    ...(0, $l1zrX$mergeProps)(buttonProps, hoverProps, focusProps, isPendingProps),\n    id: buttonId,\n    ref: domRef,\n    \"data-variant\": variant,\n    \"data-style\": style,\n    \"data-static-color\": staticColor || undefined,\n    \"aria-disabled\": isPending ? 'true' : undefined,\n    \"aria-label\": isPending ? isPendingAriaLiveLabel : buttonProps['aria-label'],\n    \"aria-labelledby\": isPending ? isPendingAriaLiveLabelledby : buttonProps['aria-labelledby'],\n    className: (0, $l1zrX$classNames)((0, $parcel$interopDefault($l1zrX$button_vars_cssmodulejs)), 'spectrum-Button', {\n      'spectrum-Button--iconOnly': hasIcon && !hasLabel,\n      'is-disabled': isDisabled || isProgressVisible,\n      'is-active': isPressed,\n      'is-hovered': isHovered,\n      'spectrum-Button--pending': isProgressVisible\n    }, styleProps.className)\n  }, /*#__PURE__*/(0, $l1zrX$react).createElement((0, $l1zrX$SlotProvider), {\n    slots: {\n      icon: {\n        id: iconId,\n        size: 'S',\n        UNSAFE_className: (0, $l1zrX$classNames)((0, $parcel$interopDefault($l1zrX$button_vars_cssmodulejs)), 'spectrum-Icon')\n      },\n      text: {\n        id: textId,\n        UNSAFE_className: (0, $l1zrX$classNames)((0, $parcel$interopDefault($l1zrX$button_vars_cssmodulejs)), 'spectrum-Button-label')\n      }\n    }\n  }, typeof children === 'string' ? /*#__PURE__*/(0, $l1zrX$react).createElement((0, $l1zrX$Text), null, children) : children, isPending && /*#__PURE__*/(0, $l1zrX$react).createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    style: {\n      visibility: isProgressVisible ? 'visible' : 'hidden'\n    },\n    className: (0, $l1zrX$classNames)((0, $parcel$interopDefault($l1zrX$button_vars_cssmodulejs)), 'spectrum-Button-circleLoader')\n  }, /*#__PURE__*/(0, $l1zrX$react).createElement((0, $l1zrX$ProgressCircle), {\n    \"aria-label\": isPendingAriaLiveLabel,\n    isIndeterminate: true,\n    size: \"S\",\n    staticColor: staticColor\n  })), isPending && /*#__PURE__*/(0, $l1zrX$react).createElement((0, $l1zrX$react).Fragment, null, /*#__PURE__*/(0, $l1zrX$react).createElement(\"div\", {\n    \"aria-live\": isFocused ? ariaLive : 'off'\n  }, isProgressVisible && /*#__PURE__*/(0, $l1zrX$react).createElement(\"div\", {\n    role: \"img\",\n    \"aria-labelledby\": isPendingAriaLiveLabelledby\n  })), /*#__PURE__*/(0, $l1zrX$react).createElement(\"div\", {\n    id: spinnerId,\n    role: \"img\",\n    \"aria-label\": isPendingAriaLiveLabel\n  })))));\n}\n/**\n * Buttons allow users to perform an action or to navigate to another page.\n * They have multiple styles for various needs, and are ideal for calling attention to\n * where a user needs to do something in order to move forward in a flow.\n */\nlet $b865a6f0049e2d66$export$353f5b6fc5456de1 = /*#__PURE__*/(0, $l1zrX$react).forwardRef($b865a6f0049e2d66$var$Button);\nexport { $b865a6f0049e2d66$export$353f5b6fc5456de1 as Button };","map":{"version":3,"names":["$b865a6f0049e2d66$var$disablePendingProps","props","isPending","onPress","undefined","onPressStart","onPressEnd","onPressChange","onPressUp","onKeyDown","onKeyUp","onClick","href","$b865a6f0049e2d66$var$Button","ref","_buttonProps_arialabelledby","$l1zrX$useProviderProps","$l1zrX$useSlotProps","elementType","Element","children","variant","style","staticColor","isDisabled","autoFocus","otherProps","domRef","$l1zrX$useFocusableRef","buttonProps","isPressed","$l1zrX$useButton","hoverProps","isHovered","$l1zrX$useHover","isFocused","onFocusChange","$l1zrX$useState","focusProps","$l1zrX$useFocus","stringFormatter","$l1zrX$useLocalizedStringFormatter","$parcel$interopDefault","$l1zrX$intlStringsmodulejs","styleProps","$l1zrX$useStyleProps","hasLabel","$l1zrX$useHasChild","$l1zrX$button_vars_cssmodulejs","hasIcon","hasAriaLabel","isProgressVisible","setIsProgressVisible","backupButtonId","$l1zrX$useId","buttonId","id","iconId","textId","spinnerId","$l1zrX$useEffect","timeout","setTimeout","clearTimeout","isPendingAriaLiveLabel","format","trim","_buttonProps_arialabelledby_replace","isPendingAriaLiveLabelledby","replace","ariaLive","$l1zrX$isAppleDevice","$l1zrX$isFirefox","isPendingProps","e","currentTarget","HTMLButtonElement","preventDefault","$l1zrX$react","createElement","$l1zrX$FocusRing","focusRingClass","$l1zrX$classNames","$l1zrX$mergeProps","className","$l1zrX$SlotProvider","slots","icon","size","UNSAFE_className","text","$l1zrX$Text","visibility","$l1zrX$ProgressCircle","isIndeterminate","Fragment","role","$b865a6f0049e2d66$export$353f5b6fc5456de1","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/button/dist/packages/@react-spectrum/button/src/Button.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  classNames,\n  SlotProvider,\n  useFocusableRef,\n  useHasChild,\n  useSlotProps,\n  useStyleProps\n} from '@react-spectrum/utils';\nimport {FocusableRef} from '@react-types/shared';\nimport {FocusRing} from '@react-aria/focus';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {isAppleDevice, isFirefox, mergeProps, useId} from '@react-aria/utils';\nimport {ProgressCircle} from '@react-spectrum/progress';\nimport React, {ElementType, ReactElement, useEffect, useState} from 'react';\nimport {SpectrumButtonProps} from '@react-types/button';\nimport styles from '@adobe/spectrum-css-temp/components/button/vars.css';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useFocus, useHover} from '@react-aria/interactions';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction disablePendingProps(props) {\n  // Don't allow interaction while isPending is true\n  if (props.isPending) {\n    props.onPress = undefined;\n    props.onPressStart = undefined;\n    props.onPressEnd = undefined;\n    props.onPressChange = undefined;\n    props.onPressUp = undefined;\n    props.onKeyDown = undefined;\n    props.onKeyUp = undefined;\n    props.onClick = undefined;\n    props.href = undefined;\n  }\n  return props;\n}\n\nfunction Button<T extends ElementType = 'button'>(props: SpectrumButtonProps<T>, ref: FocusableRef<HTMLElement>) {\n  props = useProviderProps(props);\n  props = useSlotProps(props, 'button');\n  props = disablePendingProps(props);\n  let {\n    elementType: Element = 'button',\n    children,\n    variant,\n    style = variant === 'accent' || variant === 'cta' ? 'fill' : 'outline',\n    staticColor,\n    isDisabled,\n    isPending,\n    autoFocus,\n    ...otherProps\n  } = props;\n  let domRef = useFocusableRef(ref);\n  let {buttonProps, isPressed} = useButton(props, domRef);\n  let {hoverProps, isHovered} = useHover({isDisabled});\n  let [isFocused, onFocusChange] = useState(false);\n  let {focusProps} = useFocus({onFocusChange, isDisabled});\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/button');\n  let {styleProps} = useStyleProps(otherProps);\n  let hasLabel = useHasChild(`.${styles['spectrum-Button-label']}`, domRef);\n  let hasIcon = useHasChild(`.${styles['spectrum-Icon']}`, domRef);\n  // an aria label will block children and their labels from being read, this is undesirable for pending state\n  let hasAriaLabel = !!buttonProps['aria-label'] || !!buttonProps['aria-labelledby'];\n  let [isProgressVisible, setIsProgressVisible] = useState(false);\n  let backupButtonId = useId();\n  let buttonId = buttonProps.id || backupButtonId;\n  let iconId = useId();\n  let textId = useId();\n  let spinnerId = useId();\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n\n    if (isPending) {\n      // Start timer when isPending is set to true.\n      timeout = setTimeout(() => {\n        setIsProgressVisible(true);\n      }, 1000);\n    } else {\n      // Exit loading state when isPending is set to false. */\n      setIsProgressVisible(false);\n    }\n    return () => {\n      // Clean up on unmount or when user removes isPending prop before entering loading state.\n      clearTimeout(timeout);\n    };\n  }, [isPending]);\n\n  if (variant === 'cta') {\n    variant = 'accent';\n  } else if (variant === 'overBackground') {\n    variant = 'primary';\n    staticColor = 'white';\n  }\n\n  const isPendingAriaLiveLabel = `${hasAriaLabel ? buttonProps['aria-label'] : ''} ${stringFormatter.format('pending')}`.trim();\n  const isPendingAriaLiveLabelledby = hasAriaLabel ? (buttonProps['aria-labelledby']?.replace(buttonId, spinnerId) ?? spinnerId) : `${hasIcon ? iconId : ''} ${hasLabel ? textId : ''} ${spinnerId}`.trim();\n\n  let ariaLive: 'off' | 'polite' | 'assertive' = 'polite';\n  if (isAppleDevice() && (!hasAriaLabel || isFirefox())) {\n    ariaLive = 'off';\n  }\n\n  let isPendingProps = isPending ? {\n    onClick: (e) => {\n      if (e.currentTarget instanceof HTMLButtonElement) {\n        e.preventDefault();\n      }\n    }\n  } : {\n    // no-op. \n    // Not sure why, but TypeScript wouldn't allow to have an empty object `{}`.\n    onClick: () => {}\n  };\n\n  return (\n    <FocusRing focusRingClass={classNames(styles, 'focus-ring')} autoFocus={autoFocus}>\n      <Element\n        {...styleProps}\n        {...mergeProps(buttonProps, hoverProps, focusProps, isPendingProps)}\n        id={buttonId}\n        ref={domRef}\n        data-variant={variant}\n        data-style={style}\n        data-static-color={staticColor || undefined}\n        aria-disabled={isPending ? 'true' : undefined}\n        aria-label={isPending ? isPendingAriaLiveLabel : buttonProps['aria-label']}\n        aria-labelledby={isPending ? isPendingAriaLiveLabelledby : buttonProps['aria-labelledby']}\n        className={\n          classNames(\n            styles,\n            'spectrum-Button',\n            {\n              'spectrum-Button--iconOnly': hasIcon && !hasLabel,\n              'is-disabled': isDisabled || isProgressVisible,\n              'is-active': isPressed,\n              'is-hovered': isHovered,\n              'spectrum-Button--pending': isProgressVisible\n            },\n            styleProps.className\n          )\n        }>\n        <SlotProvider\n          slots={{\n            icon: {\n              id: iconId,\n              size: 'S',\n              UNSAFE_className: classNames(styles, 'spectrum-Icon')\n            },\n            text: {\n              id: textId,\n              UNSAFE_className: classNames(styles, 'spectrum-Button-label')\n            }\n          }}>\n          {typeof children === 'string'\n            ? <Text>{children}</Text>\n            : children}\n          {isPending && (\n            <div\n              aria-hidden=\"true\"\n              style={{visibility: isProgressVisible ? 'visible' : 'hidden'}}\n              className={classNames(styles, 'spectrum-Button-circleLoader')}>\n              <ProgressCircle\n                aria-label={isPendingAriaLiveLabel}\n                isIndeterminate\n                size=\"S\"\n                staticColor={staticColor} />\n            </div>\n          )}\n          {isPending &&\n            <>\n              <div aria-live={isFocused ? ariaLive : 'off'}>\n                {isProgressVisible &&\n                  <div role=\"img\" aria-labelledby={isPendingAriaLiveLabelledby} />\n                }\n              </div>\n              {/* Adding the element here with the same labels as the button itself causes aria-live to pick up the change in Safari.\n              Safari with VO unfortunately doesn't announce changes to *all* of its labels specifically for button\n              https://a11ysupport.io/tests/tech__html__button-name-change#assertion-aria-aria-label_attribute-convey_name_change-html-button_element-vo_macos-safari\n              The aria-live may cause extra announcements in other browsers. */}\n              <div id={spinnerId} role=\"img\" aria-label={isPendingAriaLiveLabel} />\n            </>\n          }\n        </SlotProvider>\n      </Element>\n    </FocusRing>\n  );\n}\n\n/**\n * Buttons allow users to perform an action or to navigate to another page.\n * They have multiple styles for various needs, and are ideal for calling attention to\n * where a user needs to do something in order to move forward in a flow.\n */\nlet _Button = React.forwardRef(Button) as <T extends ElementType = 'button'>(props: SpectrumButtonProps<T> & {ref?: FocusableRef<HTMLElement>}) => ReactElement;\nexport {_Button as Button};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}