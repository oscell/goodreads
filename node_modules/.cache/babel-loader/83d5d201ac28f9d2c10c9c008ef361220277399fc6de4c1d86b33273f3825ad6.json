{"ast":null,"code":"import $c4Nes$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport \"./actionbar.27a01ec3.css\";\nimport $c4Nes$actionbar_cssmodulejs from \"./actionbar_css.mjs\";\nimport { ActionButton as $c4Nes$ActionButton } from \"@react-spectrum/button\";\nimport { ActionGroup as $c4Nes$ActionGroup } from \"@react-spectrum/actiongroup\";\nimport { announce as $c4Nes$announce } from \"@react-aria/live-announcer\";\nimport { useDOMRef as $c4Nes$useDOMRef, useStyleProps as $c4Nes$useStyleProps, classNames as $c4Nes$classNames } from \"@react-spectrum/utils\";\nimport $c4Nes$spectrumiconsuiCrossLarge from \"@spectrum-icons/ui/CrossLarge\";\nimport { filterDOMProps as $c4Nes$filterDOMProps } from \"@react-aria/utils\";\nimport { FocusScope as $c4Nes$FocusScope } from \"@react-aria/focus\";\nimport { OpenTransition as $c4Nes$OpenTransition } from \"@react-spectrum/overlays\";\nimport $c4Nes$react, { useState as $c4Nes$useState, useRef as $c4Nes$useRef, useEffect as $c4Nes$useEffect } from \"react\";\nimport { Text as $c4Nes$Text } from \"@react-spectrum/text\";\nimport { useKeyboard as $c4Nes$useKeyboard } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $c4Nes$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useProviderProps as $c4Nes$useProviderProps } from \"@react-spectrum/provider\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $a4e665fbd087d71e$var$ActionBar(props, ref) {\n  let isOpen = props.selectedItemCount !== 0;\n  let domRef = (0, $c4Nes$useDOMRef)(ref);\n  return /*#__PURE__*/(0, $c4Nes$react).createElement((0, $c4Nes$OpenTransition), {\n    nodeRef: domRef,\n    in: isOpen,\n    mountOnEnter: true,\n    unmountOnExit: true\n  }, /*#__PURE__*/(0, $c4Nes$react).createElement($a4e665fbd087d71e$var$ActionBarInnerWithRef, {\n    ...props,\n    ref: domRef\n  }));\n}\nfunction $a4e665fbd087d71e$var$ActionBarInner(props, ref) {\n  props = (0, $c4Nes$useProviderProps)(props);\n  let {\n    children: children,\n    isEmphasized: isEmphasized,\n    onAction: onAction,\n    onClearSelection: onClearSelection,\n    selectedItemCount: selectedItemCount,\n    isOpen: isOpen,\n    buttonLabelBehavior = 'collapse',\n    items: items,\n    disabledKeys: disabledKeys\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $c4Nes$useStyleProps)(props);\n  let stringFormatter = (0, $c4Nes$useLocalizedStringFormatter)((0, $parcel$interopDefault($c4Nes$intlStringsmodulejs)), '@react-spectrum/actionbar');\n  // Store the last count greater than zero in a ref so that we can retain it while rendering the fade-out animation.\n  let [lastCount, setLastCount] = (0, $c4Nes$useState)(selectedItemCount);\n  if ((selectedItemCount === 'all' || selectedItemCount > 0) && selectedItemCount !== lastCount) setLastCount(selectedItemCount);\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $c4Nes$useKeyboard)({\n    onKeyDown(e) {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        onClearSelection();\n      }\n    }\n  });\n  // Announce \"actions available\" on mount.\n  let isInitial = (0, $c4Nes$useRef)(true);\n  (0, $c4Nes$useEffect)(() => {\n    if (isInitial.current) {\n      isInitial.current = false;\n      (0, $c4Nes$announce)(stringFormatter.format('actionsAvailable'));\n    }\n  }, [stringFormatter]);\n  return /*#__PURE__*/(0, $c4Nes$react).createElement((0, $c4Nes$FocusScope), {\n    restoreFocus: true\n  }, /*#__PURE__*/(0, $c4Nes$react).createElement(\"div\", {\n    ...(0, $c4Nes$filterDOMProps)(props),\n    ...styleProps,\n    ...keyboardProps,\n    ref: ref,\n    className: (0, $c4Nes$classNames)((0, $parcel$interopDefault($c4Nes$actionbar_cssmodulejs)), 'react-spectrum-ActionBar', {\n      'react-spectrum-ActionBar--emphasized': isEmphasized,\n      'is-open': isOpen\n    }, styleProps.className)\n  }, /*#__PURE__*/(0, $c4Nes$react).createElement(\"div\", {\n    className: (0, $c4Nes$classNames)((0, $parcel$interopDefault($c4Nes$actionbar_cssmodulejs)), 'react-spectrum-ActionBar-bar')\n  }, /*#__PURE__*/(0, $c4Nes$react).createElement((0, $c4Nes$ActionGroup), {\n    items: items,\n    \"aria-label\": stringFormatter.format('actions'),\n    isQuiet: true,\n    staticColor: isEmphasized ? 'white' : undefined,\n    overflowMode: \"collapse\",\n    buttonLabelBehavior: buttonLabelBehavior,\n    onAction: onAction,\n    disabledKeys: disabledKeys,\n    UNSAFE_className: (0, $c4Nes$classNames)((0, $parcel$interopDefault($c4Nes$actionbar_cssmodulejs)), 'react-spectrum-ActionBar-actionGroup')\n  }, children), /*#__PURE__*/(0, $c4Nes$react).createElement((0, $c4Nes$ActionButton), {\n    gridArea: (0, $parcel$interopDefault($c4Nes$actionbar_cssmodulejs)).clear,\n    \"aria-label\": stringFormatter.format('clearSelection'),\n    onPress: () => onClearSelection(),\n    isQuiet: true,\n    staticColor: isEmphasized ? 'white' : undefined\n  }, /*#__PURE__*/(0, $c4Nes$react).createElement((0, $c4Nes$spectrumiconsuiCrossLarge), null)), /*#__PURE__*/(0, $c4Nes$react).createElement((0, $c4Nes$Text), {\n    UNSAFE_className: (0, $c4Nes$classNames)((0, $parcel$interopDefault($c4Nes$actionbar_cssmodulejs)), 'react-spectrum-ActionBar-selectedCount')\n  }, lastCount === 'all' ? stringFormatter.format('selectedAll') : stringFormatter.format('selected', {\n    count: lastCount\n  })))));\n}\nconst $a4e665fbd087d71e$var$ActionBarInnerWithRef = /*#__PURE__*/(0, $c4Nes$react).forwardRef($a4e665fbd087d71e$var$ActionBarInner);\n/**\n * Action bars are used for single and bulk selection patterns when a user needs to perform actions on one or more items at the same time.\n */\nconst $a4e665fbd087d71e$export$e213cebad6250b4a = /*#__PURE__*/(0, $c4Nes$react).forwardRef($a4e665fbd087d71e$var$ActionBar);\nexport { $a4e665fbd087d71e$export$e213cebad6250b4a as ActionBar };","map":{"version":3,"names":["$a4e665fbd087d71e$var$ActionBar","props","ref","isOpen","selectedItemCount","domRef","$c4Nes$useDOMRef","$c4Nes$react","createElement","$c4Nes$OpenTransition","nodeRef","in","mountOnEnter","unmountOnExit","$a4e665fbd087d71e$var$ActionBarInnerWithRef","$a4e665fbd087d71e$var$ActionBarInner","$c4Nes$useProviderProps","children","isEmphasized","onAction","onClearSelection","buttonLabelBehavior","items","disabledKeys","styleProps","$c4Nes$useStyleProps","stringFormatter","$c4Nes$useLocalizedStringFormatter","$parcel$interopDefault","$c4Nes$intlStringsmodulejs","lastCount","setLastCount","$c4Nes$useState","keyboardProps","$c4Nes$useKeyboard","onKeyDown","e","key","preventDefault","isInitial","$c4Nes$useRef","$c4Nes$useEffect","current","$c4Nes$announce","format","$c4Nes$FocusScope","restoreFocus","$c4Nes$filterDOMProps","className","$c4Nes$classNames","$c4Nes$actionbar_cssmodulejs","$c4Nes$ActionGroup","isQuiet","staticColor","undefined","overflowMode","UNSAFE_className","$c4Nes$ActionButton","gridArea","clear","onPress","$c4Nes$spectrumiconsuiCrossLarge","$c4Nes$Text","count","forwardRef","$a4e665fbd087d71e$export$e213cebad6250b4a"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/actionbar/dist/packages/@react-spectrum/actionbar/src/ActionBar.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ActionButton} from '@react-spectrum/button';\nimport {ActionGroup} from '@react-spectrum/actiongroup';\nimport {announce} from '@react-aria/live-announcer';\nimport {classNames, useDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport CrossLarge from '@spectrum-icons/ui/CrossLarge';\nimport {DOMRef} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {FocusScope} from '@react-aria/focus';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {OpenTransition} from '@react-spectrum/overlays';\nimport React, {ReactElement, Ref, useEffect, useRef, useState} from 'react';\nimport {SpectrumActionBarProps} from '@react-types/actionbar';\nimport styles from './actionbar.css';\nimport {Text} from '@react-spectrum/text';\nimport {useKeyboard} from '@react-aria/interactions';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useProviderProps} from '@react-spectrum/provider';\n\nfunction ActionBar<T extends object>(props: SpectrumActionBarProps<T>, ref: DOMRef<HTMLDivElement>) {\n  let isOpen = props.selectedItemCount !== 0;\n  let domRef = useDOMRef(ref);\n\n  return (\n    <OpenTransition\n      nodeRef={domRef}\n      in={isOpen}\n      mountOnEnter\n      unmountOnExit>\n      <ActionBarInnerWithRef {...props} ref={domRef} />\n    </OpenTransition>\n  );\n}\n\ninterface ActionBarInnerProps<T> extends SpectrumActionBarProps<T> {\n  isOpen?: boolean\n}\n\nfunction ActionBarInner<T>(props: ActionBarInnerProps<T>, ref: Ref<HTMLDivElement>) {\n  props = useProviderProps(props);\n\n  let {\n    children,\n    isEmphasized,\n    onAction,\n    onClearSelection,\n    selectedItemCount,\n    isOpen,\n    buttonLabelBehavior = 'collapse',\n    items,\n    disabledKeys\n  } = props;\n\n  let {styleProps} = useStyleProps(props);\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-spectrum/actionbar');\n\n  // Store the last count greater than zero in a ref so that we can retain it while rendering the fade-out animation.\n  let [lastCount, setLastCount] = useState(selectedItemCount);\n  if ((selectedItemCount === 'all' || selectedItemCount > 0) && selectedItemCount !== lastCount) {\n    setLastCount(selectedItemCount);\n  }\n\n  let {keyboardProps} = useKeyboard({\n    onKeyDown(e) {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        onClearSelection();\n      }\n    }\n  });\n\n  // Announce \"actions available\" on mount.\n  let isInitial = useRef(true);\n  useEffect(() => {\n    if (isInitial.current) {\n      isInitial.current = false;\n      announce(stringFormatter.format('actionsAvailable'));\n    }\n  }, [stringFormatter]);\n\n  return (\n    <FocusScope restoreFocus>\n      <div\n        {...filterDOMProps(props)}\n        {...styleProps}\n        {...keyboardProps}\n        ref={ref}\n        className={classNames(\n          styles,\n          'react-spectrum-ActionBar', {\n            'react-spectrum-ActionBar--emphasized': isEmphasized,\n            'is-open': isOpen\n          },\n          styleProps.className\n        )}>\n        <div className={classNames(styles, 'react-spectrum-ActionBar-bar')}>\n          <ActionGroup\n            items={items}\n            aria-label={stringFormatter.format('actions')}\n            isQuiet\n            staticColor={isEmphasized ? 'white' : undefined}\n            overflowMode=\"collapse\"\n            buttonLabelBehavior={buttonLabelBehavior}\n            onAction={onAction}\n            disabledKeys={disabledKeys}\n            UNSAFE_className={classNames(styles, 'react-spectrum-ActionBar-actionGroup')}>\n            {children}\n          </ActionGroup>\n          <ActionButton\n            gridArea={styles.clear}\n            aria-label={stringFormatter.format('clearSelection')}\n            onPress={() => onClearSelection()}\n            isQuiet\n            staticColor={isEmphasized ? 'white' : undefined}>\n            <CrossLarge />\n          </ActionButton>\n          <Text UNSAFE_className={classNames(styles, 'react-spectrum-ActionBar-selectedCount')}>\n            {lastCount === 'all'\n              ? stringFormatter.format('selectedAll')\n              : stringFormatter.format('selected', {count: lastCount})}\n          </Text>\n        </div>\n      </div>\n    </FocusScope>\n  );\n}\n\nconst ActionBarInnerWithRef = React.forwardRef(ActionBarInner) as <T>(props: ActionBarInnerProps<T> & {ref?: Ref<HTMLDivElement>}) => ReactElement;\n\n/**\n * Action bars are used for single and bulk selection patterns when a user needs to perform actions on one or more items at the same time.\n */\nconst _ActionBar = React.forwardRef(ActionBar) as <T>(props: SpectrumActionBarProps<T> & {ref?: DOMRef<HTMLDivElement>}) => ReactElement;\nexport {_ActionBar as ActionBar};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}