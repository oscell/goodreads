{"ast":null,"code":"import { h } from 'preact';\nimport { readDataAttributes } from \"../../helpers/insights.js\";\nimport { deserializePayload, warning } from \"../utils/index.js\";\nexport var createInsightsEventHandler = function createInsightsEventHandler(_ref) {\n  var insights = _ref.insights,\n    sendEvent = _ref.sendEvent;\n  return function (event) {\n    // new way, e.g. bindEvent(\"click\", hit, \"Hit clicked\")\n    var insightsThroughSendEvent = findInsightsTarget(event.target, event.currentTarget, function (element) {\n      return element.hasAttribute('data-insights-event');\n    });\n    if (insightsThroughSendEvent) {\n      var payload = parseInsightsEvent(insightsThroughSendEvent);\n      payload.forEach(function (single) {\n        return sendEvent(single);\n      });\n    }\n\n    // old way, e.g. instantsearch.insights(\"clickedObjectIDsAfterSearch\", { .. })\n    var insightsThroughFunction = findInsightsTarget(event.target, event.currentTarget, function (element) {\n      return element.hasAttribute('data-insights-method') && element.hasAttribute('data-insights-payload');\n    });\n    if (insightsThroughFunction) {\n      var _readDataAttributes = readDataAttributes(insightsThroughFunction),\n        method = _readDataAttributes.method,\n        _payload = _readDataAttributes.payload;\n      insights(method, _payload);\n    }\n  };\n};\nfunction findInsightsTarget(startElement, endElement, validator) {\n  var element = startElement;\n  while (element && !validator(element)) {\n    if (element === endElement) {\n      return null;\n    }\n    element = element.parentElement;\n  }\n  return element;\n}\nfunction parseInsightsEvent(element) {\n  var serializedPayload = element.getAttribute('data-insights-event');\n  if (typeof serializedPayload !== 'string') {\n    throw new Error('The insights middleware expects `data-insights-event` to be a base64-encoded JSON string.');\n  }\n  try {\n    return deserializePayload(serializedPayload);\n  } catch (error) {\n    throw new Error('The insights middleware was unable to parse `data-insights-event`.');\n  }\n}\n\n/**\n * @deprecated use `sendEvent` directly instead\n */\nexport default function withInsightsListener(BaseComponent) {\n  process.env.NODE_ENV === 'development' ? warning(false, 'The `withInsightsListener` function is deprecated and will be removed in the next major version. Please use `sendEvent` directly instead.') : void 0;\n  return function WithInsightsListener(props) {\n    var handleClick = createInsightsEventHandler(props);\n    return h(\"div\", {\n      onClick: handleClick\n    }, h(BaseComponent, props));\n  };\n}","map":{"version":3,"names":["h","readDataAttributes","deserializePayload","warning","createInsightsEventHandler","_ref","insights","sendEvent","event","insightsThroughSendEvent","findInsightsTarget","target","currentTarget","element","hasAttribute","payload","parseInsightsEvent","forEach","single","insightsThroughFunction","_readDataAttributes","method","_payload","startElement","endElement","validator","parentElement","serializedPayload","getAttribute","Error","error","withInsightsListener","BaseComponent","process","env","NODE_ENV","WithInsightsListener","props","handleClick","onClick"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/instantsearch.js/es/lib/insights/listener.js"],"sourcesContent":["import { h } from 'preact';\nimport { readDataAttributes } from \"../../helpers/insights.js\";\nimport { deserializePayload, warning } from \"../utils/index.js\";\nexport var createInsightsEventHandler = function createInsightsEventHandler(_ref) {\n  var insights = _ref.insights,\n    sendEvent = _ref.sendEvent;\n  return function (event) {\n    // new way, e.g. bindEvent(\"click\", hit, \"Hit clicked\")\n    var insightsThroughSendEvent = findInsightsTarget(event.target, event.currentTarget, function (element) {\n      return element.hasAttribute('data-insights-event');\n    });\n    if (insightsThroughSendEvent) {\n      var payload = parseInsightsEvent(insightsThroughSendEvent);\n      payload.forEach(function (single) {\n        return sendEvent(single);\n      });\n    }\n\n    // old way, e.g. instantsearch.insights(\"clickedObjectIDsAfterSearch\", { .. })\n    var insightsThroughFunction = findInsightsTarget(event.target, event.currentTarget, function (element) {\n      return element.hasAttribute('data-insights-method') && element.hasAttribute('data-insights-payload');\n    });\n    if (insightsThroughFunction) {\n      var _readDataAttributes = readDataAttributes(insightsThroughFunction),\n        method = _readDataAttributes.method,\n        _payload = _readDataAttributes.payload;\n      insights(method, _payload);\n    }\n  };\n};\nfunction findInsightsTarget(startElement, endElement, validator) {\n  var element = startElement;\n  while (element && !validator(element)) {\n    if (element === endElement) {\n      return null;\n    }\n    element = element.parentElement;\n  }\n  return element;\n}\nfunction parseInsightsEvent(element) {\n  var serializedPayload = element.getAttribute('data-insights-event');\n  if (typeof serializedPayload !== 'string') {\n    throw new Error('The insights middleware expects `data-insights-event` to be a base64-encoded JSON string.');\n  }\n  try {\n    return deserializePayload(serializedPayload);\n  } catch (error) {\n    throw new Error('The insights middleware was unable to parse `data-insights-event`.');\n  }\n}\n\n/**\n * @deprecated use `sendEvent` directly instead\n */\nexport default function withInsightsListener(BaseComponent) {\n  process.env.NODE_ENV === 'development' ? warning(false, 'The `withInsightsListener` function is deprecated and will be removed in the next major version. Please use `sendEvent` directly instead.') : void 0;\n  return function WithInsightsListener(props) {\n    var handleClick = createInsightsEventHandler(props);\n    return h(\"div\", {\n      onClick: handleClick\n    }, h(BaseComponent, props));\n  };\n}"],"mappings":"AAAA,SAASA,CAAC,QAAQ,QAAQ;AAC1B,SAASC,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,kBAAkB,EAAEC,OAAO,QAAQ,mBAAmB;AAC/D,OAAO,IAAIC,0BAA0B,GAAG,SAASA,0BAA0BA,CAACC,IAAI,EAAE;EAChF,IAAIC,QAAQ,GAAGD,IAAI,CAACC,QAAQ;IAC1BC,SAAS,GAAGF,IAAI,CAACE,SAAS;EAC5B,OAAO,UAAUC,KAAK,EAAE;IACtB;IACA,IAAIC,wBAAwB,GAAGC,kBAAkB,CAACF,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,aAAa,EAAE,UAAUC,OAAO,EAAE;MACtG,OAAOA,OAAO,CAACC,YAAY,CAAC,qBAAqB,CAAC;IACpD,CAAC,CAAC;IACF,IAAIL,wBAAwB,EAAE;MAC5B,IAAIM,OAAO,GAAGC,kBAAkB,CAACP,wBAAwB,CAAC;MAC1DM,OAAO,CAACE,OAAO,CAAC,UAAUC,MAAM,EAAE;QAChC,OAAOX,SAAS,CAACW,MAAM,CAAC;MAC1B,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIC,uBAAuB,GAAGT,kBAAkB,CAACF,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,aAAa,EAAE,UAAUC,OAAO,EAAE;MACrG,OAAOA,OAAO,CAACC,YAAY,CAAC,sBAAsB,CAAC,IAAID,OAAO,CAACC,YAAY,CAAC,uBAAuB,CAAC;IACtG,CAAC,CAAC;IACF,IAAIK,uBAAuB,EAAE;MAC3B,IAAIC,mBAAmB,GAAGnB,kBAAkB,CAACkB,uBAAuB,CAAC;QACnEE,MAAM,GAAGD,mBAAmB,CAACC,MAAM;QACnCC,QAAQ,GAAGF,mBAAmB,CAACL,OAAO;MACxCT,QAAQ,CAACe,MAAM,EAAEC,QAAQ,CAAC;IAC5B;EACF,CAAC;AACH,CAAC;AACD,SAASZ,kBAAkBA,CAACa,YAAY,EAAEC,UAAU,EAAEC,SAAS,EAAE;EAC/D,IAAIZ,OAAO,GAAGU,YAAY;EAC1B,OAAOV,OAAO,IAAI,CAACY,SAAS,CAACZ,OAAO,CAAC,EAAE;IACrC,IAAIA,OAAO,KAAKW,UAAU,EAAE;MAC1B,OAAO,IAAI;IACb;IACAX,OAAO,GAAGA,OAAO,CAACa,aAAa;EACjC;EACA,OAAOb,OAAO;AAChB;AACA,SAASG,kBAAkBA,CAACH,OAAO,EAAE;EACnC,IAAIc,iBAAiB,GAAGd,OAAO,CAACe,YAAY,CAAC,qBAAqB,CAAC;EACnE,IAAI,OAAOD,iBAAiB,KAAK,QAAQ,EAAE;IACzC,MAAM,IAAIE,KAAK,CAAC,2FAA2F,CAAC;EAC9G;EACA,IAAI;IACF,OAAO3B,kBAAkB,CAACyB,iBAAiB,CAAC;EAC9C,CAAC,CAAC,OAAOG,KAAK,EAAE;IACd,MAAM,IAAID,KAAK,CAAC,oEAAoE,CAAC;EACvF;AACF;;AAEA;AACA;AACA;AACA,eAAe,SAASE,oBAAoBA,CAACC,aAAa,EAAE;EAC1DC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAGhC,OAAO,CAAC,KAAK,EAAE,2IAA2I,CAAC,GAAG,KAAK,CAAC;EAC7M,OAAO,SAASiC,oBAAoBA,CAACC,KAAK,EAAE;IAC1C,IAAIC,WAAW,GAAGlC,0BAA0B,CAACiC,KAAK,CAAC;IACnD,OAAOrC,CAAC,CAAC,KAAK,EAAE;MACduC,OAAO,EAAED;IACX,CAAC,EAAEtC,CAAC,CAACgC,aAAa,EAAEK,KAAK,CAAC,CAAC;EAC7B,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}