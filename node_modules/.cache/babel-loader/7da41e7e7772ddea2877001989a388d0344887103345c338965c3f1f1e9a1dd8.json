{"ast":null,"code":"import \"./styles.ad343ab0.css\";\nimport $asbps$styles_cssmodulejs from \"./styles_css.mjs\";\nimport { ListViewContext as $f85fb77f9d4cbc6c$export$870039b0abfe3de0 } from \"./ListView.mjs\";\nimport { Checkbox as $asbps$Checkbox } from \"@react-spectrum/checkbox\";\nimport $asbps$spectrumiconsuiChevronLeftMedium from \"@spectrum-icons/ui/ChevronLeftMedium\";\nimport $asbps$spectrumiconsuiChevronRightMedium from \"@spectrum-icons/ui/ChevronRightMedium\";\nimport { useHasChild as $asbps$useHasChild, classNames as $asbps$classNames, SlotProvider as $asbps$SlotProvider, ClearSlots as $asbps$ClearSlots } from \"@react-spectrum/utils\";\nimport { CSSTransition as $asbps$CSSTransition } from \"react-transition-group\";\nimport { useFocusRing as $asbps$useFocusRing, FocusRing as $asbps$FocusRing } from \"@react-aria/focus\";\nimport { Grid as $asbps$Grid } from \"@react-spectrum/layout\";\nimport { useHover as $asbps$useHover, isFocusVisible as $asbps$isFocusVisible } from \"@react-aria/interactions\";\nimport $asbps$spectrumiconsuiListGripper from \"@spectrum-icons/ui/ListGripper\";\nimport { mergeProps as $asbps$mergeProps } from \"@react-aria/utils\";\nimport { Provider as $asbps$Provider } from \"@react-spectrum/provider\";\nimport $asbps$react, { useContext as $asbps$useContext, useRef as $asbps$useRef } from \"react\";\nimport { Text as $asbps$Text } from \"@react-spectrum/text\";\nimport { useButton as $asbps$useButton } from \"@react-aria/button\";\nimport { useGridListItem as $asbps$useGridListItem, useGridListSelectionCheckbox as $asbps$useGridListSelectionCheckbox } from \"@react-aria/gridlist\";\nimport { useLocale as $asbps$useLocale } from \"@react-aria/i18n\";\nimport { useVisuallyHidden as $asbps$useVisuallyHidden } from \"@react-aria/visually-hidden\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d7c07ca2efc5ba02$export$c6bde0c04b033c0e(props) {\n  var _layout_getContentSize, _layout_virtualizer;\n  let {\n    item: item,\n    isEmphasized: isEmphasized\n  } = props;\n  let {\n    state: state,\n    dragState: dragState,\n    dropState: dropState,\n    isListDraggable: isListDraggable,\n    isListDroppable: isListDroppable,\n    layout: layout,\n    dragAndDropHooks: dragAndDropHooks,\n    loadingState: loadingState\n  } = (0, $asbps$useContext)((0, $f85fb77f9d4cbc6c$export$870039b0abfe3de0));\n  let {\n    direction: direction\n  } = (0, $asbps$useLocale)();\n  let rowRef = (0, $asbps$useRef)(undefined);\n  let checkboxWrapperRef = (0, $asbps$useRef)(undefined);\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = (0, $asbps$useFocusRing)({\n    within: true\n  });\n  let {\n    isFocusVisible: isFocusVisible,\n    focusProps: focusProps\n  } = (0, $asbps$useFocusRing)();\n  let {\n    rowProps: rowProps,\n    gridCellProps: gridCellProps,\n    isPressed: isPressed,\n    descriptionProps: descriptionProps,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  } = (0, $asbps$useGridListItem)({\n    node: item,\n    isVirtualized: true,\n    shouldSelectOnPressUp: isListDraggable\n  }, state, rowRef);\n  let isDroppable = isListDroppable && !isDisabled;\n  let {\n    hoverProps: hoverProps,\n    isHovered: isHovered\n  } = (0, $asbps$useHover)({\n    isDisabled: !allowsSelection && !hasAction\n  });\n  let {\n    checkboxProps: checkboxProps\n  } = (0, $asbps$useGridListSelectionCheckbox)({\n    key: item.key\n  }, state);\n  let hasDescription = (0, $asbps$useHasChild)(`.${(0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-description']}`, rowRef);\n  let draggableItem;\n  if (isListDraggable) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    draggableItem = dragAndDropHooks.useDraggableItem({\n      key: item.key,\n      hasDragButton: true\n    }, dragState);\n    if (isDisabled) draggableItem = null;\n  }\n  let droppableItem;\n  let isDropTarget;\n  let dropIndicator;\n  let dropIndicatorRef = (0, $asbps$useRef)(undefined);\n  if (isListDroppable) {\n    let target = {\n      type: 'item',\n      key: item.key,\n      dropPosition: 'on'\n    };\n    isDropTarget = dropState.isDropTarget(target);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    dropIndicator = dragAndDropHooks.useDropIndicator({\n      target: target\n    }, dropState, dropIndicatorRef);\n  }\n  let dragButtonRef = (0, $asbps$react).useRef(undefined);\n  let {\n    buttonProps: buttonProps\n  } = (0, $asbps$useButton)({\n    ...(draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragButtonProps),\n    elementType: 'div'\n  }, dragButtonRef);\n  let chevron = direction === 'ltr' ? /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$spectrumiconsuiChevronRightMedium), {\n    \"aria-hidden\": \"true\",\n    UNSAFE_className: (0, $asbps$classNames)((0, $parcel$interopDefault($asbps$styles_cssmodulejs)), 'react-spectrum-ListViewItem-parentIndicator', {\n      'react-spectrum-ListViewItem-parentIndicator--hasChildItems': item.props.hasChildItems,\n      'is-disabled': !hasAction\n    })\n  }) : /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$spectrumiconsuiChevronLeftMedium), {\n    \"aria-hidden\": \"true\",\n    UNSAFE_className: (0, $asbps$classNames)((0, $parcel$interopDefault($asbps$styles_cssmodulejs)), 'react-spectrum-ListViewItem-parentIndicator', {\n      'react-spectrum-ListViewItem-parentIndicator--hasChildItems': item.props.hasChildItems,\n      'is-disabled': !hasAction\n    })\n  });\n  let showCheckbox = state.selectionManager.selectionMode !== 'none' && state.selectionManager.selectionBehavior === 'toggle';\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $asbps$useVisuallyHidden)();\n  let dropProps = isDroppable ? droppableItem === null || droppableItem === void 0 ? void 0 : droppableItem.dropProps : {\n    'aria-hidden': droppableItem === null || droppableItem === void 0 ? void 0 : droppableItem.dropProps['aria-hidden']\n  };\n  const mergedProps = (0, $asbps$mergeProps)(rowProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps, dropProps, hoverProps, focusWithinProps, focusProps,\n  // Remove tab index from list row if performing a screenreader drag. This prevents TalkBack from focusing the row,\n  // allowing for single swipe navigation between row drop indicator\n  (dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.isVirtualDragging()) && {\n    tabIndex: null\n  });\n  let isFirstRow = item.prevKey == null;\n  let isLastRow = item.nextKey == null;\n  // Figure out if the ListView content is equal or greater in height to the container. If so, we'll need to round the bottom\n  // border corners of the last row when selected and we can get rid of the bottom border if it isn't selected to avoid border overlap\n  // with bottom border\n  let isFlushWithContainerBottom = false;\n  if (isLastRow && loadingState !== 'loadingMore') {\n    if (((_layout_getContentSize = layout.getContentSize()) === null || _layout_getContentSize === void 0 ? void 0 : _layout_getContentSize.height) >= ((_layout_virtualizer = layout.virtualizer) === null || _layout_virtualizer === void 0 ? void 0 : _layout_virtualizer.visibleRect.height)) isFlushWithContainerBottom = true;\n  }\n  // previous item isn't selected\n  // and the previous item isn't focused or, if it is focused, then if focus globally isn't visible or just focus isn't in the listview\n  let roundTops = !state.selectionManager.isSelected(item.prevKey) && (state.selectionManager.focusedKey !== item.prevKey || !((0, $asbps$isFocusVisible)() && state.selectionManager.isFocused));\n  let roundBottoms = !state.selectionManager.isSelected(item.nextKey) && (state.selectionManager.focusedKey !== item.nextKey || !((0, $asbps$isFocusVisible)() && state.selectionManager.isFocused));\n  let content = typeof item.rendered === 'string' ? /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$Text), null, item.rendered) : item.rendered;\n  if (isDisabled) content = /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$Provider), {\n    isDisabled: true\n  }, content);\n  return /*#__PURE__*/(0, $asbps$react).createElement(\"div\", {\n    ...mergedProps,\n    className: (0, $asbps$classNames)((0, $parcel$interopDefault($asbps$styles_cssmodulejs)), 'react-spectrum-ListView-row', {\n      'focus-ring': isFocusVisible,\n      'round-tops': roundTops || isHovered && !isSelected && state.selectionManager.focusedKey !== item.key,\n      'round-bottoms': roundBottoms || isHovered && !isSelected && state.selectionManager.focusedKey !== item.key\n    }),\n    ref: rowRef\n  }, /*#__PURE__*/(0, $asbps$react).createElement(\"div\", {\n    // TODO: refactor the css here now that we are focusing the row?\n    className: (0, $asbps$classNames)((0, $parcel$interopDefault($asbps$styles_cssmodulejs)), 'react-spectrum-ListViewItem', {\n      'is-active': isPressed,\n      'is-focused': isFocusVisibleWithin,\n      'focus-ring': isFocusVisible,\n      'is-hovered': isHovered,\n      'is-selected': isSelected,\n      'is-disabled': isDisabled,\n      'is-prev-selected': state.selectionManager.isSelected(item.prevKey),\n      'is-next-selected': state.selectionManager.isSelected(item.nextKey),\n      'react-spectrum-ListViewItem--highlightSelection': state.selectionManager.selectionBehavior === 'replace' && (isSelected || state.selectionManager.isSelected(item.nextKey)),\n      'react-spectrum-ListViewItem--dropTarget': !!isDropTarget,\n      'react-spectrum-ListViewItem--firstRow': isFirstRow,\n      'react-spectrum-ListViewItem--lastRow': isLastRow,\n      'react-spectrum-ListViewItem--isFlushBottom': isFlushWithContainerBottom,\n      'react-spectrum-ListViewItem--hasDescription': hasDescription\n    }),\n    ...gridCellProps\n  }, /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$Grid), {\n    UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-grid']\n  }, isListDraggable && /*#__PURE__*/(0, $asbps$react).createElement(\"div\", {\n    className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-draghandle-container']\n  }, !isDisabled && /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$FocusRing), {\n    focusRingClass: (0, $asbps$classNames)((0, $parcel$interopDefault($asbps$styles_cssmodulejs)), 'focus-ring')\n  }, /*#__PURE__*/(0, $asbps$react).createElement(\"div\", {\n    ...buttonProps,\n    className: (0, $asbps$classNames)((0, $parcel$interopDefault($asbps$styles_cssmodulejs)), 'react-spectrum-ListViewItem-draghandle-button'),\n    style: !isFocusVisibleWithin ? {\n      ...visuallyHiddenProps.style\n    } : {},\n    ref: dragButtonRef,\n    draggable: \"true\"\n  }, /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$spectrumiconsuiListGripper), null)))), isListDroppable && !(dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isHidden) && /*#__PURE__*/(0, $asbps$react).createElement(\"div\", {\n    role: \"button\",\n    ...visuallyHiddenProps,\n    ...(dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.dropIndicatorProps),\n    ref: dropIndicatorRef\n  }), /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$CSSTransition), {\n    in: showCheckbox,\n    unmountOnExit: true,\n    classNames: {\n      enter: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-checkbox--enter'],\n      enterActive: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-checkbox--enterActive'],\n      exit: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-checkbox--exit'],\n      exitActive: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-checkbox--exitActive']\n    },\n    timeout: 160,\n    nodeRef: checkboxWrapperRef\n  }, /*#__PURE__*/(0, $asbps$react).createElement(\"div\", {\n    ref: checkboxWrapperRef,\n    className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-checkboxWrapper']\n  }, /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$Checkbox), {\n    ...checkboxProps,\n    UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-checkbox'],\n    isEmphasized: isEmphasized\n  }))), /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$SlotProvider), {\n    slots: {\n      text: {\n        UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-content']\n      },\n      description: {\n        UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-description'],\n        ...descriptionProps\n      },\n      illustration: {\n        UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-thumbnail']\n      },\n      image: {\n        UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-thumbnail']\n      },\n      actionButton: {\n        UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-actions'],\n        isQuiet: true\n      },\n      actionGroup: {\n        UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-actions'],\n        isQuiet: true,\n        density: 'compact'\n      },\n      actionMenu: {\n        UNSAFE_className: (0, $parcel$interopDefault($asbps$styles_cssmodulejs))['react-spectrum-ListViewItem-actionmenu'],\n        isQuiet: true\n      }\n    }\n  }, content, /*#__PURE__*/(0, $asbps$react).createElement((0, $asbps$ClearSlots), null, chevron)))));\n}\nexport { $d7c07ca2efc5ba02$export$c6bde0c04b033c0e as ListViewItem };","map":{"version":3,"names":["$d7c07ca2efc5ba02$export$c6bde0c04b033c0e","props","_layout_getContentSize","_layout_virtualizer","item","isEmphasized","state","dragState","dropState","isListDraggable","isListDroppable","layout","dragAndDropHooks","loadingState","$asbps$useContext","$f85fb77f9d4cbc6c$export$870039b0abfe3de0","direction","$asbps$useLocale","rowRef","$asbps$useRef","undefined","checkboxWrapperRef","isFocusVisible","isFocusVisibleWithin","focusProps","focusWithinProps","$asbps$useFocusRing","within","rowProps","gridCellProps","isPressed","descriptionProps","isSelected","isDisabled","allowsSelection","hasAction","$asbps$useGridListItem","node","isVirtualized","shouldSelectOnPressUp","isDroppable","hoverProps","isHovered","$asbps$useHover","checkboxProps","$asbps$useGridListSelectionCheckbox","key","hasDescription","$asbps$useHasChild","$parcel$interopDefault","$asbps$styles_cssmodulejs","draggableItem","useDraggableItem","hasDragButton","droppableItem","isDropTarget","dropIndicator","dropIndicatorRef","target","type","dropPosition","useDropIndicator","dragButtonRef","$asbps$react","useRef","buttonProps","$asbps$useButton","dragButtonProps","elementType","chevron","createElement","$asbps$spectrumiconsuiChevronRightMedium","UNSAFE_className","$asbps$classNames","hasChildItems","$asbps$spectrumiconsuiChevronLeftMedium","showCheckbox","selectionManager","selectionMode","selectionBehavior","visuallyHiddenProps","$asbps$useVisuallyHidden","dropProps","mergedProps","$asbps$mergeProps","dragProps","isVirtualDragging","tabIndex","isFirstRow","prevKey","isLastRow","nextKey","isFlushWithContainerBottom","getContentSize","height","virtualizer","visibleRect","roundTops","focusedKey","$asbps$isFocusVisible","isFocused","roundBottoms","content","rendered","$asbps$Text","$asbps$Provider","className","ref","$asbps$Grid","$asbps$FocusRing","focusRingClass","style","draggable","$asbps$spectrumiconsuiListGripper","isHidden","role","dropIndicatorProps","$asbps$CSSTransition","in","unmountOnExit","classNames","enter","enterActive","exit","exitActive","timeout","nodeRef","$asbps$Checkbox","$asbps$SlotProvider","slots","text","description","illustration","image","actionButton","isQuiet","actionGroup","density","actionMenu","$asbps$ClearSlots"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/list/dist/packages/@react-spectrum/list/src/ListViewItem.tsx"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {Checkbox} from '@react-spectrum/checkbox';\nimport ChevronLeftMedium from '@spectrum-icons/ui/ChevronLeftMedium';\nimport ChevronRightMedium from '@spectrum-icons/ui/ChevronRightMedium';\nimport {classNames, ClearSlots, SlotProvider, useHasChild} from '@react-spectrum/utils';\nimport {CSSTransition} from 'react-transition-group';\nimport type {DraggableItemResult, DropIndicatorAria, DroppableItemResult} from '@react-aria/dnd';\nimport {DropTarget, Node} from '@react-types/shared';\nimport {FocusRing, useFocusRing} from '@react-aria/focus';\nimport {Grid} from '@react-spectrum/layout';\nimport {isFocusVisible as isGlobalFocusVisible, useHover} from '@react-aria/interactions';\nimport ListGripper from '@spectrum-icons/ui/ListGripper';\nimport listStyles from './styles.css';\nimport {ListViewContext} from './ListView';\nimport {mergeProps} from '@react-aria/utils';\nimport {Provider} from '@react-spectrum/provider';\nimport React, {useContext, useRef} from 'react';\nimport {Text} from '@react-spectrum/text';\nimport {useButton} from '@react-aria/button';\nimport {useGridListItem, useGridListSelectionCheckbox} from '@react-aria/gridlist';\nimport {useLocale} from '@react-aria/i18n';\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\ninterface ListViewItemProps<T> {\n  item: Node<T>,\n  isEmphasized: boolean,\n  hasActions: boolean\n}\n\nexport function ListViewItem<T>(props: ListViewItemProps<T>) {\n  let {\n    item,\n    isEmphasized\n  } = props;\n  let {\n    state,\n    dragState,\n    dropState,\n    isListDraggable,\n    isListDroppable,\n    layout,\n    dragAndDropHooks,\n    loadingState\n  } = useContext(ListViewContext);\n  let {direction} = useLocale();\n  let rowRef = useRef<HTMLDivElement>(undefined);\n  let checkboxWrapperRef = useRef<HTMLDivElement>(undefined);\n  let {\n    isFocusVisible: isFocusVisibleWithin,\n    focusProps: focusWithinProps\n  } = useFocusRing({within: true});\n  let {isFocusVisible, focusProps} = useFocusRing();\n  let {\n    rowProps,\n    gridCellProps,\n    isPressed,\n    descriptionProps,\n    isSelected,\n    isDisabled,\n    allowsSelection,\n    hasAction\n  } = useGridListItem({\n    node: item,\n    isVirtualized: true,\n    shouldSelectOnPressUp: isListDraggable\n  }, state, rowRef);\n  let isDroppable = isListDroppable && !isDisabled;\n  let {hoverProps, isHovered} = useHover({isDisabled: !allowsSelection && !hasAction});\n\n  let {checkboxProps} = useGridListSelectionCheckbox({key: item.key}, state);\n  let hasDescription = useHasChild(`.${listStyles['react-spectrum-ListViewItem-description']}`, rowRef);\n\n  let draggableItem: DraggableItemResult;\n  if (isListDraggable) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    draggableItem = dragAndDropHooks.useDraggableItem({key: item.key, hasDragButton: true}, dragState);\n    if (isDisabled) {\n      draggableItem = null;\n    }\n  }\n  let droppableItem: DroppableItemResult;\n  let isDropTarget: boolean;\n  let dropIndicator: DropIndicatorAria;\n  let dropIndicatorRef = useRef(undefined);\n  if (isListDroppable) {\n    let target = {type: 'item', key: item.key, dropPosition: 'on'} as DropTarget;\n    isDropTarget = dropState.isDropTarget(target);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    dropIndicator = dragAndDropHooks.useDropIndicator({target}, dropState, dropIndicatorRef);\n  }\n\n  let dragButtonRef = React.useRef(undefined);\n  let {buttonProps} = useButton({\n    ...draggableItem?.dragButtonProps,\n    elementType: 'div'\n  }, dragButtonRef);\n\n  let chevron = direction === 'ltr'\n    ? (\n      <ChevronRightMedium\n        aria-hidden=\"true\"\n        UNSAFE_className={\n          classNames(\n            listStyles,\n            'react-spectrum-ListViewItem-parentIndicator',\n            {\n              'react-spectrum-ListViewItem-parentIndicator--hasChildItems': item.props.hasChildItems,\n              'is-disabled': !hasAction\n            }\n          )\n        } />\n    )\n    : (\n      <ChevronLeftMedium\n        aria-hidden=\"true\"\n        UNSAFE_className={\n          classNames(\n            listStyles,\n            'react-spectrum-ListViewItem-parentIndicator',\n            {\n              'react-spectrum-ListViewItem-parentIndicator--hasChildItems': item.props.hasChildItems,\n              'is-disabled': !hasAction\n            }\n          )\n        } />\n    );\n\n  let showCheckbox = state.selectionManager.selectionMode !== 'none' && state.selectionManager.selectionBehavior === 'toggle';\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  let dropProps = isDroppable ? droppableItem?.dropProps : {'aria-hidden': droppableItem?.dropProps['aria-hidden']};\n  const mergedProps = mergeProps(\n    rowProps,\n    draggableItem?.dragProps,\n    dropProps,\n    hoverProps,\n    focusWithinProps,\n    focusProps,\n    // Remove tab index from list row if performing a screenreader drag. This prevents TalkBack from focusing the row,\n    // allowing for single swipe navigation between row drop indicator\n    dragAndDropHooks?.isVirtualDragging() && {tabIndex: null}\n  );\n\n  let isFirstRow = item.prevKey == null;\n  let isLastRow = item.nextKey == null;\n  // Figure out if the ListView content is equal or greater in height to the container. If so, we'll need to round the bottom\n  // border corners of the last row when selected and we can get rid of the bottom border if it isn't selected to avoid border overlap\n  // with bottom border\n  let isFlushWithContainerBottom = false;\n  if (isLastRow && loadingState !== 'loadingMore') {\n    if (layout.getContentSize()?.height >= layout.virtualizer?.visibleRect.height) {\n      isFlushWithContainerBottom = true;\n    }\n  }\n  // previous item isn't selected\n  // and the previous item isn't focused or, if it is focused, then if focus globally isn't visible or just focus isn't in the listview\n  let roundTops = (!state.selectionManager.isSelected(item.prevKey)\n    && (state.selectionManager.focusedKey !== item.prevKey || !(isGlobalFocusVisible() && state.selectionManager.isFocused)));\n  let roundBottoms = (!state.selectionManager.isSelected(item.nextKey)\n    && (state.selectionManager.focusedKey !== item.nextKey || !(isGlobalFocusVisible() && state.selectionManager.isFocused)));\n\n  let content = typeof item.rendered === 'string' ? <Text>{item.rendered}</Text> : item.rendered;\n  if (isDisabled) {\n    content = <Provider isDisabled>{content}</Provider>;\n  }\n\n  return (\n    <div\n      {...mergedProps}\n      className={\n        classNames(\n          listStyles,\n          'react-spectrum-ListView-row',\n          {\n            'focus-ring': isFocusVisible,\n            'round-tops':\n              roundTops || (isHovered && !isSelected && state.selectionManager.focusedKey !== item.key),\n            'round-bottoms':\n              roundBottoms || (isHovered && !isSelected && state.selectionManager.focusedKey !== item.key)\n          }\n        )\n      }\n      ref={rowRef}>\n      <div\n        // TODO: refactor the css here now that we are focusing the row?\n        className={\n          classNames(\n            listStyles,\n            'react-spectrum-ListViewItem',\n            {\n              'is-active': isPressed,\n              'is-focused': isFocusVisibleWithin,\n              'focus-ring': isFocusVisible,\n              'is-hovered': isHovered,\n              'is-selected': isSelected,\n              'is-disabled': isDisabled,\n              'is-prev-selected': state.selectionManager.isSelected(item.prevKey),\n              'is-next-selected': state.selectionManager.isSelected(item.nextKey),\n              'react-spectrum-ListViewItem--highlightSelection': state.selectionManager.selectionBehavior === 'replace' && (isSelected || state.selectionManager.isSelected(item.nextKey)),\n              'react-spectrum-ListViewItem--dropTarget': !!isDropTarget,\n              'react-spectrum-ListViewItem--firstRow': isFirstRow,\n              'react-spectrum-ListViewItem--lastRow': isLastRow,\n              'react-spectrum-ListViewItem--isFlushBottom': isFlushWithContainerBottom,\n              'react-spectrum-ListViewItem--hasDescription': hasDescription\n            }\n          )\n        }\n        {...gridCellProps}>\n        <Grid UNSAFE_className={listStyles['react-spectrum-ListViewItem-grid']}>\n          {isListDraggable &&\n            <div className={listStyles['react-spectrum-ListViewItem-draghandle-container']}>\n              {!isDisabled &&\n                <FocusRing focusRingClass={classNames(listStyles, 'focus-ring')}>\n                  <div\n                    {...buttonProps as React.HTMLAttributes<HTMLElement>}\n                    className={\n                      classNames(\n                        listStyles,\n                        'react-spectrum-ListViewItem-draghandle-button'\n                      )\n                    }\n                    style={!isFocusVisibleWithin ? {...visuallyHiddenProps.style} : {}}\n                    ref={dragButtonRef}\n                    draggable=\"true\">\n                    <ListGripper />\n                  </div>\n                </FocusRing>\n              }\n            </div>\n          }\n          {isListDroppable && !dropIndicator?.isHidden &&\n            <div role=\"button\" {...visuallyHiddenProps} {...dropIndicator?.dropIndicatorProps} ref={dropIndicatorRef} />\n          }\n          <CSSTransition\n            in={showCheckbox}\n            unmountOnExit\n            classNames={{\n              enter: listStyles['react-spectrum-ListViewItem-checkbox--enter'],\n              enterActive: listStyles['react-spectrum-ListViewItem-checkbox--enterActive'],\n              exit: listStyles['react-spectrum-ListViewItem-checkbox--exit'],\n              exitActive: listStyles['react-spectrum-ListViewItem-checkbox--exitActive']\n            }}\n            timeout={160}\n            nodeRef={checkboxWrapperRef} >\n            <div ref={checkboxWrapperRef} className={listStyles['react-spectrum-ListViewItem-checkboxWrapper']}>\n              <Checkbox\n                {...checkboxProps}\n                UNSAFE_className={listStyles['react-spectrum-ListViewItem-checkbox']}\n                isEmphasized={isEmphasized} />\n            </div>\n          </CSSTransition>\n          <SlotProvider\n            slots={{\n              text: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-content']},\n              description: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-description'], ...descriptionProps},\n              illustration: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-thumbnail']},\n              image: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-thumbnail']},\n              actionButton: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-actions'], isQuiet: true},\n              actionGroup: {\n                UNSAFE_className: listStyles['react-spectrum-ListViewItem-actions'],\n                isQuiet: true,\n                density: 'compact'\n              },\n              actionMenu: {UNSAFE_className: listStyles['react-spectrum-ListViewItem-actionmenu'], isQuiet: true}\n            }}>\n            {content}\n            <ClearSlots>\n              {chevron}\n            </ClearSlots>\n          </SlotProvider>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}