{"ast":null,"code":"import { listMap as $ce9b18daab526bbd$export$5b9bb410392e3991 } from \"./utils.mjs\";\nimport { useId as $lnALe$useId, filterDOMProps as $lnALe$filterDOMProps, mergeProps as $lnALe$mergeProps } from \"@react-aria/utils\";\nimport { useHighlightSelectionDescription as $lnALe$useHighlightSelectionDescription, useGridSelectionAnnouncement as $lnALe$useGridSelectionAnnouncement } from \"@react-aria/grid\";\nimport { useHasTabbableChild as $lnALe$useHasTabbableChild } from \"@react-aria/focus\";\nimport { useSelectableList as $lnALe$useSelectableList } from \"@react-aria/selection\";\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $f47efb0c3a859cf2$export$664f9155035607eb(props, state, ref) {\n  let {\n    isVirtualized: isVirtualized,\n    keyboardDelegate: keyboardDelegate,\n    layoutDelegate: layoutDelegate,\n    onAction: onAction,\n    linkBehavior = 'action',\n    keyboardNavigationBehavior = 'arrow'\n  } = props;\n  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  let {\n    listProps: listProps\n  } = (0, $lnALe$useSelectableList)({\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    ref: ref,\n    keyboardDelegate: keyboardDelegate,\n    layoutDelegate: layoutDelegate,\n    isVirtualized: isVirtualized,\n    selectOnFocus: state.selectionManager.selectionBehavior === 'replace',\n    shouldFocusWrap: props.shouldFocusWrap,\n    linkBehavior: linkBehavior\n  });\n  let id = (0, $lnALe$useId)(props.id);\n  (0, $ce9b18daab526bbd$export$5b9bb410392e3991).set(state, {\n    id: id,\n    onAction: onAction,\n    linkBehavior: linkBehavior,\n    keyboardNavigationBehavior: keyboardNavigationBehavior\n  });\n  let descriptionProps = (0, $lnALe$useHighlightSelectionDescription)({\n    selectionManager: state.selectionManager,\n    hasItemActions: !!onAction\n  });\n  let hasTabbableChild = (0, $lnALe$useHasTabbableChild)(ref, {\n    isDisabled: state.collection.size !== 0\n  });\n  let domProps = (0, $lnALe$filterDOMProps)(props, {\n    labelable: true\n  });\n  let gridProps = (0, $lnALe$mergeProps)(domProps, {\n    role: 'grid',\n    id: id,\n    'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined\n  },\n  // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.\n  state.collection.size === 0 ? {\n    tabIndex: hasTabbableChild ? -1 : 0\n  } : listProps, descriptionProps);\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = 1;\n  }\n  (0, $lnALe$useGridSelectionAnnouncement)({}, state);\n  return {\n    gridProps: gridProps\n  };\n}\nexport { $f47efb0c3a859cf2$export$664f9155035607eb as useGridList };","map":{"version":3,"names":["$f47efb0c3a859cf2$export$664f9155035607eb","props","state","ref","isVirtualized","keyboardDelegate","layoutDelegate","onAction","linkBehavior","keyboardNavigationBehavior","console","warn","listProps","$lnALe$useSelectableList","selectionManager","collection","disabledKeys","selectOnFocus","selectionBehavior","shouldFocusWrap","id","$lnALe$useId","$ce9b18daab526bbd$export$5b9bb410392e3991","set","descriptionProps","$lnALe$useHighlightSelectionDescription","hasItemActions","hasTabbableChild","$lnALe$useHasTabbableChild","isDisabled","size","domProps","$lnALe$filterDOMProps","labelable","gridProps","$lnALe$mergeProps","role","selectionMode","undefined","tabIndex","$lnALe$useGridSelectionAnnouncement"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/gridlist/dist/packages/@react-aria/gridlist/src/useGridList.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AriaLabelingProps,\n  CollectionBase,\n  DisabledBehavior,\n  DOMAttributes,\n  DOMProps,\n  Key,\n  KeyboardDelegate,\n  LayoutDelegate,\n  MultipleSelection,\n  RefObject\n} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {listMap} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {useGridSelectionAnnouncement, useHighlightSelectionDescription} from '@react-aria/grid';\nimport {useHasTabbableChild} from '@react-aria/focus';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface GridListProps<T> extends CollectionBase<T>, MultipleSelection {\n  /**\n   * Handler that is called when a user performs an action on an item. The exact user event depends on\n   * the collection's `selectionBehavior` prop and the interaction modality.\n   */\n  onAction?: (key: Key) => void,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\nexport interface AriaGridListProps<T> extends GridListProps<T>, DOMProps, AriaLabelingProps {\n  /**\n   * Whether keyboard navigation to focusable elements within grid list items is\n   * via the left/right arrow keys or the tab key.\n   * @default 'arrow'\n   */\n  keyboardNavigationBehavior?: 'arrow' | 'tab'\n}\n\nexport interface AriaGridListOptions<T> extends Omit<AriaGridListProps<T>, 'children'> {\n  /** Whether the list uses virtual scrolling. */\n  isVirtualized?: boolean,\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * A delegate object that provides layout information for items in the collection.\n   * By default this uses the DOM, but this can be overridden to implement things like\n   * virtualized scrolling.\n   */\n  layoutDelegate?: LayoutDelegate,\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean,\n  /**\n   * The behavior of links in the collection.\n   * - 'action': link behaves like onAction.\n   * - 'selection': link follows selection interactions (e.g. if URL drives selection).\n   * - 'override': links override all other interactions (link items are not selectable).\n   * @default 'action'\n   */\n  linkBehavior?: 'action' | 'selection' | 'override'\n}\n\nexport interface GridListAria {\n  /** Props for the grid element. */\n  gridProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a list component with interactive children.\n * A grid list displays data in a single column and enables a user to navigate its contents via directional navigation keys.\n * @param props - Props for the list.\n * @param state - State for the list, as returned by `useListState`.\n * @param ref - The ref attached to the list element.\n */\nexport function useGridList<T>(props: AriaGridListOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement | null>): GridListAria {\n  let {\n    isVirtualized,\n    keyboardDelegate,\n    layoutDelegate,\n    onAction,\n    linkBehavior = 'action',\n    keyboardNavigationBehavior = 'arrow'\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let {listProps} = useSelectableList({\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    ref,\n    keyboardDelegate,\n    layoutDelegate,\n    isVirtualized,\n    selectOnFocus: state.selectionManager.selectionBehavior === 'replace',\n    shouldFocusWrap: props.shouldFocusWrap,\n    linkBehavior\n  });\n\n  let id = useId(props.id);\n  listMap.set(state, {id, onAction, linkBehavior, keyboardNavigationBehavior});\n\n  let descriptionProps = useHighlightSelectionDescription({\n    selectionManager: state.selectionManager,\n    hasItemActions: !!onAction\n  });\n\n  let hasTabbableChild = useHasTabbableChild(ref, {\n    isDisabled: state.collection.size !== 0\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let gridProps: DOMAttributes = mergeProps(\n    domProps,\n    {\n      role: 'grid',\n      id,\n      'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined\n    },\n    // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.\n    state.collection.size === 0 ? {tabIndex: hasTabbableChild ? -1 : 0} : listProps,\n    descriptionProps\n  );\n\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size;\n    gridProps['aria-colcount'] = 1;\n  }\n\n  useGridSelectionAnnouncement({}, state);\n\n  return {\n    gridProps\n  };\n}\n"],"mappings":";;;;;;AAAA;;;;;;;;;;;;AA2FO,SAASA,0CAAeC,KAA6B,EAAEC,KAAmB,EAAEC,GAAkC;EACnH,IAAI;IAAAC,aAAA,EACFA,aAAa;IAAAC,gBAAA,EACbA,gBAAgB;IAAAC,cAAA,EAChBA,cAAc;IAAAC,QAAA,EACdA,QAAQ;IACRC,YAAA,GAAe;IACfC,0BAAA,GAA6B;EAAA,CAC9B,GAAGR,KAAA;EAEJ,IAAI,CAACA,KAAK,CAAC,aAAa,IAAI,CAACA,KAAK,CAAC,kBAAkB,EACnDS,OAAA,CAAQC,IAAI,CAAC;EAGf,IAAI;IAAAC,SAAA,EAACA;EAAS,CAAC,GAAG,IAAAC,wBAAgB,EAAE;IAClCC,gBAAA,EAAkBZ,KAAA,CAAMY,gBAAgB;IACxCC,UAAA,EAAYb,KAAA,CAAMa,UAAU;IAC5BC,YAAA,EAAcd,KAAA,CAAMc,YAAY;SAChCb,GAAA;sBACAE,gBAAA;oBACAC,cAAA;mBACAF,aAAA;IACAa,aAAA,EAAef,KAAA,CAAMY,gBAAgB,CAACI,iBAAiB,KAAK;IAC5DC,eAAA,EAAiBlB,KAAA,CAAMkB,eAAe;kBACtCX;EACF;EAEA,IAAIY,EAAA,GAAK,IAAAC,YAAI,EAAEpB,KAAA,CAAMmB,EAAE;EACvB,IAAAE,yCAAM,EAAEC,GAAG,CAACrB,KAAA,EAAO;QAACkB,EAAA;cAAIb,QAAA;kBAAUC,YAAA;gCAAcC;EAA0B;EAE1E,IAAIe,gBAAA,GAAmB,IAAAC,uCAA+B,EAAE;IACtDX,gBAAA,EAAkBZ,KAAA,CAAMY,gBAAgB;IACxCY,cAAA,EAAgB,CAAC,CAACnB;EACpB;EAEA,IAAIoB,gBAAA,GAAmB,IAAAC,0BAAkB,EAAEzB,GAAA,EAAK;IAC9C0B,UAAA,EAAY3B,KAAA,CAAMa,UAAU,CAACe,IAAI,KAAK;EACxC;EAEA,IAAIC,QAAA,GAAW,IAAAC,qBAAa,EAAE/B,KAAA,EAAO;IAACgC,SAAA,EAAW;EAAI;EACrD,IAAIC,SAAA,GAA2B,IAAAC,iBAAS,EACtCJ,QAAA,EACA;IACEK,IAAA,EAAM;QACNhB,EAAA;IACA,wBAAwBlB,KAAA,CAAMY,gBAAgB,CAACuB,aAAa,KAAK,aAAa,SAASC;EACzF;EACA;EACApC,KAAA,CAAMa,UAAU,CAACe,IAAI,KAAK,IAAI;IAACS,QAAA,EAAUZ,gBAAA,GAAmB,KAAK;EAAC,IAAIf,SAAA,EACtEY,gBAAA;EAGF,IAAIpB,aAAA,EAAe;IACjB8B,SAAS,CAAC,gBAAgB,GAAGhC,KAAA,CAAMa,UAAU,CAACe,IAAI;IAClDI,SAAS,CAAC,gBAAgB,GAAG;EAC/B;EAEA,IAAAM,mCAA2B,EAAE,CAAC,GAAGtC,KAAA;EAEjC,OAAO;eACLgC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}