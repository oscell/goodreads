{"ast":null,"code":"import { useDragSession as $67560de7c78cb232$export$418e185dd3f1b968 } from \"./DragManager.mjs\";\nimport { getDroppableCollectionId as $7252cd45fc48c07c$export$3093291712f09a77 } from \"./utils.mjs\";\nimport $8HwJV$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useDroppableItem as $bfaab576ce1c580e$export$f7b0c5d28b66b6a5 } from \"./useDroppableItem.mjs\";\nimport { useId as $8HwJV$useId } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $8HwJV$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ddf25448c71fc93a$export$8d0e41d2815afac5(props, state, ref) {\n  let {\n    target: target\n  } = props;\n  let {\n    collection: collection\n  } = state;\n  let stringFormatter = (0, $8HwJV$useLocalizedStringFormatter)((0, $parcel$interopDefault($8HwJV$intlStringsmodulejs)), '@react-aria/dnd');\n  let dragSession = $67560de7c78cb232$export$418e185dd3f1b968();\n  let {\n    dropProps: dropProps\n  } = (0, $bfaab576ce1c580e$export$f7b0c5d28b66b6a5)(props, state, ref);\n  let id = (0, $8HwJV$useId)();\n  let getText = key => {\n    var _collection_getTextValue, _collection_getItem;\n    var _collection_getTextValue1;\n    return (_collection_getTextValue1 = (_collection_getTextValue = collection.getTextValue) === null || _collection_getTextValue === void 0 ? void 0 : _collection_getTextValue.call(collection, key)) !== null && _collection_getTextValue1 !== void 0 ? _collection_getTextValue1 : (_collection_getItem = collection.getItem(key)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue;\n  };\n  let label = '';\n  let labelledBy;\n  if (target.type === 'root') {\n    label = stringFormatter.format('dropOnRoot');\n    labelledBy = `${id} ${(0, $7252cd45fc48c07c$export$3093291712f09a77)(state)}`;\n  } else if (target.dropPosition === 'on') label = stringFormatter.format('dropOnItem', {\n    itemText: getText(target.key)\n  });else {\n    let before;\n    let after;\n    if (collection.getFirstKey() === target.key && target.dropPosition === 'before') before = null;else before = target.dropPosition === 'before' ? collection.getKeyBefore(target.key) : target.key;\n    if (collection.getLastKey() === target.key && target.dropPosition === 'after') after = null;else after = target.dropPosition === 'after' ? collection.getKeyAfter(target.key) : target.key;\n    if (before && after) label = stringFormatter.format('insertBetween', {\n      beforeItemText: getText(before),\n      afterItemText: getText(after)\n    });else if (before) label = stringFormatter.format('insertAfter', {\n      itemText: getText(before)\n    });else if (after) label = stringFormatter.format('insertBefore', {\n      itemText: getText(after)\n    });\n  }\n  let isDropTarget = state.isDropTarget(target);\n  let ariaHidden = !dragSession ? 'true' : dropProps['aria-hidden'];\n  return {\n    dropIndicatorProps: {\n      ...dropProps,\n      id: id,\n      'aria-roledescription': stringFormatter.format('dropIndicator'),\n      'aria-label': label,\n      'aria-labelledby': labelledBy,\n      'aria-hidden': ariaHidden,\n      tabIndex: -1\n    },\n    isDropTarget: isDropTarget,\n    // If aria-hidden, we are either not in a drag session or the drop target is invalid.\n    // In that case, there's no need to render anything at all unless we need to show the indicator visually.\n    // This can happen when dragging using the native DnD API as opposed to keyboard dragging.\n    isHidden: !isDropTarget && !!ariaHidden\n  };\n}\nexport { $ddf25448c71fc93a$export$8d0e41d2815afac5 as useDropIndicator };","map":{"version":3,"names":["$ddf25448c71fc93a$export$8d0e41d2815afac5","props","state","ref","target","collection","stringFormatter","$8HwJV$useLocalizedStringFormatter","$parcel$interopDefault","$8HwJV$intlStringsmodulejs","dragSession","$67560de7c78cb232$export$418e185dd3f1b968","dropProps","$bfaab576ce1c580e$export$f7b0c5d28b66b6a5","id","$8HwJV$useId","getText","key","_collection_getTextValue","_collection_getItem","_collection_getTextValue1","getTextValue","call","getItem","textValue","label","labelledBy","type","format","$7252cd45fc48c07c$export$3093291712f09a77","dropPosition","itemText","before","after","getFirstKey","getKeyBefore","getLastKey","getKeyAfter","beforeItemText","afterItemText","isDropTarget","ariaHidden","dropIndicatorProps","tabIndex","isHidden"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/dnd/dist/packages/@react-aria/dnd/src/useDropIndicator.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport * as DragManager from './DragManager';\nimport {DroppableCollectionState} from '@react-stately/dnd';\nimport {DropTarget, Key, RefObject} from '@react-types/shared';\nimport {getDroppableCollectionId} from './utils';\nimport {HTMLAttributes} from 'react';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {useDroppableItem} from './useDroppableItem';\nimport {useId} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DropIndicatorProps {\n  /** The drop target that the drop indicator represents. */\n  target: DropTarget\n}\n\nexport interface DropIndicatorAria {\n  /** Props for the drop indicator element. */\n  dropIndicatorProps: HTMLAttributes<HTMLElement>,\n  /** Whether the drop indicator is currently the active drop target. */\n  isDropTarget: boolean,\n  /**\n   * Whether the drop indicator is hidden, both visually and from assistive technology.\n   * Use this to determine whether to omit the element from the DOM entirely.\n   */\n  isHidden: boolean\n}\n\n/**\n * Handles drop interactions for a target within a droppable collection.\n */\nexport function useDropIndicator(props: DropIndicatorProps, state: DroppableCollectionState, ref: RefObject<HTMLElement | null>): DropIndicatorAria {\n  let {target} = props;\n  let {collection} = state;\n\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/dnd');\n  let dragSession = DragManager.useDragSession();\n  let {dropProps} = useDroppableItem(props, state, ref);\n  let id = useId();\n  let getText = (key: Key) => collection.getTextValue?.(key) ?? collection.getItem(key)?.textValue;\n\n  let label = '';\n  let labelledBy: string;\n  if (target.type === 'root') {\n    label = stringFormatter.format('dropOnRoot');\n    labelledBy = `${id} ${getDroppableCollectionId(state)}`;\n  } else if (target.dropPosition === 'on') {\n    label = stringFormatter.format('dropOnItem', {\n      itemText: getText(target.key)\n    });\n  } else {\n    let before: Key | null;\n    let after: Key | null;\n    if (collection.getFirstKey() === target.key && target.dropPosition === 'before') {\n      before = null;\n    } else {\n      before = target.dropPosition === 'before' ? collection.getKeyBefore(target.key) : target.key;\n    }\n\n    if (collection.getLastKey() === target.key && target.dropPosition === 'after') {\n      after = null;\n    } else {\n      after = target.dropPosition === 'after' ? collection.getKeyAfter(target.key) : target.key;\n    }\n\n    if (before && after) {\n      label = stringFormatter.format('insertBetween', {\n        beforeItemText: getText(before),\n        afterItemText: getText(after)\n      });\n    } else if (before) {\n      label = stringFormatter.format('insertAfter', {\n        itemText: getText(before)\n      });\n    } else if (after) {\n      label = stringFormatter.format('insertBefore', {\n        itemText: getText(after)\n      });\n    }\n  }\n\n  let isDropTarget = state.isDropTarget(target);\n  let ariaHidden = !dragSession ? 'true' : dropProps['aria-hidden'];\n  return {\n    dropIndicatorProps: {\n      ...dropProps,\n      id,\n      'aria-roledescription': stringFormatter.format('dropIndicator'),\n      'aria-label': label,\n      'aria-labelledby': labelledBy,\n      'aria-hidden': ariaHidden,\n      tabIndex: -1\n    },\n    isDropTarget,\n    // If aria-hidden, we are either not in a drag session or the drop target is invalid.\n    // In that case, there's no need to render anything at all unless we need to show the indicator visually.\n    // This can happen when dragging using the native DnD API as opposed to keyboard dragging.\n    isHidden: !isDropTarget && !!ariaHidden\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}