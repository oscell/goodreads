{"ast":null,"code":"'use strict';\n\nvar merge = require('./functions/merge');\nfunction sortObject(obj) {\n  return Object.keys(obj).sort().reduce(function (acc, curr) {\n    acc[curr] = obj[curr];\n    return acc;\n  }, {});\n}\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state)\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(state, refinedFacet)\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (currentRefinement.length > 0 && currentRefinement[0].split(separator).length > 1) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0].split(separator).slice(0, -1).reduce(function createFiltersMap(map, segment, level) {\n          return map.concat({\n            attribute: hierarchicalFacet.attributes[level],\n            value: level === 0 ? segment : [map[map.length - 1].value, segment].join(separator)\n          });\n        }, []);\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(state, filter.attribute, level === 0);\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function (attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n          var filteredFacetFilters = (params.facetFilters || []).reduce(function (acc, facetFilter) {\n            if (Array.isArray(facetFilter)) {\n              var filtered = facetFilter.filter(function (filterValue) {\n                return !hasHierarchicalFacetFilter(filterValue);\n              });\n              if (filtered.length > 0) {\n                acc.push(filtered);\n              }\n            }\n            if (typeof facetFilter === 'string' && !hasHierarchicalFacetFilter(facetFilter)) {\n              acc.push(facetFilter);\n            }\n            return acc;\n          }, []);\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(parent.attribute + ':' + parent.value);\n          } else if (filteredFacetFilters.length > 0) {\n            params.facetFilters = filteredFacetFilters;\n          } else {\n            delete params.facetFilters;\n          }\n          queries.push({\n            indexName: index,\n            params: params\n          });\n        });\n      }\n    });\n    return queries;\n  },\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets.concat(state.disjunctiveFacets).concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state)).sort();\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */\n  _getDisjunctiveFacetSearchParams: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = requestBuilder._getFacetFilters(state, facet, hierarchicalRootLevel);\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false\n    };\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n    if (hierarchicalFacet) {\n      additionalParams.facets = requestBuilder._getDisjunctiveHierarchicalFacetAttribute(state, hierarchicalFacet, hierarchicalRootLevel);\n    } else {\n      additionalParams.facets = facet;\n    }\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n    var numericFilters = [];\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n    return numericFilters;\n  },\n  /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n    return state.tagRefinements.join(',');\n  },\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements).sort().forEach(function (facetName) {\n      var facetValues = facetsRefinements[facetName] || [];\n      facetValues.slice().sort().forEach(function (facetValue) {\n        facetFilters.push(facetName + ':' + facetValue);\n      });\n    });\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes).sort().forEach(function (facetName) {\n      var facetValues = facetsExcludes[facetName] || [];\n      facetValues.sort().forEach(function (facetValue) {\n        facetFilters.push(facetName + ':-' + facetValue);\n      });\n    });\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements).sort().forEach(function (facetName) {\n      var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n      if (facetName === facet || !facetValues || facetValues.length === 0) {\n        return;\n      }\n      var orFilters = [];\n      facetValues.slice().sort().forEach(function (facetValue) {\n        orFilters.push(facetName + ':' + facetValue);\n      });\n      facetFilters.push(orFilters);\n    });\n    var hierarchicalFacetsRefinements = state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements).sort().forEach(function (facetName) {\n      var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n      var facetValue = facetValues[0];\n      if (facetValue === undefined) {\n        return;\n      }\n      var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeToRefine;\n      var attributesIndex;\n\n      // we ask for parent facet values only when the `facet` is the current hierarchical facet\n      if (facet === facetName) {\n        // if we are at the root level already, no need to ask for facet values, we get them from\n        // the hits query\n        if (facetValue.indexOf(separator) === -1 || !rootPath && hierarchicalRootLevel === true || rootPath && rootPath.split(separator).length === facetValue.split(separator).length) {\n          return;\n        }\n        if (!rootPath) {\n          attributesIndex = facetValue.split(separator).length - 2;\n          facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n        } else {\n          attributesIndex = rootPath.split(separator).length - 1;\n          facetValue = rootPath;\n        }\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      } else {\n        attributesIndex = facetValue.split(separator).length - 1;\n        attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n      }\n      if (attributeToRefine) {\n        facetFilters.push([attributeToRefine + ':' + facetValue]);\n      }\n    });\n    return facetFilters;\n  },\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n    return state.hierarchicalFacets.reduce(\n    // ask for as much levels as there's hierarchical refinements\n    function getHitsAttributesForHierarchicalFacet(allAttributes, hierarchicalFacet) {\n      var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0];\n\n      // if no refinement, ask for root level\n      if (!hierarchicalRefinement) {\n        allAttributes.push(hierarchicalFacet.attributes[0]);\n        return allAttributes;\n      }\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n      var level = hierarchicalRefinement.split(separator).length;\n      var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n      return allAttributes.concat(newAttributes);\n    }, out);\n  },\n  _getDisjunctiveHierarchicalFacetAttribute: function (state, hierarchicalFacet, rootLevel) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n    var hierarchicalRefinement = state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName) ? state.clearRefinements(facetName) : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(merge({}, requestBuilder._getHitsSearchParams(stateForSearchForFacetValues), searchForFacetSearchParameters));\n  }\n};\nmodule.exports = requestBuilder;","map":{"version":3,"names":["merge","require","sortObject","obj","Object","keys","sort","reduce","acc","curr","requestBuilder","_getQueries","getQueries","index","state","queries","push","indexName","params","_getHitsSearchParams","getRefinedDisjunctiveFacets","forEach","refinedFacet","_getDisjunctiveFacetSearchParams","getRefinedHierarchicalFacets","hierarchicalFacet","getHierarchicalFacetByName","currentRefinement","getHierarchicalRefinement","separator","_getHierarchicalFacetSeparator","length","split","filtersMap","slice","createFiltersMap","map","segment","level","concat","attribute","attributes","value","join","filter","hasHierarchicalFacetFilter","some","filteredFacetFilters","facetFilters","facetFilter","Array","isArray","filtered","filterValue","parent","facets","disjunctiveFacets","_getHitsHierarchicalFacetsAttributes","_getFacetFilters","numericFilters","_getNumericFilters","tagFilters","_getTagFilters","additionalParams","indexOf","getQueryParams","facet","hierarchicalRootLevel","hitsPerPage","page","analytics","clickAnalytics","_getDisjunctiveHierarchicalFacetAttribute","facetName","numericRefinements","operators","operator","values","vs","v","tagRefinements","facetsRefinements","facetValues","facetValue","facetsExcludes","disjunctiveFacetsRefinements","orFilters","hierarchicalFacetsRefinements","undefined","rootPath","_getHierarchicalRootPath","attributeToRefine","attributesIndex","lastIndexOf","out","hierarchicalFacets","getHitsAttributesForHierarchicalFacet","allAttributes","hierarchicalRefinement","name","newAttributes","rootLevel","attributeIndex","parentLevel","getSearchForFacetQuery","query","maxFacetHits","stateForSearchForFacetValues","isDisjunctiveFacet","clearRefinements","searchForFacetSearchParameters","facetQuery","module","exports"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/algoliasearch-helper/src/requestBuilder.js"],"sourcesContent":["'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort()\n    .reduce(function (acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state),\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(\n          state,\n          refinedFacet\n        ),\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].split(separator).length > 1\n      ) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0]\n          .split(separator)\n          .slice(0, -1)\n          .reduce(function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value:\n                level === 0\n                  ? segment\n                  : [map[map.length - 1].value, segment].join(separator),\n            });\n          }, []);\n\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function (attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n\n          var filteredFacetFilters = (params.facetFilters || []).reduce(\n            function (acc, facetFilter) {\n              if (Array.isArray(facetFilter)) {\n                var filtered = facetFilter.filter(function (filterValue) {\n                  return !hasHierarchicalFacetFilter(filterValue);\n                });\n\n                if (filtered.length > 0) {\n                  acc.push(filtered);\n                }\n              }\n\n              if (\n                typeof facetFilter === 'string' &&\n                !hasHierarchicalFacetFilter(facetFilter)\n              ) {\n                acc.push(facetFilter);\n              }\n\n              return acc;\n            },\n            []\n          );\n\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(\n              parent.attribute + ':' + parent.value\n            );\n          } else if (filteredFacetFilters.length > 0) {\n            params.facetFilters = filteredFacetFilters;\n          } else {\n            delete params.facetFilters;\n          }\n\n          queries.push({ indexName: index, params: params });\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */\n  _getDisjunctiveFacetSearchParams: function (\n    state,\n    facet,\n    hierarchicalRootLevel\n  ) {\n    var facetFilters = requestBuilder._getFacetFilters(\n      state,\n      facet,\n      hierarchicalRootLevel\n    );\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false,\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets =\n        requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n          state,\n          hierarchicalFacet,\n          hierarchicalRootLevel\n        );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsRefinements[facetName] || [];\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            facetFilters.push(facetName + ':' + facetValue);\n          });\n      });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsExcludes[facetName] || [];\n        facetValues.sort().forEach(function (facetValue) {\n          facetFilters.push(facetName + ':-' + facetValue);\n        });\n      });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n        if (facetName === facet || !facetValues || facetValues.length === 0) {\n          return;\n        }\n        var orFilters = [];\n\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            orFilters.push(facetName + ':' + facetValue);\n          });\n\n        facetFilters.push(orFilters);\n      });\n\n    var hierarchicalFacetsRefinements =\n      state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n        var facetValue = facetValues[0];\n\n        if (facetValue === undefined) {\n          return;\n        }\n\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var attributeToRefine;\n        var attributesIndex;\n\n        // we ask for parent facet values only when the `facet` is the current hierarchical facet\n        if (facet === facetName) {\n          // if we are at the root level already, no need to ask for facet values, we get them from\n          // the hits query\n          if (\n            facetValue.indexOf(separator) === -1 ||\n            (!rootPath && hierarchicalRootLevel === true) ||\n            (rootPath &&\n              rootPath.split(separator).length ===\n                facetValue.split(separator).length)\n          ) {\n            return;\n          }\n\n          if (!rootPath) {\n            attributesIndex = facetValue.split(separator).length - 2;\n            facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n          } else {\n            attributesIndex = rootPath.split(separator).length - 1;\n            facetValue = rootPath;\n          }\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        } else {\n          attributesIndex = facetValue.split(separator).length - 1;\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        }\n\n        if (attributeToRefine) {\n          facetFilters.push([attributeToRefine + ':' + facetValue]);\n        }\n      });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(\n        allAttributes,\n        hierarchicalFacet\n      ) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(\n          hierarchicalFacet.name\n        )[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      },\n      out\n    );\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function (\n    state,\n    hierarchicalFacet,\n    rootLevel\n  ) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement =\n      state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName)\n      ? state.clearRefinements(facetName)\n      : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName,\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(\n      merge(\n        {},\n        requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n        searchForFacetSearchParameters\n      )\n    );\n  },\n};\n\nmodule.exports = requestBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}