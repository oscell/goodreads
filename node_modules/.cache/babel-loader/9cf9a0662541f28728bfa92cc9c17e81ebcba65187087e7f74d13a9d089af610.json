{"ast":null,"code":"import \"./vars.e2a76556.css\";\nimport $dcNtB$tooltip_vars_cssmodulejs from \"./tooltip_vars_css.mjs\";\nimport { TooltipContext as $b8c00169fae46ac7$export$39ae08fa83328b12 } from \"./context.mjs\";\nimport $dcNtB$spectrumiconsuiAlertSmall from \"@spectrum-icons/ui/AlertSmall\";\nimport { useStyleProps as $dcNtB$useStyleProps, createDOMRef as $dcNtB$createDOMRef, classNames as $dcNtB$classNames } from \"@react-spectrum/utils\";\nimport $dcNtB$spectrumiconsuiInfoSmall from \"@spectrum-icons/ui/InfoSmall\";\nimport { mergeProps as $dcNtB$mergeProps } from \"@react-aria/utils\";\nimport $dcNtB$react, { useContext as $dcNtB$useContext, useRef as $dcNtB$useRef, useImperativeHandle as $dcNtB$useImperativeHandle } from \"react\";\nimport $dcNtB$spectrumiconsuiSuccessSmall from \"@spectrum-icons/ui/SuccessSmall\";\nimport { useTooltip as $dcNtB$useTooltip } from \"@react-aria/tooltip\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $dc9e2a6f9971fb04$var$iconMap = {\n  info: (0, $dcNtB$spectrumiconsuiInfoSmall),\n  positive: (0, $dcNtB$spectrumiconsuiSuccessSmall),\n  negative: (0, $dcNtB$spectrumiconsuiAlertSmall)\n};\nfunction $dc9e2a6f9971fb04$var$Tooltip(props, ref) {\n  let {\n    ref: overlayRef,\n    arrowProps: arrowProps,\n    state: state,\n    arrowRef: arrowRef,\n    ...tooltipProviderProps\n  } = (0, $dcNtB$useContext)((0, $b8c00169fae46ac7$export$39ae08fa83328b12));\n  let defaultRef = (0, $dcNtB$useRef)(undefined);\n  overlayRef = overlayRef || defaultRef;\n  props = (0, $dcNtB$mergeProps)(props, tooltipProviderProps);\n  let {\n    variant = 'neutral',\n    placement = 'top',\n    isOpen: isOpen,\n    showIcon: showIcon,\n    ...otherProps\n  } = props;\n  let {\n    styleProps: styleProps\n  } = (0, $dcNtB$useStyleProps)(otherProps);\n  let {\n    tooltipProps: tooltipProps\n  } = (0, $dcNtB$useTooltip)(props, state);\n  // Sync ref with overlayRef from context.\n  (0, $dcNtB$useImperativeHandle)(ref, () => (0, $dcNtB$createDOMRef)(overlayRef));\n  let Icon = $dc9e2a6f9971fb04$var$iconMap[variant];\n  return /*#__PURE__*/(0, $dcNtB$react).createElement(\"div\", {\n    ...styleProps,\n    ...tooltipProps,\n    className: (0, $dcNtB$classNames)((0, $parcel$interopDefault($dcNtB$tooltip_vars_cssmodulejs)), 'spectrum-Tooltip', `spectrum-Tooltip--${variant}`, `spectrum-Tooltip--${placement}`, {\n      'is-open': isOpen,\n      [`is-open--${placement}`]: isOpen\n    }, styleProps.className),\n    ref: overlayRef\n  }, showIcon && variant !== 'neutral' && /*#__PURE__*/(0, $dcNtB$react).createElement(Icon, {\n    UNSAFE_className: (0, $dcNtB$classNames)((0, $parcel$interopDefault($dcNtB$tooltip_vars_cssmodulejs)), 'spectrum-Tooltip-typeIcon'),\n    \"aria-hidden\": true\n  }), props.children && /*#__PURE__*/(0, $dcNtB$react).createElement(\"span\", {\n    className: (0, $dcNtB$classNames)((0, $parcel$interopDefault($dcNtB$tooltip_vars_cssmodulejs)), 'spectrum-Tooltip-label')\n  }, props.children), /*#__PURE__*/(0, $dcNtB$react).createElement(\"span\", {\n    ...arrowProps,\n    ref: arrowRef,\n    className: (0, $dcNtB$classNames)((0, $parcel$interopDefault($dcNtB$tooltip_vars_cssmodulejs)), 'spectrum-Tooltip-tip')\n  }));\n}\n/**\n * Display container for Tooltip content. Has a directional arrow dependent on its placement.\n */\nlet $dc9e2a6f9971fb04$export$28c660c63b792dea = /*#__PURE__*/(0, $dcNtB$react).forwardRef($dc9e2a6f9971fb04$var$Tooltip);\nexport { $dc9e2a6f9971fb04$export$28c660c63b792dea as Tooltip };","map":{"version":3,"names":["$dc9e2a6f9971fb04$var$iconMap","info","$dcNtB$spectrumiconsuiInfoSmall","positive","$dcNtB$spectrumiconsuiSuccessSmall","negative","$dcNtB$spectrumiconsuiAlertSmall","$dc9e2a6f9971fb04$var$Tooltip","props","ref","overlayRef","arrowProps","state","arrowRef","tooltipProviderProps","$dcNtB$useContext","$b8c00169fae46ac7$export$39ae08fa83328b12","defaultRef","$dcNtB$useRef","undefined","$dcNtB$mergeProps","variant","placement","isOpen","showIcon","otherProps","styleProps","$dcNtB$useStyleProps","tooltipProps","$dcNtB$useTooltip","$dcNtB$useImperativeHandle","$dcNtB$createDOMRef","Icon","$dcNtB$react","createElement","className","$dcNtB$classNames","$parcel$interopDefault","$dcNtB$tooltip_vars_cssmodulejs","UNSAFE_className","children","$dc9e2a6f9971fb04$export$28c660c63b792dea","forwardRef"],"sources":["/Users/oscar.meunier/Documents/Coding/Personal/final/goodreads/node_modules/@react-spectrum/tooltip/dist/packages/@react-spectrum/tooltip/src/Tooltip.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport AlertSmall from '@spectrum-icons/ui/AlertSmall';\nimport {classNames, createDOMRef, useStyleProps} from '@react-spectrum/utils';\nimport {DOMRef} from '@react-types/shared';\nimport InfoSmall from '@spectrum-icons/ui/InfoSmall';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {useContext, useImperativeHandle, useRef} from 'react';\nimport {SpectrumTooltipProps} from '@react-types/tooltip';\nimport styles from '@adobe/spectrum-css-temp/components/tooltip/vars.css';\nimport SuccessSmall from '@spectrum-icons/ui/SuccessSmall';\nimport {TooltipContext} from './context';\nimport {useTooltip} from '@react-aria/tooltip';\n\nlet iconMap = {\n  info: InfoSmall,\n  positive: SuccessSmall,\n  negative: AlertSmall\n};\n\nfunction Tooltip(props: SpectrumTooltipProps, ref: DOMRef) {\n  let {ref: overlayRef, arrowProps, state, arrowRef, ...tooltipProviderProps} = useContext(TooltipContext);\n  let defaultRef = useRef(undefined);\n  overlayRef = overlayRef || defaultRef;\n  props = mergeProps(props, tooltipProviderProps);\n  let {\n    variant = 'neutral',\n    placement = 'top',\n    isOpen,\n    showIcon,\n    ...otherProps\n  } = props;\n  let {styleProps} = useStyleProps(otherProps);\n  let {tooltipProps} = useTooltip(props, state);\n\n  // Sync ref with overlayRef from context.\n  useImperativeHandle(ref, () => createDOMRef(overlayRef));\n\n  let Icon = iconMap[variant];\n\n  return (\n    <div\n      {...styleProps}\n      {...tooltipProps}\n      className={classNames(\n        styles,\n        'spectrum-Tooltip',\n        `spectrum-Tooltip--${variant}`,\n        `spectrum-Tooltip--${placement}`,\n        {\n          'is-open': isOpen,\n          [`is-open--${placement}`]: isOpen\n        },\n        styleProps.className\n      )}\n      ref={overlayRef}>\n      {showIcon && variant !== 'neutral' && <Icon UNSAFE_className={classNames(styles, 'spectrum-Tooltip-typeIcon')} aria-hidden />}\n      {props.children && (\n        <span className={classNames(styles, 'spectrum-Tooltip-label')}>\n          {props.children}\n        </span>\n      )}\n      <span {...arrowProps} ref={arrowRef} className={classNames(styles, 'spectrum-Tooltip-tip')} />\n    </div>\n  );\n}\n\n/**\n * Display container for Tooltip content. Has a directional arrow dependent on its placement.\n */\nlet _Tooltip = React.forwardRef(Tooltip);\nexport {_Tooltip as Tooltip};\n"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAwBA,IAAIA,6BAAA,GAAU;EACZC,IAAA,GAAM,GAAAC,+BAAQ;EACdC,QAAA,GAAU,GAAAC,kCAAW;EACrBC,QAAA,GAAU,GAAAC,gCAAS;AACrB;AAEA,SAASC,8BAAQC,KAA2B,EAAEC,GAAW;EACvD,IAAI;IAACA,GAAA,EAAKC,UAAU;IAAAC,UAAA,EAAEA,UAAU;IAAAC,KAAA,EAAEA,KAAK;IAAAC,QAAA,EAAEA,QAAQ;IAAE,GAAGC;EAAA,CAAqB,GAAG,IAAAC,iBAAS,GAAE,GAAAC,yCAAa;EACtG,IAAIC,UAAA,GAAa,IAAAC,aAAK,EAAEC,SAAA;EACxBT,UAAA,GAAaA,UAAA,IAAcO,UAAA;EAC3BT,KAAA,GAAQ,IAAAY,iBAAS,EAAEZ,KAAA,EAAOM,oBAAA;EAC1B,IAAI;IACFO,OAAA,GAAU;IACVC,SAAA,GAAY;IAAAC,MAAA,EACZA,MAAM;IAAAC,QAAA,EACNA,QAAQ;IACR,GAAGC;EAAA,CACJ,GAAGjB,KAAA;EACJ,IAAI;IAAAkB,UAAA,EAACA;EAAU,CAAC,GAAG,IAAAC,oBAAY,EAAEF,UAAA;EACjC,IAAI;IAAAG,YAAA,EAACA;EAAY,CAAC,GAAG,IAAAC,iBAAS,EAAErB,KAAA,EAAOI,KAAA;EAEvC;EACA,IAAAkB,0BAAkB,EAAErB,GAAA,EAAK,MAAM,IAAAsB,mBAAW,EAAErB,UAAA;EAE5C,IAAIsB,IAAA,GAAOhC,6BAAO,CAACqB,OAAA,CAAQ;EAE3B,oBACE,IAAAY,YAAA,EAAAC,aAAA,CAAC;IACE,GAAGR,UAAU;IACb,GAAGE,YAAY;IAChBO,SAAA,EAAW,IAAAC,iBAAS,GAClB,GAAAC,sBAAA,CAAAC,+BAAA,CAAK,GACL,oBACA,qBAAqBjB,OAAA,EAAS,EAC9B,qBAAqBC,SAAA,EAAW,EAChC;MACE,WAAWC,MAAA;MACX,CAAC,YAAYD,SAAA,EAAW,GAAGC;IAC7B,GACAG,UAAA,CAAWS,SAAS;IAEtB1B,GAAA,EAAKC;KACJc,QAAA,IAAYH,OAAA,KAAY,0BAAa,IAAAY,YAAA,EAAAC,aAAA,CAACF,IAAA;IAAKO,gBAAA,EAAkB,IAAAH,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,+BAAA,CAAK,GAAG;IAA8B;MAC9G9B,KAAA,CAAMgC,QAAQ,iBACb,IAAAP,YAAA,EAAAC,aAAA,CAAC;IAAKC,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,+BAAA,CAAK,GAAG;KACjC9B,KAAA,CAAMgC,QAAQ,gBAGnB,IAAAP,YAAA,EAAAC,aAAA,CAAC;IAAM,GAAGvB,UAAU;IAAEF,GAAA,EAAKI,QAAA;IAAUsB,SAAA,EAAW,IAAAC,iBAAS,GAAE,GAAAC,sBAAA,CAAAC,+BAAA,CAAK,GAAG;;AAGzE;AAEA;;;AAGA,IAAIG,yCAAA,gBAAW,IAAAR,YAAI,EAAES,UAAU,CAACnC,6BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}