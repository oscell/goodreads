{"ast":null,"code":"import { DialogContext as $97b119e05830ea0d$export$8b93a07348a7730c } from \"./context.mjs\";\nimport { Modal as $jYq0n$Modal, Tray as $jYq0n$Tray, Popover as $jYq0n$Popover } from \"@react-spectrum/overlays\";\nimport { useOverlayTriggerState as $jYq0n$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { PressResponder as $jYq0n$PressResponder } from \"@react-aria/interactions\";\nimport $jYq0n$react, { useRef as $jYq0n$useRef, useEffect as $jYq0n$useEffect, Fragment as $jYq0n$Fragment } from \"react\";\nimport { useIsMobileDevice as $jYq0n$useIsMobileDevice } from \"@react-spectrum/utils\";\nimport { useOverlayTrigger as $jYq0n$useOverlayTrigger } from \"@react-aria/overlays\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $c412c5ea680c1e4f$var$DialogTrigger(props) {\n  let {\n    children: children,\n    type = 'modal',\n    mobileType = type === 'popover' ? 'modal' : type,\n    hideArrow: hideArrow,\n    targetRef: targetRef,\n    isDismissable: isDismissable,\n    isKeyboardDismissDisabled: isKeyboardDismissDisabled,\n    ...positionProps\n  } = props;\n  if (!Array.isArray(children) || children.length > 2) throw new Error('DialogTrigger must have exactly 2 children');\n  // if a function is passed as the second child, it won't appear in toArray\n  let [trigger, content] = children;\n  // On small devices, show a modal or tray instead of a popover.\n  let isMobile = (0, $jYq0n$useIsMobileDevice)();\n  if (isMobile) {\n    // handle cases where desktop popovers need a close button for the mobile modal view\n    if (type !== 'modal' && mobileType === 'modal') isDismissable = true;\n    type = mobileType;\n  }\n  let state = (0, $jYq0n$useOverlayTriggerState)(props);\n  let wasOpen = (0, $jYq0n$useRef)(false);\n  (0, $jYq0n$useEffect)(() => {\n    wasOpen.current = state.isOpen;\n  }, [state.isOpen]);\n  let isExiting = (0, $jYq0n$useRef)(false);\n  let onExiting = () => isExiting.current = true;\n  let onExited = () => isExiting.current = false;\n  // eslint-disable-next-line arrow-body-style\n  (0, $jYq0n$useEffect)(() => {\n    return () => {\n      if ((wasOpen.current || isExiting.current) && type !== 'popover' && type !== 'tray') console.warn('A DialogTrigger unmounted while open. This is likely due to being placed within a trigger that unmounts or inside a conditional. Consider using a DialogContainer instead.');\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  if (type === 'popover') return /*#__PURE__*/(0, $jYq0n$react).createElement($c412c5ea680c1e4f$var$PopoverTrigger, {\n    ...positionProps,\n    state: state,\n    targetRef: targetRef,\n    trigger: trigger,\n    content: content,\n    isKeyboardDismissDisabled: isKeyboardDismissDisabled,\n    hideArrow: hideArrow\n  });\n  let renderOverlay = () => {\n    switch (type) {\n      case 'fullscreen':\n      case 'fullscreenTakeover':\n      case 'modal':\n        return /*#__PURE__*/(0, $jYq0n$react).createElement((0, $jYq0n$Modal), {\n          state: state,\n          isDismissable: type === 'modal' ? isDismissable : false,\n          type: type,\n          isKeyboardDismissDisabled: isKeyboardDismissDisabled,\n          onExiting: onExiting,\n          onExited: onExited\n        }, typeof content === 'function' ? content(state.close) : content);\n      case 'tray':\n        return /*#__PURE__*/(0, $jYq0n$react).createElement((0, $jYq0n$Tray), {\n          state: state,\n          isKeyboardDismissDisabled: isKeyboardDismissDisabled\n        }, typeof content === 'function' ? content(state.close) : content);\n    }\n  };\n  return /*#__PURE__*/(0, $jYq0n$react).createElement($c412c5ea680c1e4f$var$DialogTriggerBase, {\n    type: type,\n    state: state,\n    isDismissable: isDismissable,\n    trigger: trigger,\n    overlay: renderOverlay()\n  });\n}\n// Support DialogTrigger inside components using CollectionBuilder.\n$c412c5ea680c1e4f$var$DialogTrigger.getCollectionNode = function* (props) {\n  // @ts-ignore - seems like types are wrong. Function children work fine.\n  let [trigger] = (0, $jYq0n$react).Children.toArray(props.children);\n  let [, content] = props.children;\n  yield {\n    element: trigger,\n    wrapper: element => /*#__PURE__*/(0, $jYq0n$react).createElement($c412c5ea680c1e4f$var$DialogTrigger, {\n      key: element.key,\n      ...props\n    }, element, content)\n  };\n};\n/**\n * DialogTrigger serves as a wrapper around a Dialog and its associated trigger, linking the Dialog's\n * open state with the trigger's press state. Additionally, it allows you to customize the type and\n * positioning of the Dialog.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $c412c5ea680c1e4f$export$2e1e1122cf0cba88 = $c412c5ea680c1e4f$var$DialogTrigger;\nfunction $c412c5ea680c1e4f$var$PopoverTrigger({\n  state: state,\n  targetRef: targetRef,\n  trigger: trigger,\n  content: content,\n  hideArrow: hideArrow,\n  ...props\n}) {\n  let triggerRef = (0, $jYq0n$useRef)(null);\n  let {\n    triggerProps: triggerProps,\n    overlayProps: overlayProps\n  } = (0, $jYq0n$useOverlayTrigger)({\n    type: 'dialog'\n  }, state, triggerRef);\n  let triggerPropsWithRef = {\n    ...triggerProps,\n    ref: targetRef ? undefined : triggerRef\n  };\n  let overlay = /*#__PURE__*/(0, $jYq0n$react).createElement((0, $jYq0n$Popover), {\n    ...props,\n    hideArrow: hideArrow,\n    triggerRef: targetRef || triggerRef,\n    state: state\n  }, typeof content === 'function' ? content(state.close) : content);\n  return /*#__PURE__*/(0, $jYq0n$react).createElement($c412c5ea680c1e4f$var$DialogTriggerBase, {\n    type: \"popover\",\n    state: state,\n    triggerProps: triggerPropsWithRef,\n    dialogProps: overlayProps,\n    trigger: trigger,\n    overlay: overlay\n  });\n}\nfunction $c412c5ea680c1e4f$var$DialogTriggerBase({\n  type: type,\n  state: state,\n  isDismissable: isDismissable,\n  dialogProps = {},\n  triggerProps = {},\n  overlay: overlay,\n  trigger: trigger\n}) {\n  let context = {\n    type: type,\n    onClose: state.close,\n    isDismissable: isDismissable,\n    ...dialogProps\n  };\n  return /*#__PURE__*/(0, $jYq0n$react).createElement((0, $jYq0n$Fragment), null, /*#__PURE__*/(0, $jYq0n$react).createElement((0, $jYq0n$PressResponder), {\n    ...triggerProps,\n    onPress: state.toggle,\n    isPressed: state.isOpen && type !== 'modal' && type !== 'fullscreen' && type !== 'fullscreenTakeover'\n  }, trigger), /*#__PURE__*/(0, $jYq0n$react).createElement((0, $97b119e05830ea0d$export$8b93a07348a7730c).Provider, {\n    value: context\n  }, overlay));\n}\nexport { $c412c5ea680c1e4f$export$2e1e1122cf0cba88 as DialogTrigger };","map":{"version":3,"names":["$c412c5ea680c1e4f$var$DialogTrigger","props","children","type","mobileType","hideArrow","targetRef","isDismissable","isKeyboardDismissDisabled","positionProps","Array","isArray","length","Error","trigger","content","isMobile","$jYq0n$useIsMobileDevice","state","$jYq0n$useOverlayTriggerState","wasOpen","$jYq0n$useRef","$jYq0n$useEffect","current","isOpen","isExiting","onExiting","onExited","console","warn","$jYq0n$react","createElement","$c412c5ea680c1e4f$var$PopoverTrigger","renderOverlay","$jYq0n$Modal","close","$jYq0n$Tray","$c412c5ea680c1e4f$var$DialogTriggerBase","overlay","getCollectionNode","Children","toArray","element","wrapper","key","$c412c5ea680c1e4f$export$2e1e1122cf0cba88","triggerRef","triggerProps","overlayProps","$jYq0n$useOverlayTrigger","triggerPropsWithRef","ref","undefined","$jYq0n$Popover","dialogProps","context","onClose","$jYq0n$Fragment","$jYq0n$PressResponder","onPress","toggle","isPressed","$97b119e05830ea0d$export$8b93a07348a7730c","Provider","value"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-spectrum/dialog/dist/packages/@react-spectrum/dialog/src/DialogTrigger.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DialogContext} from './context';\nimport {Modal, Popover, Tray} from '@react-spectrum/overlays';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {PressResponder} from '@react-aria/interactions';\nimport React, {Fragment, JSX, ReactElement, useEffect, useRef} from 'react';\nimport {SpectrumDialogClose, SpectrumDialogProps, SpectrumDialogTriggerProps} from '@react-types/dialog';\nimport {useIsMobileDevice} from '@react-spectrum/utils';\nimport {useOverlayTrigger} from '@react-aria/overlays';\n\nfunction DialogTrigger(props: SpectrumDialogTriggerProps) {\n  let {\n    children,\n    type = 'modal',\n    mobileType = type === 'popover' ? 'modal' : type,\n    hideArrow,\n    targetRef,\n    isDismissable,\n    isKeyboardDismissDisabled,\n    ...positionProps\n  } = props;\n  if (!Array.isArray(children) || children.length > 2) {\n    throw new Error('DialogTrigger must have exactly 2 children');\n  }\n  // if a function is passed as the second child, it won't appear in toArray\n  let [trigger, content] = children as [ReactElement, SpectrumDialogClose];\n\n  // On small devices, show a modal or tray instead of a popover.\n  let isMobile = useIsMobileDevice();\n  if (isMobile) {\n    // handle cases where desktop popovers need a close button for the mobile modal view\n    if (type !== 'modal' && mobileType === 'modal') {\n      isDismissable = true;\n    }\n\n    type = mobileType;\n  }\n\n  let state = useOverlayTriggerState(props);\n  let wasOpen = useRef(false);\n  useEffect(() => {\n    wasOpen.current = state.isOpen;\n  }, [state.isOpen]);\n\n  let isExiting = useRef(false);\n  let onExiting = () => isExiting.current = true;\n  let onExited = () => isExiting.current = false;\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if ((wasOpen.current || isExiting.current) && type !== 'popover' && type !== 'tray') {\n        console.warn('A DialogTrigger unmounted while open. This is likely due to being placed within a trigger that unmounts or inside a conditional. Consider using a DialogContainer instead.');\n      }\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (type === 'popover') {\n    return (\n      <PopoverTrigger\n        {...positionProps}\n        state={state}\n        targetRef={targetRef}\n        trigger={trigger}\n        content={content}\n        isKeyboardDismissDisabled={isKeyboardDismissDisabled}\n        hideArrow={hideArrow} />\n    );\n  }\n\n  let renderOverlay = () => {\n    switch (type) {\n      case 'fullscreen':\n      case 'fullscreenTakeover':\n      case 'modal':\n        return (\n          <Modal\n            state={state}\n            isDismissable={type === 'modal' ? isDismissable : false}\n            type={type}\n            isKeyboardDismissDisabled={isKeyboardDismissDisabled}\n            onExiting={onExiting}\n            onExited={onExited}>\n            {typeof content === 'function' ? content(state.close) : content}\n          </Modal>\n        );\n      case 'tray':\n        return (\n          <Tray\n            state={state}\n            isKeyboardDismissDisabled={isKeyboardDismissDisabled}>\n            {typeof content === 'function' ? content(state.close) : content}\n          </Tray>\n        );\n    }\n  };\n\n  return (\n    <DialogTriggerBase\n      type={type}\n      state={state}\n      isDismissable={isDismissable}\n      trigger={trigger}\n      overlay={renderOverlay()} />\n  );\n}\n\n// Support DialogTrigger inside components using CollectionBuilder.\nDialogTrigger.getCollectionNode = function* (props: SpectrumDialogTriggerProps) {\n  // @ts-ignore - seems like types are wrong. Function children work fine.\n  let [trigger] = React.Children.toArray(props.children);\n  let [, content] = props.children as [ReactElement, SpectrumDialogClose];\n  yield {\n    element: trigger,\n    wrapper: (element) => (\n      <DialogTrigger key={element.key} {...props}>\n        {element}\n        {content}\n      </DialogTrigger>\n    )\n  };\n};\n\n/**\n * DialogTrigger serves as a wrapper around a Dialog and its associated trigger, linking the Dialog's\n * open state with the trigger's press state. Additionally, it allows you to customize the type and\n * positioning of the Dialog.\n */\n\n// We don't want getCollectionNode to show up in the type definition\nlet _DialogTrigger = DialogTrigger as (props: SpectrumDialogTriggerProps) => JSX.Element;\nexport {_DialogTrigger as DialogTrigger};\n\nfunction PopoverTrigger({state, targetRef, trigger, content, hideArrow, ...props}) {\n  let triggerRef = useRef<HTMLElement>(null);\n  let {triggerProps, overlayProps} = useOverlayTrigger({type: 'dialog'}, state, triggerRef);\n\n  let triggerPropsWithRef = {\n    ...triggerProps,\n    ref: targetRef ? undefined : triggerRef\n  };\n\n  let overlay = (\n    <Popover\n      {...props}\n      hideArrow={hideArrow}\n      triggerRef={targetRef || triggerRef}\n      state={state}>\n      {typeof content === 'function' ? content(state.close) : content}\n    </Popover>\n  );\n\n  return (\n    <DialogTriggerBase\n      type=\"popover\"\n      state={state}\n      triggerProps={triggerPropsWithRef}\n      dialogProps={overlayProps}\n      trigger={trigger}\n      overlay={overlay} />\n  );\n}\n\ninterface SpectrumDialogTriggerBase {\n  type: 'modal' | 'popover' | 'tray' | 'fullscreen' | 'fullscreenTakeover',\n  state: OverlayTriggerState,\n  isDismissable?: boolean,\n  dialogProps?: SpectrumDialogProps | {},\n  triggerProps?: any,\n  overlay?: ReactElement,\n  trigger: ReactElement\n}\n\nfunction DialogTriggerBase({type, state, isDismissable, dialogProps = {}, triggerProps = {}, overlay, trigger}: SpectrumDialogTriggerBase) {\n  let context = {\n    type,\n    onClose: state.close,\n    isDismissable,\n    ...dialogProps\n  };\n\n  return (\n    <Fragment>\n      <PressResponder\n        {...triggerProps}\n        onPress={state.toggle}\n        isPressed={state.isOpen && type !== 'modal' && type !== 'fullscreen' && type !== 'fullscreenTakeover'}>\n        {trigger}\n      </PressResponder>\n      <DialogContext.Provider value={context}>\n        {overlay}\n      </DialogContext.Provider>\n    </Fragment>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}