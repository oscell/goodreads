{"ast":null,"code":"import { selectData as $58aed456727eb0f3$export$703601b7e90536f8 } from \"./useSelect.mjs\";\nimport $8BE50$react, { useRef as $8BE50$useRef } from \"react\";\nimport { useFormReset as $8BE50$useFormReset } from \"@react-aria/utils\";\nimport { useFormValidation as $8BE50$useFormValidation } from \"@react-aria/form\";\nimport { useInteractionModality as $8BE50$useInteractionModality } from \"@react-aria/interactions\";\nimport { useVisuallyHidden as $8BE50$useVisuallyHidden } from \"@react-aria/visually-hidden\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef) {\n  let data = (0, $58aed456727eb0f3$export$703601b7e90536f8).get(state) || {};\n  let {\n    autoComplete: autoComplete,\n    name = data.name,\n    isDisabled = data.isDisabled\n  } = props;\n  let {\n    validationBehavior: validationBehavior,\n    isRequired: isRequired\n  } = data;\n  let modality = (0, $8BE50$useInteractionModality)();\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $8BE50$useVisuallyHidden)();\n  (0, $8BE50$useFormReset)(props.selectRef, state.selectedKey, state.setSelectedKey);\n  (0, $8BE50$useFormValidation)({\n    validationBehavior: validationBehavior,\n    focus: () => triggerRef.current.focus()\n  }, state, props.selectRef);\n  var _state_selectedKey;\n  // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.\n  // In Firefox, there must be a <label> to identify the <select> whereas other browsers\n  // seem to identify it just by surrounding text.\n  // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a\n  // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>\n  // non tabbable with tabIndex={-1}.\n  //\n  // In mobile browsers, there are next/previous buttons above the software keyboard for navigating\n  // between fields in a form. These only support native form inputs that are tabbable. In order to\n  // support those, an additional hidden input is used to marshall focus to the button. It is tabbable\n  // except when the button is focused, so that shift tab works properly to go to the actual previous\n  // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes\n  // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to\n  // prevent Safari from zooming in on the input when it is focused.\n  //\n  // If the current interaction modality is null, then the user hasn't interacted with the page yet.\n  // In this case, we set the tabIndex to -1 on the input element so that automated accessibility\n  // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.\n  return {\n    containerProps: {\n      ...visuallyHiddenProps,\n      'aria-hidden': true,\n      // @ts-ignore\n      ['data-react-aria-prevent-focus']: true,\n      // @ts-ignore\n      ['data-a11y-ignore']: 'aria-hidden-focus'\n    },\n    inputProps: {\n      type: 'text',\n      tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,\n      style: {\n        fontSize: 16\n      },\n      onFocus: () => triggerRef.current.focus(),\n      disabled: isDisabled\n    },\n    selectProps: {\n      tabIndex: -1,\n      autoComplete: autoComplete,\n      disabled: isDisabled,\n      required: validationBehavior === 'native' && isRequired,\n      name: name,\n      value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : '',\n      onChange: e => state.setSelectedKey(e.target.value)\n    }\n  };\n}\nfunction $bdd25dc72710631f$export$cbd84cdb2e668835(props) {\n  let {\n    state: state,\n    triggerRef: triggerRef,\n    label: label,\n    name: name,\n    isDisabled: isDisabled\n  } = props;\n  let selectRef = (0, $8BE50$useRef)(null);\n  let {\n    containerProps: containerProps,\n    inputProps: inputProps,\n    selectProps: selectProps\n  } = $bdd25dc72710631f$export$f809e80f58e251d1({\n    ...props,\n    selectRef: selectRef\n  }, state, triggerRef);\n  var _state_selectedKey;\n  // If used in a <form>, use a hidden input so the value can be submitted to a server.\n  // If the collection isn't too big, use a hidden <select> element for this so that browser\n  // autofill will work. Otherwise, use an <input type=\"hidden\">.\n  if (state.collection.size <= 300) return /*#__PURE__*/(0, $8BE50$react).createElement(\"div\", {\n    ...containerProps,\n    \"data-testid\": \"hidden-select-container\"\n  }, /*#__PURE__*/(0, $8BE50$react).createElement(\"input\", inputProps), /*#__PURE__*/(0, $8BE50$react).createElement(\"label\", null, label, /*#__PURE__*/(0, $8BE50$react).createElement(\"select\", {\n    ...selectProps,\n    ref: selectRef\n  }, /*#__PURE__*/(0, $8BE50$react).createElement(\"option\", null), [...state.collection.getKeys()].map(key => {\n    let item = state.collection.getItem(key);\n    if (item.type === 'item') return /*#__PURE__*/(0, $8BE50$react).createElement(\"option\", {\n      key: item.key,\n      value: item.key\n    }, item.textValue);\n  }))));else if (name) return /*#__PURE__*/(0, $8BE50$react).createElement(\"input\", {\n    type: \"hidden\",\n    autoComplete: selectProps.autoComplete,\n    name: name,\n    disabled: isDisabled,\n    value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : ''\n  });\n  return null;\n}\nexport { $bdd25dc72710631f$export$f809e80f58e251d1 as useHiddenSelect, $bdd25dc72710631f$export$cbd84cdb2e668835 as HiddenSelect };","map":{"version":3,"names":["$bdd25dc72710631f$export$f809e80f58e251d1","props","state","triggerRef","data","$58aed456727eb0f3$export$703601b7e90536f8","get","autoComplete","name","isDisabled","validationBehavior","isRequired","modality","$8BE50$useInteractionModality","visuallyHiddenProps","$8BE50$useVisuallyHidden","$8BE50$useFormReset","selectRef","selectedKey","setSelectedKey","$8BE50$useFormValidation","focus","current","_state_selectedKey","containerProps","inputProps","type","tabIndex","isFocused","isOpen","style","fontSize","onFocus","disabled","selectProps","required","value","onChange","e","target","$bdd25dc72710631f$export$cbd84cdb2e668835","label","$8BE50$useRef","collection","size","$8BE50$react","createElement","ref","getKeys","map","key","item","getItem","textValue"],"sources":["/Users/oscar.meunier/Documents/Personal/goodreads/node_modules/@react-aria/select/dist/packages/@react-aria/select/src/HiddenSelect.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement, RefObject} from '@react-types/shared';\nimport React, {ReactNode, useRef} from 'react';\nimport {selectData} from './useSelect';\nimport {SelectState} from '@react-stately/select';\nimport {useFormReset} from '@react-aria/utils';\nimport {useFormValidation} from '@react-aria/form';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useVisuallyHidden} from '@react-aria/visually-hidden';\n\nexport interface AriaHiddenSelectProps {\n  /**\n   * Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).\n   */\n  autoComplete?: string,\n\n  /** The text label for the select. */\n  label?: ReactNode,\n\n  /** HTML form input name. */\n  name?: string,\n\n  /** Sets the disabled state of the select and input. */\n  isDisabled?: boolean\n}\n\nexport interface HiddenSelectProps<T> extends AriaHiddenSelectProps {\n  /** State for the select. */\n  state: SelectState<T>,\n\n  /** A ref to the trigger element. */\n  triggerRef: RefObject<FocusableElement | null>\n}\n\nexport interface AriaHiddenSelectOptions extends AriaHiddenSelectProps {\n  /** A ref to the hidden `<select>` element. */\n  selectRef?: RefObject<HTMLSelectElement | null>\n}\n\nexport interface HiddenSelectAria {\n  /** Props for the container element. */\n  containerProps: React.HTMLAttributes<FocusableElement>,\n\n  /** Props for the hidden input element. */\n  inputProps: React.InputHTMLAttributes<HTMLInputElement>,\n\n  /** Props for the hidden select element. */\n  selectProps: React.SelectHTMLAttributes<HTMLSelectElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a hidden `<select>` element, which\n * can be used in combination with `useSelect` to support browser form autofill, mobile form\n * navigation, and native HTML form submission.\n */\nexport function useHiddenSelect<T>(props: AriaHiddenSelectOptions, state: SelectState<T>, triggerRef: RefObject<FocusableElement | null>): HiddenSelectAria {\n  let data = selectData.get(state) || {};\n  let {autoComplete, name = data.name, isDisabled = data.isDisabled} = props;\n  let {validationBehavior, isRequired} = data;\n  let modality = useInteractionModality();\n  let {visuallyHiddenProps} = useVisuallyHidden();\n\n  useFormReset(props.selectRef, state.selectedKey, state.setSelectedKey);\n  useFormValidation({\n    validationBehavior,\n    focus: () => triggerRef.current.focus()\n  }, state, props.selectRef);\n\n  // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.\n  // In Firefox, there must be a <label> to identify the <select> whereas other browsers\n  // seem to identify it just by surrounding text.\n  // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a\n  // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>\n  // non tabbable with tabIndex={-1}.\n  //\n  // In mobile browsers, there are next/previous buttons above the software keyboard for navigating\n  // between fields in a form. These only support native form inputs that are tabbable. In order to\n  // support those, an additional hidden input is used to marshall focus to the button. It is tabbable\n  // except when the button is focused, so that shift tab works properly to go to the actual previous\n  // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes\n  // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to\n  // prevent Safari from zooming in on the input when it is focused.\n  //\n  // If the current interaction modality is null, then the user hasn't interacted with the page yet.\n  // In this case, we set the tabIndex to -1 on the input element so that automated accessibility\n  // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.\n  return {\n    containerProps: {\n      ...visuallyHiddenProps,\n      'aria-hidden': true,\n      // @ts-ignore\n      ['data-react-aria-prevent-focus']: true,\n      // @ts-ignore\n      ['data-a11y-ignore']: 'aria-hidden-focus'\n    },\n    inputProps: {\n      type: 'text',\n      tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,\n      style: {fontSize: 16},\n      onFocus: () => triggerRef.current.focus(),\n      disabled: isDisabled\n    },\n    selectProps: {\n      tabIndex: -1,\n      autoComplete,\n      disabled: isDisabled,\n      required: validationBehavior === 'native' && isRequired,\n      name,\n      value: state.selectedKey ?? '',\n      onChange: (e: React.ChangeEvent<HTMLSelectElement>) => state.setSelectedKey(e.target.value)\n    }\n  };\n}\n\n/**\n * Renders a hidden native `<select>` element, which can be used to support browser\n * form autofill, mobile form navigation, and native form submission.\n */\nexport function HiddenSelect<T>(props: HiddenSelectProps<T>) {\n  let {state, triggerRef, label, name, isDisabled} = props;\n  let selectRef = useRef(null);\n  let {containerProps, inputProps, selectProps} = useHiddenSelect({...props, selectRef}, state, triggerRef);\n\n  // If used in a <form>, use a hidden input so the value can be submitted to a server.\n  // If the collection isn't too big, use a hidden <select> element for this so that browser\n  // autofill will work. Otherwise, use an <input type=\"hidden\">.\n  if (state.collection.size <= 300) {\n    return (\n      <div {...containerProps} data-testid=\"hidden-select-container\">\n        <input {...inputProps} />\n        <label>\n          {label}\n          <select {...selectProps} ref={selectRef}>\n            <option />\n            {[...state.collection.getKeys()].map(key => {\n              let item = state.collection.getItem(key);\n              if (item.type === 'item') {\n                return (\n                  <option\n                    key={item.key}\n                    value={item.key}>\n                    {item.textValue}\n                  </option>\n                );\n              }\n            })}\n          </select>\n        </label>\n      </div>\n    );\n  } else if (name) {\n    return (\n      <input\n        type=\"hidden\"\n        autoComplete={selectProps.autoComplete}\n        name={name}\n        disabled={isDisabled}\n        value={state.selectedKey ?? ''} />\n    );\n  }\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}